//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace System.Activities.Resources {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "16.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class SR {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal SR() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("System.Activities.Resources.SR", typeof(SR).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The WorkflowApplication has been aborted because an instance update attempt failed..
        /// </summary>
        internal static string AbortingDueToDynamicUpdateFailure {
            get {
                return ResourceManager.GetString("AbortingDueToDynamicUpdateFailure", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The workflow instance was aborted because its execution timed out..
        /// </summary>
        internal static string AbortingDueToInstanceTimeout {
            get {
                return ResourceManager.GetString("AbortingDueToInstanceTimeout", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The WorkflowApplication has been aborted because a Load or LoadRunnableInstance operation threw an exception. Create a new WorkflowApplication object to try loading another workflow instance..
        /// </summary>
        internal static string AbortingDueToLoadFailure {
            get {
                return ResourceManager.GetString("AbortingDueToLoadFailure", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The WorkflowApplication has been aborted because a Load or LoadRunnableInstance operation threw a VersionMismatchException..
        /// </summary>
        internal static string AbortingDueToVersionMismatch {
            get {
                return ResourceManager.GetString("AbortingDueToVersionMismatch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The value of the AbortInstanceOnTransactionFailure property of TransactionScope activity &apos;{0}&apos; nested in TransactedReceiveScope activity &apos;{1}&apos; should not be set to false..
        /// </summary>
        internal static string AbortInstanceOnTransactionFailureDoesNotMatch {
            get {
                return ResourceManager.GetString("AbortInstanceOnTransactionFailureDoesNotMatch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to IO Thread scheduler callback invoked..
        /// </summary>
        internal static string ActionItemCallbackInvoked {
            get {
                return ResourceManager.GetString("ActionItemCallbackInvoked", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The ActionItem was already scheduled for execution that hasn&apos;t been completed yet..
        /// </summary>
        internal static string ActionItemIsAlreadyScheduled {
            get {
                return ResourceManager.GetString("ActionItemIsAlreadyScheduled", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to IO Thread scheduler callback invoked..
        /// </summary>
        internal static string ActionItemScheduled {
            get {
                return ResourceManager.GetString("ActionItemScheduled", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Activity &apos;{0}&apos;: {1}.
        /// </summary>
        internal static string ActivityBlockingUpdate {
            get {
                return ResourceManager.GetString("ActivityBlockingUpdate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The activity &apos;{1}&apos; cannot reference activity &apos;{0}&apos; because activity &apos;{0}&apos; is already referenced elsewhere in the workflow and that reference is not visible to activity &apos;{1}&apos;.  In order for activity &apos;{0}&apos; to be visible to activity &apos;{1}&apos;, it would have to be a child or imported child (but not an implementation child) of activity &apos;{2}&apos;.  Activity &apos;{0}&apos; is originally referenced by activity &apos;{3}&apos; and activity &apos;{1}&apos; is in the implementation of activity &apos;{2}&apos;..
        /// </summary>
        internal static string ActivityCannotBeReferenced {
            get {
                return ResourceManager.GetString("ActivityCannotBeReferenced", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The activity &apos;{0}&apos; cannot be referenced by activity &apos;{1}&apos; because the latter is not in another activity&apos;s implementation.  An activity can only be referenced by the implementation of an activity which specifies that activity as a child or import.  Activity &apos;{0}&apos; is declared by activity &apos;{2}&apos;..
        /// </summary>
        internal static string ActivityCannotBeReferencedWithoutTarget {
            get {
                return ResourceManager.GetString("ActivityCannotBeReferencedWithoutTarget", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The activity with display name &apos;{0}&apos; is attempting to reference itself.  An activity cannot be its own parent..
        /// </summary>
        internal static string ActivityCannotReferenceItself {
            get {
                return ResourceManager.GetString("ActivityCannotReferenceItself", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Activity &apos;{0}&apos;, DisplayName: &apos;{1}&apos;, InstanceId: &apos;{2}&apos; has completed in the &apos;{3}&apos; state..
        /// </summary>
        internal static string ActivityCompleted {
            get {
                return ResourceManager.GetString("ActivityCompleted", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The activity definition object for &apos;{0}&apos; appears to be shared between multiple nodes in the workflow. It is incorrect to reuse an activity definition object within a workflow..
        /// </summary>
        internal static string ActivityDefinitionCannotBeShared {
            get {
                return ResourceManager.GetString("ActivityDefinitionCannotBeShared", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ActivityDelegate &apos;{0}&apos; is already parented by activity &apos;{1}&apos; and cannot be parented by activity &apos;{2}&apos;.  A delegate can only be returned as a child once..
        /// </summary>
        internal static string ActivityDelegateAlreadyOpened {
            get {
                return ResourceManager.GetString("ActivityDelegateAlreadyOpened", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The activity delegate with Handler &apos;{0}&apos; cannot be referenced by activity &apos;{1}&apos; because the latter is not in the implementation of activity &apos;{2}&apos;.  An activity delegate can only be referenced by the implementation of an activity which specifies that activity delegate as a child or import.  The activity delegate with Handler &apos;{0}&apos; is declared by activity &apos;{3}&apos;..
        /// </summary>
        internal static string ActivityDelegateCannotBeReferenced {
            get {
                return ResourceManager.GetString("ActivityDelegateCannotBeReferenced", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The activity delegate with no Handler cannot be referenced by activity &apos;{0}&apos; because the latter is not in the implementation of activity &apos;{1}&apos;.  An activity delegate can only be referenced by the implementation of an activity which specifies that activity delegate as a child or import.  The activity delegate with no Handler is declared by activity &apos;{2}&apos;..
        /// </summary>
        internal static string ActivityDelegateCannotBeReferencedNoHandler {
            get {
                return ResourceManager.GetString("ActivityDelegateCannotBeReferencedNoHandler", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The activity delegate with Handler &apos;{0}&apos; cannot be referenced by activity &apos;{1}&apos; because the latter is not in another activity&apos;s implementation.  An activity delegate can only be referenced by the implementation of an activity which specifies that activity delegate as a child or import.  The activity delegate with Handler &apos;{0}&apos; is declared by activity &apos;{2}&apos;..
        /// </summary>
        internal static string ActivityDelegateCannotBeReferencedWithoutTarget {
            get {
                return ResourceManager.GetString("ActivityDelegateCannotBeReferencedWithoutTarget", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The activity delegate with no Handler cannot be referenced by activity &apos;{0}&apos; because the latter is not in another activity&apos;s implementation.  An activity delegate can only be referenced by the implementation of an activity which specifies that activity delegate as a child or import.  The activity delegate with no Handler is declared by activity &apos;{1}&apos;..
        /// </summary>
        internal static string ActivityDelegateCannotBeReferencedWithoutTargetNoHandler {
            get {
                return ResourceManager.GetString("ActivityDelegateCannotBeReferencedWithoutTargetNoHandler", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Handler for an ActivityDelegate, ActivityAction, or ActivityFunc must not be a reference to an activity already existing in the tree.  The Handler activity &apos;{0}&apos; of a delegate parented by &apos;{1}&apos; is already referenced by &apos;{2}&apos;..
        /// </summary>
        internal static string ActivityDelegateHandlersMustBeDeclarations {
            get {
                return ResourceManager.GetString("ActivityDelegateHandlersMustBeDeclarations", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ActivityDelegate &apos;{0}&apos; is not in the opened state..
        /// </summary>
        internal static string ActivityDelegateNotOpened {
            get {
                return ResourceManager.GetString("ActivityDelegateNotOpened", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Location environment for activity &apos;{0}&apos; that declares activity delegate &apos;{1}&apos; was not found..
        /// </summary>
        internal static string ActivityDelegateOwnerEnvironmentMissing {
            get {
                return ResourceManager.GetString("ActivityDelegateOwnerEnvironmentMissing", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ActivityDelegate &apos;{0}&apos; should have an owner workflow element specified..
        /// </summary>
        internal static string ActivityDelegateOwnerMissing {
            get {
                return ResourceManager.GetString("ActivityDelegateOwnerMissing", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Activity declaring ActivityDelegate &apos;{0}&apos; was not found in the parent hierarchy of the currently executing activity &apos;{1}&apos;..
        /// </summary>
        internal static string ActivityDelegateOwnerNotInParentScope {
            get {
                return ResourceManager.GetString("ActivityDelegateOwnerNotInParentScope", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This activity cannot be opened because it has failed to open previously..
        /// </summary>
        internal static string ActivityFailedToOpenBefore {
            get {
                return ResourceManager.GetString("ActivityFailedToOpenBefore", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Activity &apos;{0}&apos; has an implementation map, but no implementation..
        /// </summary>
        internal static string ActivityHasNoImplementation {
            get {
                return ResourceManager.GetString("ActivityHasNoImplementation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Workflow load failed. The given activity tree is not compatible with this instance..
        /// </summary>
        internal static string ActivityInstanceFixupFailed {
            get {
                return ResourceManager.GetString("ActivityInstanceFixupFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This argument needs to be the root of the workflow definition..
        /// </summary>
        internal static string ActivityIsNotRoot {
            get {
                return ResourceManager.GetString("ActivityIsNotRoot", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This method can only be called after CacheMetadata has been called on the workflow definition..
        /// </summary>
        internal static string ActivityIsUncached {
            get {
                return ResourceManager.GetString("ActivityIsUncached", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Mapping from activity program to instance is corrupt within the persisted instance..
        /// </summary>
        internal static string ActivityMapIsCorrupt {
            get {
                return ResourceManager.GetString("ActivityMapIsCorrupt", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Activity &apos;{0}&apos; not found..
        /// </summary>
        internal static string ActivityNotFound {
            get {
                return ResourceManager.GetString("ActivityNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Activity must be an ICompiledExpressionRoot to determine expression id.  Make sure that the current definition has been compiled..
        /// </summary>
        internal static string ActivityNotICompiledExpressionRoot {
            get {
                return ResourceManager.GetString("ActivityNotICompiledExpressionRoot", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The provided activity was not part of this workflow definition when its metadata was being processed.  The problematic activity named &apos;{0}&apos; was provided by the activity named &apos;{1}&apos;..
        /// </summary>
        internal static string ActivityNotPartOfThisTree {
            get {
                return ResourceManager.GetString("ActivityNotPartOfThisTree", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; is a required property for activity &apos;{1}&apos;..
        /// </summary>
        internal static string ActivityPropertyMustBeSet {
            get {
                return ResourceManager.GetString("ActivityPropertyMustBeSet", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; property of activity &apos;{1}&apos; is null and it will not do anything..
        /// </summary>
        internal static string ActivityPropertyNotSet {
            get {
                return ResourceManager.GetString("ActivityPropertyNotSet", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;Name&apos; is a required property for each ActivityProperty on DynamicActivity &apos;{0}&apos;..
        /// </summary>
        internal static string ActivityPropertyRequiresName {
            get {
                return ResourceManager.GetString("ActivityPropertyRequiresName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;Type&apos; is a required property for each ActivityProperty on DynamicActivity &apos;{0}&apos;..
        /// </summary>
        internal static string ActivityPropertyRequiresType {
            get {
                return ResourceManager.GetString("ActivityPropertyRequiresType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Parent Activity &apos;{0}&apos;, DisplayName: &apos;{1}&apos;, InstanceId: &apos;{2}&apos; scheduled child Activity &apos;{3}&apos;, DisplayName: &apos;{4}&apos;, InstanceId: &apos;{5}&apos;..
        /// </summary>
        internal static string ActivityScheduled {
            get {
                return ResourceManager.GetString("ActivityScheduled", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; is not of type &apos;{1}&apos;. When loading this instance you must ensure that the activity with name &apos;{0}&apos; implements &apos;{1}&apos;..
        /// </summary>
        internal static string ActivityTypeMismatch {
            get {
                return ResourceManager.GetString("ActivityTypeMismatch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Line.
        /// </summary>
        internal static string ActivityXamlServiceLineString {
            get {
                return ResourceManager.GetString("ActivityXamlServiceLineString", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Compilation failures occurred: {0}Complete results are contained in the Data property of this exception.  Please correct the errors in the source and retry the Load..
        /// </summary>
        internal static string ActivityXamlServicesCompilationFailed {
            get {
                return ResourceManager.GetString("ActivityXamlServicesCompilationFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ActivityXamlServices.Load only supports Activity-based types.  Invalid type ({0}) was provided..
        /// </summary>
        internal static string ActivityXamlServicesRequiresActivity {
            get {
                return ResourceManager.GetString("ActivityXamlServicesRequiresActivity", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The expression for newly added argument &apos;{0}&apos; contains Activity &apos;{1}&apos;, which can idle during execution. To enable dynamic update inside this activity, use an argument expression that is guaranteed not to idle..
        /// </summary>
        internal static string AddedIdleArgumentBlockDU {
            get {
                return ResourceManager.GetString("AddedIdleArgumentBlockDU", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A new variable default or argument expression was added that can idle during execution..
        /// </summary>
        internal static string AddedIdleExpressionBlockDU {
            get {
                return ResourceManager.GetString("AddedIdleExpressionBlockDU", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The default expression for newly added variable &apos;{0}&apos; contains Activity &apos;{1}&apos;, which can idle during execution. To enable dynamic update inside this activity, use a variable default expression that is guaranteed not to idle..
        /// </summary>
        internal static string AddedIdleVariableDefaultBlockDU {
            get {
                return ResourceManager.GetString("AddedIdleVariableDefaultBlockDU", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot match new Activity &apos;{0}&apos; with old Activity &apos;{1}&apos; because their declarers do not match. The new Activity is declared by &apos;{2}&apos; and the old Activity is declared by &apos;{3}&apos;..
        /// </summary>
        internal static string AddMatchActivityNewAndOldParentMismatch {
            get {
                return ResourceManager.GetString("AddMatchActivityNewAndOldParentMismatch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Activity &apos;{0}&apos; cannot add a match for Activity &apos;{1}&apos; because it is not its declarer. The matched Activity is declared by &apos;{2}&apos;..
        /// </summary>
        internal static string AddMatchActivityNewParentMismatch {
            get {
                return ResourceManager.GetString("AddMatchActivityNewParentMismatch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot add a match for Activity &apos;{0}&apos; because it is a private child. Matches can only be added for public children..
        /// </summary>
        internal static string AddMatchActivityPrivateChild {
            get {
                return ResourceManager.GetString("AddMatchActivityPrivateChild", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot match new Variable &apos;{0}&apos; with old Variable &apos;{1}&apos; because their owners do not match. The new Variable is owned by &apos;{2}&apos; and the old Variable is owned by &apos;{3}&apos;..
        /// </summary>
        internal static string AddMatchVariableNewAndOldParentMismatch {
            get {
                return ResourceManager.GetString("AddMatchVariableNewAndOldParentMismatch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Activity &apos;{0}&apos; cannot add a match for Variable &apos;{1}&apos; because it is not its owner. The matched Variable is owned by &apos;{2}&apos;..
        /// </summary>
        internal static string AddMatchVariableNewParentMismatch {
            get {
                return ResourceManager.GetString("AddMatchVariableNewParentMismatch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot add a match for Variable &apos;{0}&apos; because it is private. Matches can only be added for public variables..
        /// </summary>
        internal static string AddMatchVariablePrivateChild {
            get {
                return ResourceManager.GetString("AddMatchVariablePrivateChild", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Activity &apos;{0}&apos; cannot add a variable match because the two variables&apos; signatures don&apos;t match. The signature including Name, Type and Modifiers must match.  Name, Type and Modifiers of the new variable are {1}, {2} and {3}, respectively.  Name, Type and Modifiers of the old variable are {4}, {5} and {6}, respectively.  .
        /// </summary>
        internal static string AddMatchVariableSignatureMismatch {
            get {
                return ResourceManager.GetString("AddMatchVariableSignatureMismatch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to AddValidationError can only be called from the subtree of a {0} activity..
        /// </summary>
        internal static string AddValidationErrorMustBeCalledFromConstraint {
            get {
                return ResourceManager.GetString("AddValidationErrorMustBeCalledFromConstraint", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An ActivityContext can only be accessed within the scope of the function it was passed into..
        /// </summary>
        internal static string AECDisposed {
            get {
                return ResourceManager.GetString("AECDisposed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The ActivityContext which created this ExecutionProperties object has already been disposed. Properties can only be accessed during an activity&apos;s work item..
        /// </summary>
        internal static string AECForPropertiesHasBeenDisposed {
            get {
                return ResourceManager.GetString("AECForPropertiesHasBeenDisposed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The instance persistence system is unable to process an invalid InstancePersistenceCommand.  The command requires an unbound handle, but the InstanceHandle is already bound to an instance..
        /// </summary>
        internal static string AlreadyBoundToInstance {
            get {
                return ResourceManager.GetString("AlreadyBoundToInstance", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The instance persistence system is unable to process an invalid InstancePersistenceCommand.  The command requires an unbound handle, but the InstanceHandle is already bound to an instance owner..
        /// </summary>
        internal static string AlreadyBoundToOwner {
            get {
                return ResourceManager.GetString("AlreadyBoundToOwner", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This workflow element has already setup a no persistence block.  Only one no persistence block can be setup by a workflow element..
        /// </summary>
        internal static string AlreadySetupNoPersist {
            get {
                return ResourceManager.GetString("AlreadySetupNoPersist", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; is an ambiguous variable reference.  VisualBasic identifiers are case-insensitive..
        /// </summary>
        internal static string AmbiguousVBVariableReference {
            get {
                return ResourceManager.GetString("AmbiguousVBVariableReference", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to AppDomain unloading. AppDomain.FriendlyName {0}, ProcessName {1}, ProcessId {2}..
        /// </summary>
        internal static string AppDomainUnload {
            get {
                return ResourceManager.GetString("AppDomainUnload", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Argument &apos;{0}&apos; on activity &apos;{1}&apos; was expected to be added by a dynamic update, but is already initialized..
        /// </summary>
        internal static string ArgumentAlreadyInitialized {
            get {
                return ResourceManager.GetString("ArgumentAlreadyInitialized", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Argument &apos;{0}&apos; is being used by Activity &apos;{1}&apos;, so it cannot also be used by Activity &apos;{2}&apos;..
        /// </summary>
        internal static string ArgumentAlreadyInUse {
            get {
                return ResourceManager.GetString("ArgumentAlreadyInUse", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Activity with DisplayName=&apos;{0}&apos; has an argument named &apos;{1}&apos; that is of null or void type..
        /// </summary>
        internal static string ArgumentCannotHaveNullOrVoidType {
            get {
                return ResourceManager.GetString("ArgumentCannotHaveNullOrVoidType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Argument provided for the RuntimeArgument &apos;{0}&apos; cannot be bound because of a direction mismatch.  The RuntimeArgument declares the direction to be {1} and the Argument has a direction of {2}..
        /// </summary>
        internal static string ArgumentDirectionMismatch {
            get {
                return ResourceManager.GetString("ArgumentDirectionMismatch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No argument of name &apos;{0}&apos; exists in this collection..
        /// </summary>
        internal static string ArgumentDoesNotExist {
            get {
                return ResourceManager.GetString("ArgumentDoesNotExist", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Argument &apos;{0}&apos; does not exist in the current environment scope..
        /// </summary>
        internal static string ArgumentDoesNotExistInEnvironment {
            get {
                return ResourceManager.GetString("ArgumentDoesNotExistInEnvironment", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Argument &apos;{0}&apos; is added more than once in Activity &apos;{1}&apos;..
        /// </summary>
        internal static string ArgumentIsAddedMoreThanOnce {
            get {
                return ResourceManager.GetString("ArgumentIsAddedMoreThanOnce", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Expression is required to be type &apos;{0}&apos;, but type &apos;{1}&apos; was provided..
        /// </summary>
        internal static string ArgumentLocationExpressionTypeMismatch {
            get {
                return ResourceManager.GetString("ArgumentLocationExpressionTypeMismatch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An argument must be one of properties of a WorkflowElement..
        /// </summary>
        internal static string ArgumentMustbePropertyofWorkflowElement {
            get {
                return ResourceManager.GetString("ArgumentMustbePropertyofWorkflowElement", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The argument name of an ArgumentReference or ArgumentValue must be set..
        /// </summary>
        internal static string ArgumentNameRequired {
            get {
                return ResourceManager.GetString("ArgumentNameRequired", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The argument named &apos;{0}&apos; could not be found on the activity owning these private children.  ArgumentReference and ArgumentValue should only be used in the body of an Activity definition..
        /// </summary>
        internal static string ArgumentNotFound {
            get {
                return ResourceManager.GetString("ArgumentNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The argument of type &apos;{0}&apos; cannot be used.  Make sure that it is declared on an activity..
        /// </summary>
        internal static string ArgumentNotInTree {
            get {
                return ResourceManager.GetString("ArgumentNotInTree", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The argument {0} is null or empty..
        /// </summary>
        internal static string ArgumentNullOrEmpty {
            get {
                return ResourceManager.GetString("ArgumentNullOrEmpty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Argument number and parameter number of type &apos;{0}&apos; are required to be the same..
        /// </summary>
        internal static string ArgumentNumberRequiresTheSameAsParameterNumber {
            get {
                return ResourceManager.GetString("ArgumentNumberRequiresTheSameAsParameterNumber", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The content of argument in &apos;{0}&apos; collection of &apos;{1}&apos; is required..
        /// </summary>
        internal static string ArgumentRequired {
            get {
                return ResourceManager.GetString("ArgumentRequired", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Argument type cannot be null..
        /// </summary>
        internal static string ArgumentTypeCannotBeNull {
            get {
                return ResourceManager.GetString("ArgumentTypeCannotBeNull", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Argument provided for the RuntimeArgument &apos;{0}&apos; cannot be bound because of a type mismatch.  The RuntimeArgument declares the type to be {1} and the Argument has a type of {2}.  Both types must be the same..
        /// </summary>
        internal static string ArgumentTypeMismatch {
            get {
                return ResourceManager.GetString("ArgumentTypeMismatch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The argument type must be compatible with the type of this ArgumentReference or ArgumentValue.  Argument &apos;{0}&apos; is of type {1} and the expected type is {2}..
        /// </summary>
        internal static string ArgumentTypeMustBeCompatible {
            get {
                return ResourceManager.GetString("ArgumentTypeMustBeCompatible", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The argument requires the ResultType to be &apos;{0}&apos;, but an Activity with result type &apos;{1}&apos; is provided..
        /// </summary>
        internal static string ArgumentValueExpressionTypeMismatch {
            get {
                return ResourceManager.GetString("ArgumentValueExpressionTypeMismatch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Violations found in &apos;{0}&apos; activity. One or more violations were found as follows:    {1}.
        /// </summary>
        internal static string ArgumentViolationsFound {
            get {
                return ResourceManager.GetString("ArgumentViolationsFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The built-in default AssemblyReferences cannot be changed..
        /// </summary>
        internal static string AssemblyReferenceIsImmutable {
            get {
                return ResourceManager.GetString("AssemblyReferenceIsImmutable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 4.0.0.0.
        /// </summary>
        internal static string AssemblyVersion {
            get {
                return ResourceManager.GetString("AssemblyVersion", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Async Callback threw an exception..
        /// </summary>
        internal static string AsyncCallbackThrewException {
            get {
                return ResourceManager.GetString("AsyncCallbackThrewException", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The AsyncEventArgs implementation &apos;{0}&apos; tried to complete a single operation multiple times. This could be caused by an incorrect application AsyncEventArgs implementation or other extensibility code that invokes the AsyncCallback multiple times..
        /// </summary>
        internal static string AsyncEventArgsCompletedTwice {
            get {
                return ResourceManager.GetString("AsyncEventArgsCompletedTwice", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The AsyncEventArgs implementation &apos;{0}&apos; tried to set the state to Pending multiple times without completing a pending operation. This could be caused by an incorrect application AsyncEventArgs implementation or other extensibility code that invokes Set() multiple times..
        /// </summary>
        internal static string AsyncEventArgsCompletionPending {
            get {
                return ResourceManager.GetString("AsyncEventArgsCompletionPending", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The async methods must be all static methods or all instance methods..
        /// </summary>
        internal static string AsyncMethodsMustAllBeStaticOrInstance {
            get {
                return ResourceManager.GetString("AsyncMethodsMustAllBeStaticOrInstance", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The async methods must be from the same type..
        /// </summary>
        internal static string AsyncMethodsMustFromSameType {
            get {
                return ResourceManager.GetString("AsyncMethodsMustFromSameType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to End cannot be called twice on an AsyncResult..
        /// </summary>
        internal static string AsyncResultAlreadyEnded {
            get {
                return ResourceManager.GetString("AsyncResultAlreadyEnded", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The IAsyncResult implementation &apos;{0}&apos; tried to complete a single operation multiple times. This could be caused by an incorrect application IAsyncResult implementation or other extensibility code, such as an IAsyncResult that returns incorrect CompletedSynchronously values or invokes the AsyncCallback multiple times..
        /// </summary>
        internal static string AsyncResultCompletedTwice {
            get {
                return ResourceManager.GetString("AsyncResultCompletedTwice", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An exception was thrown from a TransactionScope used to flow a transaction into an asynchronous operation..
        /// </summary>
        internal static string AsyncTransactionException {
            get {
                return ResourceManager.GetString("AsyncTransactionException", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot copy dictionary items to the specified array. This happened due to one or more of the following errors: the array had too many dimensions; the index was past the end of the array; the array did not have enough space..
        /// </summary>
        internal static string BadCopyToArray {
            get {
                return ResourceManager.GetString("BadCopyToArray", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid WorkflowIdentity format. WorkflowIdentity must follow the format &apos;name; Version=version; Package=package&apos;. The Version and Package portions are optional..
        /// </summary>
        internal static string BadWorkflowIdentityFormat {
            get {
                return ResourceManager.GetString("BadWorkflowIdentityFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The resource expected to be generated by the BeforeInitializeComponent XAML build task extension was not found. Try rebuilding the project..
        /// </summary>
        internal static string BeforeInitializeComponentXBTExtensionResourceNotFound {
            get {
                return ResourceManager.GetString("BeforeInitializeComponentXBTExtensionResourceNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to AsyncCodeActivity.BeginExecute must not return a null IAsyncResult..
        /// </summary>
        internal static string BeginExecuteMustNotReturnANullAsyncResult {
            get {
                return ResourceManager.GetString("BeginExecuteMustNotReturnANullAsyncResult", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to AsyncCodeActivity.BeginExecute must return an IAsyncResult where IAsyncResult.AsyncState is the state object provided by the runtime..
        /// </summary>
        internal static string BeginExecuteMustUseProvidedStateAsAsyncResultState {
            get {
                return ResourceManager.GetString("BeginExecuteMustUseProvidedStateAsAsyncResultState", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0} must be set before {1} activity &apos;{2}&apos; can be used..
        /// </summary>
        internal static string BinaryExpressionActivityRequiresArgument {
            get {
                return ResourceManager.GetString("BinaryExpressionActivityRequiresArgument", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The persistence provider implementation of InstanceStore in use is invalid. It called BindAcquiredLock, BindReclaimedLock, BeginBindReclaimedLock, or CreateBindReclaimedLockException at an invalid time. These methods may only be called while processing a command which may acquire a lock on an instance. Either switch to a valid persistence provider, or override the InstancePersistenceCommand implementation to return true from AutomaticallyAcquiringLock..
        /// </summary>
        internal static string BindLockRequiresCommandFlag {
            get {
                return ResourceManager.GetString("BindLockRequiresCommandFlag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This exception does not represent an error and should not be caught.  It can be thrown from a persistence provider implementation of InstanceStore.TryCommand, BeginTryCommand, or EndTryCommand to indicate that an attempt should be made to reclaim the lock at the version specified in the call to InstancePersistenceContext.CreateBindReclaimedLockException..
        /// </summary>
        internal static string BindReclaimedLockException {
            get {
                return ResourceManager.GetString("BindReclaimedLockException", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The persistence provider implementation of InstanceStore successfully canceled the command. An orphaned lock was reclaimed and the command canceled via InstancePersistenceContext.CreateBindReclaimedLockException..
        /// </summary>
        internal static string BindReclaimSucceeded {
            get {
                return ResourceManager.GetString("BindReclaimSucceeded", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The update author disallowed update inside this running activity..
        /// </summary>
        internal static string BlockedUpdateInsideActivityUpdateByUserError {
            get {
                return ResourceManager.GetString("BlockedUpdateInsideActivityUpdateByUserError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Dynamic update is blocked for this activity..
        /// </summary>
        internal static string BlockedUpdateInsideActivityUpdateError {
            get {
                return ResourceManager.GetString("BlockedUpdateInsideActivityUpdateError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Body of the message description cannot be null, please set the OperationDescription.MessageDescription.Body to correct value..
        /// </summary>
        internal static string BodyCannotBeNull {
            get {
                return ResourceManager.GetString("BodyCannotBeNull", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A bookmark with the name &apos;{0}&apos; already exists..
        /// </summary>
        internal static string BookmarkAlreadyExists {
            get {
                return ResourceManager.GetString("BookmarkAlreadyExists", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The requested bookmark cannot be found..
        /// </summary>
        internal static string BookmarkNotFoundGeneric {
            get {
                return ResourceManager.GetString("BookmarkNotFoundGeneric", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The {0} bookmark is not currently registered in Compensation Extension..
        /// </summary>
        internal static string BookmarkNotRegistered {
            get {
                return ResourceManager.GetString("BookmarkNotRegistered", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The  bookmark scope cannot be initialized because it is already initialized..
        /// </summary>
        internal static string BookmarkScopeAlreadyInitialized {
            get {
                return ResourceManager.GetString("BookmarkScopeAlreadyInitialized", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified  bookmark scope cannot be unregistered because it has outstanding bookmarks..
        /// </summary>
        internal static string BookmarkScopeHasBookmarks {
            get {
                return ResourceManager.GetString("BookmarkScopeHasBookmarks", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The BookmarkScope that had TemporaryId: &apos;{0}&apos; has been initialized with Id: &apos;{1}&apos;..
        /// </summary>
        internal static string BookmarkScopeInitialized {
            get {
                return ResourceManager.GetString("BookmarkScopeInitialized", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The bookmark scope with id &apos;{0}&apos; could not be found..
        /// </summary>
        internal static string BookmarkScopeNotFound {
            get {
                return ResourceManager.GetString("BookmarkScopeNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified  bookmark scope cannot be initialized because it is not currently registered..
        /// </summary>
        internal static string BookmarkScopeNotRegisteredForInitialize {
            get {
                return ResourceManager.GetString("BookmarkScopeNotRegisteredForInitialize", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified  bookmark scope cannot be unregistered because it is not currently registered.  .
        /// </summary>
        internal static string BookmarkScopeNotRegisteredForUnregister {
            get {
                return ResourceManager.GetString("BookmarkScopeNotRegisteredForUnregister", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Bookmark scopes require a host that supports key management.  The host you are using does not support key management.  If you are using WorkflowApplication or WorkflowInvoker consider using WorkflowServiceHost instead..
        /// </summary>
        internal static string BookmarkScopesRequireKeys {
            get {
                return ResourceManager.GetString("BookmarkScopesRequireKeys", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified bookmark scope cannot be initialized with the identifier &apos;{0}&apos; because a  bookmark scope already exists with that identifier..
        /// </summary>
        internal static string BookmarkScopeWithIdAlreadyExists {
            get {
                return ResourceManager.GetString("BookmarkScopeWithIdAlreadyExists", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TryScheduleBookmarkResumption can only be called while the runtime is idle..
        /// </summary>
        internal static string BookmarksOnlyResumableWhileIdle {
            get {
                return ResourceManager.GetString("BookmarksOnlyResumableWhileIdle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Failed to allocate a managed memory buffer of {0} bytes. The amount of available memory may be low..
        /// </summary>
        internal static string BufferAllocationFailed {
            get {
                return ResourceManager.GetString("BufferAllocationFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The size quota for this stream ({0}) has been exceeded..
        /// </summary>
        internal static string BufferedOutputStreamQuotaExceeded {
            get {
                return ResourceManager.GetString("BufferedOutputStreamQuotaExceeded", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The BufferedReceiveServiceBehavior instance could not be added to the WorkflowServiceHost because it has already been added to another WorkflowServiceHost instance. Create a new BufferedReceiveServiceBehavior instance for each additional WorkflowServiceHost..
        /// </summary>
        internal static string BufferedReceiveBehaviorMultipleUse {
            get {
                return ResourceManager.GetString("BufferedReceiveBehaviorMultipleUse", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The BufferedReceiveServiceBehavior must be used with a workflow definition that supports BufferedReceive processing. Use WorkflowService.AllowBufferedReceive to enable BufferedReceive processing..
        /// </summary>
        internal static string BufferedReceiveBehaviorUsedWithoutProperty {
            get {
                return ResourceManager.GetString("BufferedReceiveBehaviorUsedWithoutProperty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The operation with name &apos;{0}&apos; must be enabled to use the ReceiveContext ManualAcknowledgement mode when the BufferedReceiveServiceBehavior is used..
        /// </summary>
        internal static string BufferedReceiveRequiresReceiveContext {
            get {
                return ResourceManager.GetString("BufferedReceiveRequiresReceiveContext", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This buffer cannot be returned to the buffer manager because it is the wrong size..
        /// </summary>
        internal static string BufferIsNotRightSizeForBufferManager {
            get {
                return ResourceManager.GetString("BufferIsNotRightSizeForBufferManager", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Operation &apos;{1}&apos; on service instance &apos;{0}&apos; cannot be performed at this time. Another attempt will be made when the service instance is ready to process this particular operation..
        /// </summary>
        internal static string BufferOutOfOrderMessageNoBookmark {
            get {
                return ResourceManager.GetString("BufferOutOfOrderMessageNoBookmark", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Operation &apos;{0}&apos; cannot be performed at this time. Another attempt will be made when the service instance is ready to process this particular operation..
        /// </summary>
        internal static string BufferOutOfOrderMessageNoInstance {
            get {
                return ResourceManager.GetString("BufferOutOfOrderMessageNoInstance", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Pool allocating {0} Bytes..
        /// </summary>
        internal static string BufferPoolAllocation {
            get {
                return ResourceManager.GetString("BufferPoolAllocation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to BufferPool of size {0}, changing quota by {1}..
        /// </summary>
        internal static string BufferPoolChangeQuota {
            get {
                return ResourceManager.GetString("BufferPoolChangeQuota", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Workflow Instance Id {0}.
        /// </summary>
        internal static string BusyCountTraceFormatString {
            get {
                return ResourceManager.GetString("BusyCountTraceFormatString", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to CacheRootMetadata started on activity &apos;{0}&apos;.
        /// </summary>
        internal static string CacheRootMetadataStart {
            get {
                return ResourceManager.GetString("CacheRootMetadataStart", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to CacheRootMetadata stopped on activity {0}..
        /// </summary>
        internal static string CacheRootMetadataStop {
            get {
                return ResourceManager.GetString("CacheRootMetadataStop", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cache Settings are immutable since the extension is already added to the workflow instance or the host extensions collection..
        /// </summary>
        internal static string CacheSettingsLocked {
            get {
                return ResourceManager.GetString("CacheSettingsLocked", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The call to OnRequestAbort on the WorkflowInstance &apos;{0}&apos; threw an exception. This is considered fatal. See inner exception for details..
        /// </summary>
        internal static string CallbackExceptionFromHostAbort {
            get {
                return ResourceManager.GetString("CallbackExceptionFromHostAbort", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The call to OnGetExtension on the WorkflowInstance &apos;{0}&apos; threw an exception. This is considered fatal. See inner exception for details..
        /// </summary>
        internal static string CallbackExceptionFromHostGetExtension {
            get {
                return ResourceManager.GetString("CallbackExceptionFromHostGetExtension", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An unhandled exception has been thrown from &apos;{0}&apos;&apos;s Cancellation Handler. Cancellation may be in an inconsistent state and the workflow has been aborted..
        /// </summary>
        internal static string CancellationHandlerFatalException {
            get {
                return ResourceManager.GetString("CancellationHandlerFatalException", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Argument &apos;{0}&apos; of activity &apos;{1}&apos; is bound to an expression that contains activity &apos;{2}&apos;. &apos;{2}&apos; can cause the expression to idle during evaluation. If the argument expressions of activity &apos;{1}&apos; modify shared state then going idle during expression evaluation can produce unexpected values for the arguments..
        /// </summary>
        internal static string CanInduceIdleActivityInArgumentExpression {
            get {
                return ResourceManager.GetString("CanInduceIdleActivityInArgumentExpression", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Activity &apos;{0}&apos; is invalid. NativeActivity derived activities that do asynchronous operations by calling one of the CreateBookmark overloads defined on System.Activities.NativeActivityContext must override the CanInduceIdle property and return true..
        /// </summary>
        internal static string CanInduceIdleNotSpecified {
            get {
                return ResourceManager.GetString("CanInduceIdleNotSpecified", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The execution of an InstancePersistenceCommand was interrupted because the instance is locked by a different instance owner. This error usually occurs because a different host has the instance loaded..
        /// </summary>
        internal static string CannotAcquireLockDefault {
            get {
                return ResourceManager.GetString("CannotAcquireLockDefault", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The execution of an InstancePersistenceCommand was interrupted because the instance &apos;{0}&apos; is locked by a different instance owner. This error usually occurs because a different host has the instance loaded..
        /// </summary>
        internal static string CannotAcquireLockSpecific {
            get {
                return ResourceManager.GetString("CannotAcquireLockSpecific", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The execution of an InstancePersistenceCommand was interrupted because the instance &apos;{0}&apos; is locked by a different instance owner. This error usually occurs because a different host has the instance loaded. The instance owner ID of the owner or host with a lock on the instance is &apos;{1}&apos;..
        /// </summary>
        internal static string CannotAcquireLockSpecificWithOwner {
            get {
                return ResourceManager.GetString("CannotAcquireLockSpecificWithOwner", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The activity has added a new variable of a type that derives from Handle..
        /// </summary>
        internal static string CannotAddHandlesUpdateError {
            get {
                return ResourceManager.GetString("CannotAddHandlesUpdateError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An activity cannot add or remove workflow execution properties while it has executing children..
        /// </summary>
        internal static string CannotAddOrRemoveWithChildren {
            get {
                return ResourceManager.GetString("CannotAddOrRemoveWithChildren", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to AbortInstance cannot be called from the workflow thread because it could result in inconsistent state..
        /// </summary>
        internal static string CannotCallAbortInstanceFromWorkflowThread {
            get {
                return ResourceManager.GetString("CannotCallAbortInstanceFromWorkflowThread", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The value of the AbortInstanceOnTransactionFailure flag cannot be modified after the corresponding RuntimeTransactionHandle&apos;s IPropertyRegistrationCallback.Register has executed..
        /// </summary>
        internal static string CannotChangeAbortInstanceFlagAfterPropertyRegistration {
            get {
                return ResourceManager.GetString("CannotChangeAbortInstanceFlagAfterPropertyRegistration", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to New matches cannot be added inside the private implementation of the workflow for which the update map is being built..
        /// </summary>
        internal static string CannotChangeMatchesInImplementation {
            get {
                return ResourceManager.GetString("CannotChangeMatchesInImplementation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The current transaction was configured by the runtime and can only be completed by the runtime.  A runtime configured transaction is usually the result of calling an invoke API on WorkflowInvoker while an ambient transaction exists..
        /// </summary>
        internal static string CannotCompleteRuntimeOwnedTransaction {
            get {
                return ResourceManager.GetString("CannotCompleteRuntimeOwnedTransaction", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The persistence provider implementation of InstanceStore in use is invalid. It reported completing an instance with active keys associated to it. All keys associated to an instance must be completed before the instance can be completed..
        /// </summary>
        internal static string CannotCompleteWithKeys {
            get {
                return ResourceManager.GetString("CannotCompleteWithKeys", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot convert object &apos;{0}&apos; to type &apos;{1}&apos;..
        /// </summary>
        internal static string CannotConvertObject {
            get {
                return ResourceManager.GetString("CannotConvertObject", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The instanceId argument to InstanceStore.CreateInstanceHandle cannot specify an all-zero ID, such as Guid.Empty..
        /// </summary>
        internal static string CannotCreateContextWithNullId {
            get {
                return ResourceManager.GetString("CannotCreateContextWithNullId", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot create MessageFault..
        /// </summary>
        internal static string CannotCreateMessageFault {
            get {
                return ResourceManager.GetString("CannotCreateMessageFault", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot create a default instance owner without WorkflowIdentity. To create an owner, either specify a definition identity, or select WorkflowIdentityFilter.Any..
        /// </summary>
        internal static string CannotCreateOwnerWithoutIdentity {
            get {
                return ResourceManager.GetString("CannotCreateOwnerWithoutIdentity", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The {0} promotion collection for promotion name {1} contains a null value..
        /// </summary>
        internal static string CanNotDefineNullForAPromotion {
            get {
                return ResourceManager.GetString("CanNotDefineNullForAPromotion", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot create an L-value from the given expression with property &apos;{0}&apos; because the target object is null..
        /// </summary>
        internal static string CannotDereferenceNull {
            get {
                return ResourceManager.GetString("CannotDereferenceNull", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There is already a transaction enlisted in the workflow. Only one transaction can be enlisted at a time..
        /// </summary>
        internal static string CannotEnlistMultipleTransactions {
            get {
                return ResourceManager.GetString("CannotEnlistMultipleTransactions", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Symbol resolver cannot be found in a workflow instance extensions collection..
        /// </summary>
        internal static string CanNotFindSymbolResolverInWorkflowInstanceExtensions {
            get {
                return ResourceManager.GetString("CanNotFindSymbolResolverInWorkflowInstanceExtensions", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; is internal runtime data and does not support generating a schema..
        /// </summary>
        internal static string CannotGenerateSchemaForXmlSerializable {
            get {
                return ResourceManager.GetString("CannotGenerateSchemaForXmlSerializable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You cannot get the value of an out-only argument..
        /// </summary>
        internal static string CannotGetValueOfOutArgument {
            get {
                return ResourceManager.GetString("CannotGetValueOfOutArgument", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The persistence provider implementation of InstanceStore in use is invalid. It attempted to execute a potentially lock-acquiring command while processing a non-lock-acquiring command. This exception can occur when InstancePersistenceContext.Execute or InstancePersistenceContext.BeginExecute is called with a command that returns true from InstancePersistenceCommand.AutomaticallyAcquiringLock while processing a command which returns false. Either use a persistence provider which does not do so, or override Au [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string CannotInvokeBindingFromNonBinding {
            get {
                return ResourceManager.GetString("CannotInvokeBindingFromNonBinding", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This activity cannot be invoked because it was not opened by an overload of Invoke which takes an IDictionary of string and object..
        /// </summary>
        internal static string CannotInvokeOpenedActivity {
            get {
                return ResourceManager.GetString("CannotInvokeOpenedActivity", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The persistence provider implementation of InstanceStore in use is invalid. It attempted to execute transactional command while processing a non-transactional command. This exception can occur when InstancePersistenceContext.Execute or InstancePersistenceContext.BeginExecute is called with a command that returns false from InstancePersistenceCommand.IsTransactionEnlistmentOptional while processing a command which returns true. Either use a persistence provider which does not do so, or override IsTransaction [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string CannotInvokeTransactionalFromNonTransactional {
            get {
                return ResourceManager.GetString("CannotInvokeTransactionalFromNonTransactional", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This Catch has already been opened and cannot be modified. Catches can only be modified at design time..
        /// </summary>
        internal static string CannotModifyCatchAfterOpen {
            get {
                return ResourceManager.GetString("CannotModifyCatchAfterOpen", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Flowchart does not support Dynamic Update when a child activity is moved from one FlowNode type to a different FlowNode type..
        /// </summary>
        internal static string CannotMoveChildAcrossDifferentFlowNodeTypes {
            get {
                return ResourceManager.GetString("CannotMoveChildAcrossDifferentFlowNodeTypes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The runtime transaction is currently suppressed. Executing the TransactedReceiveScope activity &apos;{0}&apos; when the runtime transaction is suppressed is not supported..
        /// </summary>
        internal static string CannotNestTransactedReceiveScopeWhenAmbientHandleIsSuppressed {
            get {
                return ResourceManager.GetString("CannotNestTransactedReceiveScopeWhenAmbientHandleIsSuppressed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The runtime transaction is currently suppressed. Executing the TransactedScope activity &apos;{0}&apos; while the runtime transaction is suppressed is not supported..
        /// </summary>
        internal static string CannotNestTransactionScopeWhenAmbientHandleIsSuppressed {
            get {
                return ResourceManager.GetString("CannotNestTransactionScopeWhenAmbientHandleIsSuppressed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to WorkflowApplication operations cannot be performed from within event handlers..
        /// </summary>
        internal static string CannotPerformOperationFromHandlerThread {
            get {
                return ResourceManager.GetString("CannotPerformOperationFromHandlerThread", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The operation cannot be performed on variables of Handle subtypes..
        /// </summary>
        internal static string CannotPerformOperationOnHandle {
            get {
                return ResourceManager.GetString("CannotPerformOperationOnHandle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Persist activities cannot be contained within isolation blocks..
        /// </summary>
        internal static string CannotPersistInsideIsolation {
            get {
                return ResourceManager.GetString("CannotPersistInsideIsolation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Persist activities cannot be contained within no persistence blocks..
        /// </summary>
        internal static string CannotPersistInsideNoPersist {
            get {
                return ResourceManager.GetString("CannotPersistInsideNoPersist", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The instance cannot be persisted because it does not own the lock.  A previous call to Persist with an unlock value of true was responsible for releasing the lock..
        /// </summary>
        internal static string CannotPersistWhileDetached {
            get {
                return ResourceManager.GetString("CannotPersistWhileDetached", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The data type &apos;{0}&apos; for the promoted property &apos;{1}&apos; is not supported by SQL. Either change the data type to a supported one or promote the property as a binary value..
        /// </summary>
        internal static string CannotPromoteAsSqlVariant {
            get {
                return ResourceManager.GetString("CannotPromoteAsSqlVariant", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The XName &apos;{0}&apos; is promoted multiple times in the promotion &apos;{1}.&apos; Duplicate XNames are not allowed within the same promotion..
        /// </summary>
        internal static string CannotPromoteXNameTwiceInPromotion {
            get {
                return ResourceManager.GetString("CannotPromoteXNameTwiceInPromotion", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The activity &apos;{0}&apos; with ID {1} threw or propagated an exception while being canceled..
        /// </summary>
        internal static string CannotPropagateExceptionWhileCanceling {
            get {
                return ResourceManager.GetString("CannotPropagateExceptionWhileCanceling", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot remove activity &apos;{0}: {1}&apos; because it is currently executing..
        /// </summary>
        internal static string CannotRemoveExecutingActivityUpdateError {
            get {
                return ResourceManager.GetString("CannotRemoveExecutingActivityUpdateError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The ambient transaction (System.Transactions.Transaction.Current) doesn&apos;t match the transaction in use for this execution episode.  Only one transaction may be used throughout an entire execution episode..
        /// </summary>
        internal static string CannotReplaceTransaction {
            get {
                return ResourceManager.GetString("CannotReplaceTransaction", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Property in WorkflowDataContext cannot be reset..
        /// </summary>
        internal static string CannotResetPropertyInDataContext {
            get {
                return ResourceManager.GetString("CannotResetPropertyInDataContext", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An activity can only save original values for its public or imported children or delegate handlers..
        /// </summary>
        internal static string CannotSaveOriginalValueForActivity {
            get {
                return ResourceManager.GetString("CannotSaveOriginalValueForActivity", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot save an original value for activity &apos;{0}&apos; because it did not exist in the original workflow definition..
        /// </summary>
        internal static string CannotSaveOriginalValueForNewActivity {
            get {
                return ResourceManager.GetString("CannotSaveOriginalValueForNewActivity", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This activity does not correctly handle updates when it&apos;s inside an activity implementation. It attempted to save original values for references to imported children..
        /// </summary>
        internal static string CannotSaveOriginalValuesForReferencedChildren {
            get {
                return ResourceManager.GetString("CannotSaveOriginalValuesForReferencedChildren", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Child activities cannot be scheduled while setting up an isolation block. Wait for the OnEntered BookmarkCallback to be called before scheduling children..
        /// </summary>
        internal static string CannotScheduleChildrenWhileEnteringIsolation {
            get {
                return ResourceManager.GetString("CannotScheduleChildrenWhileEnteringIsolation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot serialize expression of type &quot;{0}&quot;..
        /// </summary>
        internal static string CannotSerializeExpression {
            get {
                return ResourceManager.GetString("CannotSerializeExpression", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Could not serialize expression because variable access sub-expressions were malformed or unrecognized..
        /// </summary>
        internal static string CannotSerializeVariableExpression {
            get {
                return ResourceManager.GetString("CannotSerializeVariableExpression", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The runtime cannot be configured with a transaction by an activity which is contained within a no persistence scope.  An ancestor activity has disallowed persistence..
        /// </summary>
        internal static string CannotSetRuntimeTransactionInNoPersist {
            get {
                return ResourceManager.GetString("CannotSetRuntimeTransactionInNoPersist", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The isolation block cannot be set up because it would be contained within another isolation block.  Isolation blocks cannot be nested..
        /// </summary>
        internal static string CannotSetupIsolationInsideIsolation {
            get {
                return ResourceManager.GetString("CannotSetupIsolationInsideIsolation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The isolation block cannot be set up because it would be contained within a no persistence block..
        /// </summary>
        internal static string CannotSetupIsolationInsideNoPersist {
            get {
                return ResourceManager.GetString("CannotSetupIsolationInsideNoPersist", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An isolation block cannot be set up when there are executing children..
        /// </summary>
        internal static string CannotSetupIsolationWithChildren {
            get {
                return ResourceManager.GetString("CannotSetupIsolationWithChildren", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot assign values to In Arguments..
        /// </summary>
        internal static string CannotSetValueOfInArgument {
            get {
                return ResourceManager.GetString("CannotSetValueOfInArgument", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A value of type &apos;{0}&apos; cannot be set to the location with name &apos;{1}&apos; because it is a location of type &apos;{2}&apos;..
        /// </summary>
        internal static string CannotSetValueToLocation {
            get {
                return ResourceManager.GetString("CannotSetValueToLocation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot specify both connectionString and connectionStringName properties..
        /// </summary>
        internal static string CannotSpecifyBothConnectionStringAndName {
            get {
                return ResourceManager.GetString("CannotSpecifyBothConnectionStringAndName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot change the value of the SuppressTransaction property on an already registered RuntimeTransactionHandle..
        /// </summary>
        internal static string CannotSuppressAlreadyRegisteredHandle {
            get {
                return ResourceManager.GetString("CannotSuppressAlreadyRegisteredHandle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The bookmark scope cannot be deleted because it is the instance&apos;s default bookmark scope..
        /// </summary>
        internal static string CannotUnregisterDefaultBookmarkScope {
            get {
                return ResourceManager.GetString("CannotUnregisterDefaultBookmarkScope", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A null bookmark scope cannot be unregistered..
        /// </summary>
        internal static string CannotUnregisterNullBookmarkScope {
            get {
                return ResourceManager.GetString("CannotUnregisterNullBookmarkScope", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Arguments or variables cannot be added, removed or rearranged when the instance is in the middle of resolving arguments..
        /// </summary>
        internal static string CannotUpdateEnvironmentInTheMiddleOfResolvingArguments {
            get {
                return ResourceManager.GetString("CannotUpdateEnvironmentInTheMiddleOfResolvingArguments", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Arguments or variables cannot be added, removed or rearranged when the instance is in the middle of resolving variables..
        /// </summary>
        internal static string CannotUpdateEnvironmentInTheMiddleOfResolvingVariables {
            get {
                return ResourceManager.GetString("CannotUpdateEnvironmentInTheMiddleOfResolvingVariables", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to WorkflowInstance &apos;{0}&apos; could not be updated because it is already loaded. Consider suspending the instance before updating it..
        /// </summary>
        internal static string CannotUpdateLoadedInstance {
            get {
                return ResourceManager.GetString("CannotUpdateLoadedInstance", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to WorkflowServiceHost does not support adding application endpoints using AddServiceEndpoint(ServiceEndpoint endpoint) overload.  Please use one of the &apos;XName serviceContractName&apos; or &apos;string implementedContract&apos; overloads to add application endpoints to WorkflowServiceHost..
        /// </summary>
        internal static string CannotUseAddServiceEndpointOverloadForWorkflowServices {
            get {
                return ResourceManager.GetString("CannotUseAddServiceEndpointOverloadForWorkflowServices", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Workflow inputs cannot be used with Load or LoadRunnableInstance, since they are only provided to new instances..
        /// </summary>
        internal static string CannotUseInputsWithLoad {
            get {
                return ResourceManager.GetString("CannotUseInputsWithLoad", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The ToValidate argument of the {0} named &apos;{1}&apos; resolved to null.  A non-null object to validate must be provided..
        /// </summary>
        internal static string CannotValidateNullObject {
            get {
                return ResourceManager.GetString("CannotValidateNullObject", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The operation has failed because it was called from a handler while the workflow was not idle.  The operation requires that the workflow is idle to complete and the workflow cannot execute while in an event handler..
        /// </summary>
        internal static string CannotWaitForIdleSynchronously {
            get {
                return ResourceManager.GetString("CannotWaitForIdleSynchronously", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An Activity can only abort its direct children..
        /// </summary>
        internal static string CanOnlyAbortDirectChildren {
            get {
                return ResourceManager.GetString("CanOnlyAbortDirectChildren", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An Activity can only cancel its direct children..
        /// </summary>
        internal static string CanOnlyCancelDirectChildren {
            get {
                return ResourceManager.GetString("CanOnlyCancelDirectChildren", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An Activity can only get the location of arguments which it owns.  Activity &apos;{0}&apos; is trying to get the location of argument &apos;{1}&apos; which is owned by activity &apos;{2}&apos;..
        /// </summary>
        internal static string CanOnlyGetOwnedArguments {
            get {
                return ResourceManager.GetString("CanOnlyGetOwnedArguments", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An Activity can only schedule its direct children. Activity &apos;{0}&apos; is attempting to schedule &apos;{1}&apos; which is a child of activity &apos;{2}&apos;..
        /// </summary>
        internal static string CanOnlyScheduleDirectChildren {
            get {
                return ResourceManager.GetString("CanOnlyScheduleDirectChildren", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A TimerExtension must be added to the extensions collection..
        /// </summary>
        internal static string CantFindTimerExtension {
            get {
                return ResourceManager.GetString("CantFindTimerExtension", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Catch or Finally expected for TryCatch activity &apos;{0}&apos;..
        /// </summary>
        internal static string CatchOrFinallyExpected {
            get {
                return ResourceManager.GetString("CatchOrFinallyExpected", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to StateMachine does not support Dynamic Update if a conditional transition becomes unconditional after update..
        /// </summary>
        internal static string ChangeConditionalTransitionToUnconditionalBlockDU {
            get {
                return ResourceManager.GetString("ChangeConditionalTransitionToUnconditionalBlockDU", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to StateMachine does not support Dynamic Update if the state is transitioning, and the current transition becomes conditional..
        /// </summary>
        internal static string ChangeTransitionTypeDuringTransitioningBlockDU {
            get {
                return ResourceManager.GetString("ChangeTransitionTypeDuringTransitioningBlockDU", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to StateMachine does not support Dynamic Update, if the Trigger of an existing Transition is modified, or the Condition or Action activity is reassigned to a new Transition..
        /// </summary>
        internal static string ChangingTriggerOrUseOriginalConditionActionBlockDU {
            get {
                return ResourceManager.GetString("ChangingTriggerOrUseOriginalConditionActionBlockDU", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SqlWorkflowInstanceStore cannot process the command because store cleanup is currently in progress. Please wait for the cleanup to finish and then try again..
        /// </summary>
        internal static string CleanupInProgress {
            get {
                return ResourceManager.GetString("CleanupInProgress", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The property &apos;Collection&apos; of &apos;{0}&apos; is not initialized..
        /// </summary>
        internal static string CollectionActivityRequiresCollection {
            get {
                return ResourceManager.GetString("CollectionActivityRequiresCollection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified column number for activity {0} is too large to be supported in Partial Trust.
        /// </summary>
        internal static string ColumnNumberTooLarge {
            get {
                return ResourceManager.GetString("ColumnNumberTooLarge", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only one command at a time can be executed for a single InstanceHandle. Do not call the method Execute or BeginExecute on InstanceStore until the previous command executing for this InstanceHandle has completed..
        /// </summary>
        internal static string CommandExecutionCannotOverlap {
            get {
                return ResourceManager.GetString("CommandExecutionCannotOverlap", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The CompensableActivity specified by the &apos;Target&apos; CompensationToken has already been confirmed or compensated..
        /// </summary>
        internal static string CompensableActivityAlreadyConfirmedOrCompensated {
            get {
                return ResourceManager.GetString("CompensableActivityAlreadyConfirmedOrCompensated", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A CompensableActivity cannot be nested inside a TransactedReceiveScope..
        /// </summary>
        internal static string CompensableActivityInsideTransactedReceiveScope {
            get {
                return ResourceManager.GetString("CompensableActivityInsideTransactedReceiveScope", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A CompensableActivity cannot be nested inside a TransactionScope activity..
        /// </summary>
        internal static string CompensableActivityInsideTransactionScopeActivity {
            get {
                return ResourceManager.GetString("CompensableActivityInsideTransactionScopeActivity", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Using Compensate with no specified Target is valid only when used within the Compensation, Confirmation or Cancellation handlers..
        /// </summary>
        internal static string CompensateWithNoTargetConstraint {
            get {
                return ResourceManager.GetString("CompensateWithNoTargetConstraint", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Compensate activity &apos;{0}&apos; can be used only if a CompensableActivity within the workflow has already executed..
        /// </summary>
        internal static string CompensateWithoutCompensableActivity {
            get {
                return ResourceManager.GetString("CompensateWithoutCompensableActivity", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An unhandled exception has been thrown from &apos;{0}&apos;&apos;s Compensation Handler. Compensation may be in an inconsistent state and the workflow has been aborted..
        /// </summary>
        internal static string CompensationHandlerFatalException {
            get {
                return ResourceManager.GetString("CompensationHandlerFatalException", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to CompensableActivity &apos;{0}&apos; is in the &apos;{1}&apos; state..
        /// </summary>
        internal static string CompensationState {
            get {
                return ResourceManager.GetString("CompensationState", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to locate the expression id for &apos;{0}&apos;.  Make sure that the current definition has been compiled..
        /// </summary>
        internal static string CompiledExpressionIdNotFound {
            get {
                return ResourceManager.GetString("CompiledExpressionIdNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TextExpressionCompiler:  Exception of type &apos;{0}&apos; encountered while processing activity &apos;{1}&apos;: &apos;{2}&apos;..
        /// </summary>
        internal static string CompiledExpressionsActivityException {
            get {
                return ResourceManager.GetString("CompiledExpressionsActivityException", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to CacheMetadata for activity &apos;{0}&apos; threw &apos;{1}&apos;..
        /// </summary>
        internal static string CompiledExpressionsCacheMetadataException {
            get {
                return ResourceManager.GetString("CompiledExpressionsCacheMetadataException", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; is an ambiguous variable reference.  Please rename the identifier..
        /// </summary>
        internal static string CompiledExpressionsDuplicateName {
            get {
                return ResourceManager.GetString("CompiledExpressionsDuplicateName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TextExpressionCompiler: Ignoring variable &apos;{0}&apos;.  Identifier is not valid for the current language..
        /// </summary>
        internal static string CompiledExpressionsIgnoringInvalidIdentifierVariable {
            get {
                return ResourceManager.GetString("CompiledExpressionsIgnoringInvalidIdentifierVariable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TextExpressionCompiler: Ignoring unnamed variable..
        /// </summary>
        internal static string CompiledExpressionsIgnoringUnnamedVariable {
            get {
                return ResourceManager.GetString("CompiledExpressionsIgnoringUnnamedVariable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to locate the activity instance corresponding to activity &apos;{0}&apos;.  Please recompile the workflow..
        /// </summary>
        internal static string CompiledExpressionsNoCompiledRoot {
            get {
                return ResourceManager.GetString("CompiledExpressionsNoCompiledRoot", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Compiled expressions require a default constructor on their local root.  Please add a default constructor to type &apos;{0}&apos;..
        /// </summary>
        internal static string CompiledLocationNoDefaultConstructor {
            get {
                return ResourceManager.GetString("CompiledLocationNoDefaultConstructor", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to CompiledLocationReference should never be used to access a Location..
        /// </summary>
        internal static string CompiledLocationReferenceGetLocation {
            get {
                return ResourceManager.GetString("CompiledLocationReferenceGetLocation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Compiler error(s) encountered..
        /// </summary>
        internal static string CompilerError {
            get {
                return ResourceManager.GetString("CompilerError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Compiler error(s) encountered processing expression &quot;{0}&quot;.{1}.
        /// </summary>
        internal static string CompilerErrorSpecificExpression {
            get {
                return ResourceManager.GetString("CompilerErrorSpecificExpression", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Compiling VB expression &apos;{0}&apos;.
        /// </summary>
        internal static string CompileVbExpressionStart {
            get {
                return ResourceManager.GetString("CompileVbExpressionStart", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Finished compiling VB expression..
        /// </summary>
        internal static string CompileVbExpressionStop {
            get {
                return ResourceManager.GetString("CompileVbExpressionStop", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A BookmarkWorkItem has completed for Activity &apos;{0}&apos;, DisplayName: &apos;{1}&apos;, InstanceId: &apos;{2}&apos;. BookmarkName: {3}, BookmarkScope: {4}..
        /// </summary>
        internal static string CompleteBookmarkWorkItem {
            get {
                return ResourceManager.GetString("CompleteBookmarkWorkItem", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A CancelActivityWorkItem has completed for Activity &apos;{0}&apos;, DisplayName: &apos;{1}&apos;, InstanceId: &apos;{2}&apos;..
        /// </summary>
        internal static string CompleteCancelActivityWorkItem {
            get {
                return ResourceManager.GetString("CompleteCancelActivityWorkItem", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A CompletionWorkItem has completed for parent Activity &apos;{0}&apos;, DisplayName: &apos;{1}&apos;, InstanceId: &apos;{2}&apos;. Completed Activity &apos;{3}&apos;, DisplayName: &apos;{4}&apos;, InstanceId: &apos;{5}&apos;..
        /// </summary>
        internal static string CompleteCompletionWorkItem {
            get {
                return ResourceManager.GetString("CompleteCompletionWorkItem", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The persistence provider implementation of InstanceStore in use is invalid. It reported loading an instance with InstanceState.Completed that has associated keys which are not completed..
        /// </summary>
        internal static string CompletedMustNotHaveAssociatedKeys {
            get {
                return ResourceManager.GetString("CompletedMustNotHaveAssociatedKeys", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An ExecuteActivityWorkItem has completed for Activity &apos;{0}&apos;, DisplayName: &apos;{1}&apos;, InstanceId: &apos;{2}&apos;..
        /// </summary>
        internal static string CompleteExecuteActivityWorkItem {
            get {
                return ResourceManager.GetString("CompleteExecuteActivityWorkItem", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A FaultWorkItem has completed for Activity &apos;{0}&apos;, DisplayName: &apos;{1}&apos;, InstanceId: &apos;{2}&apos;. The exception was propagated from Activity &apos;{3}&apos;, DisplayName: &apos;{4}&apos;, InstanceId: &apos;{5}&apos;..
        /// </summary>
        internal static string CompleteFaultWorkItem {
            get {
                return ResourceManager.GetString("CompleteFaultWorkItem", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A runtime work item has completed for Activity &apos;{0}&apos;, DisplayName: &apos;{1}&apos;, InstanceId: &apos;{2}&apos;..
        /// </summary>
        internal static string CompleteRuntimeWorkItem {
            get {
                return ResourceManager.GetString("CompleteRuntimeWorkItem", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A TransactionContextWorkItem has completed for Activity &apos;{0}&apos;, DisplayName: &apos;{1}&apos;, InstanceId: &apos;{2}&apos;..
        /// </summary>
        internal static string CompleteTransactionContextWorkItem {
            get {
                return ResourceManager.GetString("CompleteTransactionContextWorkItem", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to In ParallelForEach, it is invalid to have a CompletionCondition property not equal to null but the Body property equals to null. Please consider setting the Body property of ParallelForEach &apos;{0}&apos; to an empty Sequence activity..
        /// </summary>
        internal static string CompletionConditionSetButNoBody {
            get {
                return ResourceManager.GetString("CompletionConditionSetButNoBody", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An unhandled exception has been thrown from &apos;{0}&apos;&apos;s Confirmation Handler. Confirmation may be in an inconsistent state and the workflow has been aborted..
        /// </summary>
        internal static string ConfirmationHandlerFatalException {
            get {
                return ResourceManager.GetString("ConfirmationHandlerFatalException", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Using Confirm with no specified Target is valid only when used within the Compensation, Confirmation or Cancellation handlers..
        /// </summary>
        internal static string ConfirmWithNoTargetConstraint {
            get {
                return ResourceManager.GetString("ConfirmWithNoTargetConstraint", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Confirm activity &apos;{0}&apos; can be used only if a CompensableActivity within the workflow has already executed..
        /// </summary>
        internal static string ConfirmWithoutCompensableActivity {
            get {
                return ResourceManager.GetString("ConfirmWithoutCompensableActivity", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The property name &apos;{0}&apos; (an XName) for a value provided to DurableInstanceManager.AddInstanceOwnerValues conflicts with the name of a value already added.  Ensure that the names of all values passed to AddInstanceOwnerValues are unique.  This error could be caused by conflicting configured service behaviors..
        /// </summary>
        internal static string ConflictingValueName {
            get {
                return ResourceManager.GetString("ConflictingValueName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot find connection string for connection name &apos;{0}&apos;..
        /// </summary>
        internal static string ConnectionStringNameWrong {
            get {
                return ResourceManager.GetString("ConnectionStringNameWrong", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The corresponding constructor info is not found in type of &apos;{0}&apos;..
        /// </summary>
        internal static string ConstructorInfoNotFound {
            get {
                return ResourceManager.GetString("ConstructorInfoNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This location is marked as const, so its value cannot be modified..
        /// </summary>
        internal static string ConstVariableCannotBeSet {
            get {
                return ResourceManager.GetString("ConstVariableCannotBeSet", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The persistence provider implementation of InstanceStore in use is invalid. It called BindInstance to set the instance ID of an InstanceHandle which is already bound to an instance. An InstanceHandle may only be bound to a single instance over its lifetime..
        /// </summary>
        internal static string ContextAlreadyBoundToInstance {
            get {
                return ResourceManager.GetString("ContextAlreadyBoundToInstance", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The persistence provider implementation of InstanceStore in use is invalid. It called BindAcquiredLock to set the locked instance version of an InstanceHandle which is already bound to a lock. An InstanceHandle may only be bound to a single lock over its lifetime..
        /// </summary>
        internal static string ContextAlreadyBoundToLock {
            get {
                return ResourceManager.GetString("ContextAlreadyBoundToLock", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The persistence provider implementation of InstanceStore in use is invalid. It called BindOwner to set the owner of an InstanceHandle which is already bound to an owner. An InstanceHandle may only be bound to a single owner over its lifetime..
        /// </summary>
        internal static string ContextAlreadyBoundToOwner {
            get {
                return ResourceManager.GetString("ContextAlreadyBoundToOwner", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Both CorrelationCallbackContext and CorrelationContext are set but the context does not match..
        /// </summary>
        internal static string ContextMismatchInContextAndCallBackContext {
            get {
                return ResourceManager.GetString("ContextMismatchInContextAndCallBackContext", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The persistence provider implementation of InstanceStore in use is invalid. It called BindAcquiredLock, BindReclaimedLock, BeginBindReclaimedLock, or CreateBindReclaimedLockException to bind the InstanceHandle to an instance lock version, but the InstanceHandle is not bound to an instance. An InstanceHandle must first be bound to an instance in order to bind it to a lock..
        /// </summary>
        internal static string ContextMustBeBoundToInstance {
            get {
                return ResourceManager.GetString("ContextMustBeBoundToInstance", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The persistence provider implementation of InstanceStore in use is invalid. It called BindAcquiredLock, BindReclaimedLock, BeginBindReclaimedLock, or CreateBindReclaimedLockException to bind the InstanceHandle to an instance lock version, but the InstanceHandle is not bound to an owner. An InstanceHandle must first be bound to an owner in order to bind it to a lock..
        /// </summary>
        internal static string ContextMustBeBoundToOwner {
            get {
                return ResourceManager.GetString("ContextMustBeBoundToOwner", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The handle argument to InstanceStore.Execute or InstanceStore.BeginExecute must have been created by a call to CreateInstanceHandle on the same InstanceStore instance..
        /// </summary>
        internal static string ContextNotFromThisStore {
            get {
                return ResourceManager.GetString("ContextNotFromThisStore", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The TransactionFlow behavior on the operation must be set to Allowed..
        /// </summary>
        internal static string ContractInferenceValidationForTransactionFlowBehavior {
            get {
                return ResourceManager.GetString("ContractInferenceValidationForTransactionFlowBehavior", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot add endpoint because ContractDescription with Name=&apos;{0}&apos; and Namespace=&apos;{1}&apos; cannot be found..
        /// </summary>
        internal static string ContractNotFoundInAddServiceEndpoint {
            get {
                return ResourceManager.GetString("ContractNotFoundInAddServiceEndpoint", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to WorkflowInstance.Controller is only valid after Initialize has been called..
        /// </summary>
        internal static string ControllerInvalidBeforeInitialize {
            get {
                return ResourceManager.GetString("ControllerInvalidBeforeInitialize", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot convert Variable of type &apos;{0}&apos; to Activity of type &apos;{1}&apos;..
        /// </summary>
        internal static string ConvertVariableToValueExpressionFailed {
            get {
                return ResourceManager.GetString("ConvertVariableToValueExpressionFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The array index must be greater than 0..
        /// </summary>
        internal static string CopyToIndexOutOfRange {
            get {
                return ResourceManager.GetString("CopyToIndexOutOfRange", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The provided array does not have the capacity to hold the values..
        /// </summary>
        internal static string CopyToNotEnoughSpaceInArray {
            get {
                return ResourceManager.GetString("CopyToNotEnoughSpaceInArray", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The provided array has multiple dimensions.  The array must have a rank of one to be used with CopyTo..
        /// </summary>
        internal static string CopyToRankMustBeOne {
            get {
                return ResourceManager.GetString("CopyToRankMustBeOne", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A Send activity must either be configured with an Endpoint, or correlated to an earlier established context using CorrelatesWith..
        /// </summary>
        internal static string CorrelatedContextRequiredForAnonymousSend {
            get {
                return ResourceManager.GetString("CorrelatedContextRequiredForAnonymousSend", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The CorrelationHandle is already in use with BookmarkScope &apos;{0}&apos;, so it cannot be used with BookmarkScope &apos;{1}&apos;..
        /// </summary>
        internal static string CorrelationHandleInUse {
            get {
                return ResourceManager.GetString("CorrelationHandleInUse", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to CorrelationResponse context should not be null. This could be because the correlation handle is not setup correctly..
        /// </summary>
        internal static string CorrelationResponseContextShouldNotBeNull {
            get {
                return ResourceManager.GetString("CorrelationResponseContextShouldNotBeNull", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Could not resolve namespace prefix &apos;{0}&apos;..
        /// </summary>
        internal static string CouldNotResolveNamespacePrefix {
            get {
                return ResourceManager.GetString("CouldNotResolveNamespacePrefix", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A Bookmark has been created for Activity &apos;{0}&apos;, DisplayName: &apos;{1}&apos;, InstanceId: &apos;{2}&apos;.  BookmarkName: {3}, BookmarkScope: {4}..
        /// </summary>
        internal static string CreateBookmark {
            get {
                return ResourceManager.GetString("CreateBookmark", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A BookmarkScope has been created: {0}..
        /// </summary>
        internal static string CreateBookmarkScope {
            get {
                return ResourceManager.GetString("CreateBookmarkScope", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This BookmarkScopeHandle is already associated with a BookmarkScope..
        /// </summary>
        internal static string CreateBookmarkScopeFailed {
            get {
                return ResourceManager.GetString("CreateBookmarkScopeFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to CreateWorkflowServiceHost start.
        /// </summary>
        internal static string CreateWorkflowServiceHostStart {
            get {
                return ResourceManager.GetString("CreateWorkflowServiceHostStart", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to CreateWorkflowServiceHost Stop.
        /// </summary>
        internal static string CreateWorkflowServiceHostStop {
            get {
                return ResourceManager.GetString("CreateWorkflowServiceHostStop", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to CSharp expressions must be compiled..
        /// </summary>
        internal static string CSharpExpressionsMustBeCompiled {
            get {
                return ResourceManager.GetString("CSharpExpressionsMustBeCompiled", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There is no context attached to the incoming message for the service and the current operation is not marked with &quot;CanCreateInstance = true&quot;. In order to communicate with this service check whether the incoming binding supports the context protocol and has a valid context initialized..
        /// </summary>
        internal static string CurrentOperationCannotCreateInstance {
            get {
                return ResourceManager.GetString("CurrentOperationCannotCreateInstance", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The workflow is missing a Receive to pair with a SendReply. Please ensure that each SendReply activity is paired with a Receive activity that is present in the workflow..
        /// </summary>
        internal static string DanglingReceive {
            get {
                return ResourceManager.GetString("DanglingReceive", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The SqlWorkflowInstanceStore has a database version of &apos;{0}&apos;. InstancePersistenceCommand &apos;{1}&apos; cannot be run against this database version.  Please upgrade the database to &apos;{2}&apos;..
        /// </summary>
        internal static string DatabaseUpgradeRequiredForCommand {
            get {
                return ResourceManager.GetString("DatabaseUpgradeRequiredForCommand", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot evaluate &apos;{0}&apos; at current context..
        /// </summary>
        internal static string DebugInfoCannotEvaluateExpression {
            get {
                return ResourceManager.GetString("DebugInfoCannotEvaluateExpression", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Exception caught while evaluating {0}: {1}..
        /// </summary>
        internal static string DebugInfoExceptionCaught {
            get {
                return ResourceManager.GetString("DebugInfoExceptionCaught", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to *** value not SkipArgumentResolution ***.
        /// </summary>
        internal static string DebugInfoNotSkipArgumentResolution {
            get {
                return ResourceManager.GetString("DebugInfoNotSkipArgumentResolution", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to *** TryGetValue failed ***.
        /// </summary>
        internal static string DebugInfoTryGetValueFailed {
            get {
                return ResourceManager.GetString("DebugInfoTryGetValueFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Instrumentation for debugger fails.  Reason: {0}..
        /// </summary>
        internal static string DebugInstrumentationFailed {
            get {
                return ResourceManager.GetString("DebugInstrumentationFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The checksum specified for a debug symbol is invalid in Partial Trust.
        /// </summary>
        internal static string DebugSymbolChecksumValueInvalid {
            get {
                return ResourceManager.GetString("DebugSymbolChecksumValueInvalid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The workflow has been aborted..
        /// </summary>
        internal static string DefaultAbortReason {
            get {
                return ResourceManager.GetString("DefaultAbortReason", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Default cancelation logic requires that HasCancelBeenRequested is true.  NativeActivity&apos;s Cancel method should only be invoked by the runtime..
        /// </summary>
        internal static string DefaultCancelationRequiresCancelHasBeenRequested {
            get {
                return ResourceManager.GetString("DefaultCancelationRequiresCancelHasBeenRequested", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The workflow was created with WorkflowCreationContext.CreateOnly set to true..
        /// </summary>
        internal static string DefaultCreateOnlyReason {
            get {
                return ResourceManager.GetString("DefaultCreateOnlyReason", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The workflow definition&apos;s structure is invalid.  Use ActivityValidationServices to see all violations..
        /// </summary>
        internal static string DefaultInvalidWorkflowExceptionMessage {
            get {
                return ResourceManager.GetString("DefaultInvalidWorkflowExceptionMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The workflow was suspended via the control endpoint..
        /// </summary>
        internal static string DefaultSuspendReason {
            get {
                return ResourceManager.GetString("DefaultSuspendReason", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The workflow has been requested to terminate..
        /// </summary>
        internal static string DefaultTerminationReason {
            get {
                return ResourceManager.GetString("DefaultTerminationReason", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The operation could not be performed because it was not allowed by the current state of the WorkflowApplication..
        /// </summary>
        internal static string DefaultWorkflowApplicationExceptionMessage {
            get {
                return ResourceManager.GetString("DefaultWorkflowApplicationExceptionMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to DelegateArgument &apos;{0}&apos; can not be used on Activity &apos;{1}&apos; because it is already in use by Activity &apos;{2}&apos;..
        /// </summary>
        internal static string DelegateArgumentAlreadyInUseOnActivity {
            get {
                return ResourceManager.GetString("DelegateArgumentAlreadyInUseOnActivity", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This activity is the Handler of an ActivityDelegate whose arguments have changed..
        /// </summary>
        internal static string DelegateArgumentChangeBlockDU {
            get {
                return ResourceManager.GetString("DelegateArgumentChangeBlockDU", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to DelegateArgument &apos;{0}&apos; does not exist in this environment..
        /// </summary>
        internal static string DelegateArgumentDoesNotExist {
            get {
                return ResourceManager.GetString("DelegateArgumentDoesNotExist", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to DelegateArgument &apos;{0}&apos; must be included in an activity&apos;s ActivityDelegate before it is used..
        /// </summary>
        internal static string DelegateArgumentMustBeReferenced {
            get {
                return ResourceManager.GetString("DelegateArgumentMustBeReferenced", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to DelegateArgument must be set before CacheMetadata is called..
        /// </summary>
        internal static string DelegateArgumentMustBeSet {
            get {
                return ResourceManager.GetString("DelegateArgumentMustBeSet", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The referenced DelegateArgument object (&apos;{0}&apos;) is not visible at this scope..
        /// </summary>
        internal static string DelegateArgumentNotVisible {
            get {
                return ResourceManager.GetString("DelegateArgumentNotVisible", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to DelegateArgument &apos;{0}&apos; cannot be used in an expression of type &apos;{1}&apos;, since it is of type &apos;{2}&apos; which is not compatible..
        /// </summary>
        internal static string DelegateArgumentTypeInvalid {
            get {
                return ResourceManager.GetString("DelegateArgumentTypeInvalid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Activity &apos;{0}&apos; attempted to directly schedule the ActivityDelegate handler activity &apos;{1}&apos;.  ActivityDelegate handlers cannot be scheduled directly.  Instead, the ActivityDelegate itself must be scheduled for execution..
        /// </summary>
        internal static string DelegateHandlersCannotBeScheduledDirectly {
            get {
                return ResourceManager.GetString("DelegateHandlersCannotBeScheduledDirectly", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The argument provided for the delegate input named &apos;{0}&apos; had an invalid type.  The delegate input is of type &apos;{1}&apos; and the argument is of type &apos;{2}&apos;.  The argument&apos;s type must be coercible to the delegate input&apos;s type..
        /// </summary>
        internal static string DelegateInArgumentTypeMismatch {
            get {
                return ResourceManager.GetString("DelegateInArgumentTypeMismatch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The argument provided for the delegate output named &apos;{0}&apos; had an invalid type.  The delegate output is of type &apos;{1}&apos; and the argument is of type &apos;{2}&apos;.  The delegate output&apos;s type must be coercible to the argument&apos;s type..
        /// </summary>
        internal static string DelegateOutArgumentTypeMismatch {
            get {
                return ResourceManager.GetString("DelegateOutArgumentTypeMismatch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ActivityDelegateParameter &apos;{0}&apos; cannot be modified. The ActivityDelegate which uses it has been locked. An ActivityDelegate is locked when Invoke is called on the owning WorkflowElement, or when a WorkflowInstance is created from it..
        /// </summary>
        internal static string DelegateParameterCannotBeModifiedAfterOpen {
            get {
                return ResourceManager.GetString("DelegateParameterCannotBeModifiedAfterOpen", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The directionality of activity delegate parameter &apos;{0}&apos; in DelegateParameters dictionary is &apos;{1}&apos;. The expected directionality is &apos;{2}&apos;..
        /// </summary>
        internal static string DelegateParameterDirectionalityMismatch {
            get {
                return ResourceManager.GetString("DelegateParameterDirectionalityMismatch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This dictionary is read only and cannot be modified..
        /// </summary>
        internal static string DictionaryIsReadOnly {
            get {
                return ResourceManager.GetString("DictionaryIsReadOnly", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Two different contracts have the same ConfigurationName..
        /// </summary>
        internal static string DifferentContractsSameConfigName {
            get {
                return ResourceManager.GetString("DifferentContractsSameConfigName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to WorkflowService Name {0} in additional versions does not match the Name {1} of the default WorkflowService..
        /// </summary>
        internal static string DifferentWorkflowServiceNameNotSupported {
            get {
                return ResourceManager.GetString("DifferentWorkflowServiceNameNotSupported", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot serialize expressions with direct lambda parameter references.  Possible malformed variable reference..
        /// </summary>
        internal static string DirectLambdaParameterReference {
            get {
                return ResourceManager.GetString("DirectLambdaParameterReference", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The directory of loaded instances has been aborted. An abrupt shutdown of the service is in progress..
        /// </summary>
        internal static string DirectoryAborted {
            get {
                return ResourceManager.GetString("DirectoryAborted", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to WorkflowOperationBehavior cannot apply the dispatch behavior because the DispatchOperation instance is in an invalid state..
        /// </summary>
        internal static string DispatchOperationInInvalidState {
            get {
                return ResourceManager.GetString("DispatchOperationInInvalidState", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The persistence provider implementation of InstanceStore in use is invalid. It completed processing a TryCommand request while an attempt to reclaim a lock was in progress. Use a persistence provider which does not return or throw from TryCommand, complete the IAsyncResult returned from BeginTryCommand before the IAsyncResult returned from BeginBindReclaimedLock is complete, or complete before throwing the exception returned from CreateBindReclaimedLockException..
        /// </summary>
        internal static string DoNotCompleteTryCommandWithPendingReclaim {
            get {
                return ResourceManager.GetString("DoNotCompleteTryCommandWithPendingReclaim", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ArrayIndexer on type {0} is not supported because it is not an array type..
        /// </summary>
        internal static string DoNotSupportArrayIndexerOnNonArrayType {
            get {
                return ResourceManager.GetString("DoNotSupportArrayIndexerOnNonArrayType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ArrayIndexer as LValue with array type {0} and result type {1} is not supported because they are not the same..
        /// </summary>
        internal static string DoNotSupportArrayIndexerReferenceWithDifferentArrayTypeAndResultType {
            get {
                return ResourceManager.GetString("DoNotSupportArrayIndexerReferenceWithDifferentArrayTypeAndResultType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ArrayIndexer as right value with array item type {0} and result type {1} is not supported because {0} is not compatible with {1}..
        /// </summary>
        internal static string DoNotSupportArrayIndexerValueWithIncompatibleArrayTypeAndResultType {
            get {
                return ResourceManager.GetString("DoNotSupportArrayIndexerValueWithIncompatibleArrayTypeAndResultType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ArrayIndexer with array type {0} and result type {1} is not supported because they are not the same..
        /// </summary>
        internal static string DoNotSupportArrayIndexerWithDifferentArrayTypeAndResultType {
            get {
                return ResourceManager.GetString("DoNotSupportArrayIndexerWithDifferentArrayTypeAndResultType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ArrayIndexer with index type {0} is not supported because it is not int..
        /// </summary>
        internal static string DoNotSupportArrayIndexerWithNonIntIndex {
            get {
                return ResourceManager.GetString("DoNotSupportArrayIndexerWithNonIntIndex", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Condition must be set before DoWhile activity &apos;{0}&apos; can be used..
        /// </summary>
        internal static string DoWhileRequiresCondition {
            get {
                return ResourceManager.GetString("DoWhileRequiresCondition", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This activity has type &apos;{0}&apos; in the updated definition but type &apos;{1}&apos; in the original definition..
        /// </summary>
        internal static string DUActivityTypeMismatch {
            get {
                return ResourceManager.GetString("DUActivityTypeMismatch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The type of this activity changed as part of the update..
        /// </summary>
        internal static string DUActivityTypeMismatchRuntime {
            get {
                return ResourceManager.GetString("DUActivityTypeMismatchRuntime", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to StateMachine does not support Dynamic Update, if the Trigger of a conditional transition is removed, or a Condition activity in the updated definition is reassigned from another property..
        /// </summary>
        internal static string DUDisallowIfCannotFindingMatchingCondition {
            get {
                return ResourceManager.GetString("DUDisallowIfCannotFindingMatchingCondition", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Workflow doesn&apos;t support Duplex Contracts, please remove the CallbackContract property from the ServiceContractAttribute. .
        /// </summary>
        internal static string DuplexContractsNotSupported {
            get {
                return ResourceManager.GetString("DuplexContractsNotSupported", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to add an annotation with name &apos;{0}&apos;. Check tracking profile queries for duplicate names within annotations or environment variables. .
        /// </summary>
        internal static string DuplicateAnnotationName {
            get {
                return ResourceManager.GetString("DuplicateAnnotationName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A catch clause already exists for type {0}. Only one catch clause can be added for each unique CLR exception type..
        /// </summary>
        internal static string DuplicateCatchClause {
            get {
                return ResourceManager.GetString("DuplicateCatchClause", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A duplicate CorrelationQuery was found with Where=&apos;{0}&apos;. This duplicate query will not be used when calculating correlation..
        /// </summary>
        internal static string DuplicateCorrelationQuery {
            get {
                return ResourceManager.GetString("DuplicateCorrelationQuery", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Multiple implemented contract types contain contract &apos;{0}&apos; and operation &apos;{1}&apos;..
        /// </summary>
        internal static string DuplicatedContract {
            get {
                return ResourceManager.GetString("DuplicatedContract", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to WorkflowService with ({0}) DefinitionIdentity already exists..
        /// </summary>
        internal static string DuplicateDefinitionIdentity {
            get {
                return ResourceManager.GetString("DuplicateDefinitionIdentity", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Activity &apos;{0}&apos; has multiple runtime arguments with evaluation order set to &apos;{1}&apos;. Runtime argument evaluation order values must be unique..
        /// </summary>
        internal static string DuplicateEvaluationOrderValues {
            get {
                return ResourceManager.GetString("DuplicateEvaluationOrderValues", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Property &apos;{0}&apos; on DynamicActivity &apos;{1}&apos; has more than one ImportAttribute. Only one ImportAttribute is allowed per property..
        /// </summary>
        internal static string DuplicateImportAttribute {
            get {
                return ResourceManager.GetString("DuplicateImportAttribute", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An instance key of value &apos;{0}&apos; already exists. This could be because there are multiple MessageQuerySets defined that evaluate to the same CorrelationKey..
        /// </summary>
        internal static string DuplicateInstanceKeyExists {
            get {
                return ResourceManager.GetString("DuplicateInstanceKeyExists", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Duplicate instrumentation for {0}.  Debugger may break at wrong location..
        /// </summary>
        internal static string DuplicateInstrumentation {
            get {
                return ResourceManager.GetString("DuplicateInstrumentation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Ambiguous match. &apos;{0}&apos; has multiple public {1} methods named &apos;{2}&apos; matching the parameter types, generic type arguments, and generic type constraints supplied to InvokeMethod &apos;{3}&apos;..
        /// </summary>
        internal static string DuplicateMethodFound {
            get {
                return ResourceManager.GetString("DuplicateMethodFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The same origin object &apos;{0}&apos; is used by activity &apos;{1}&apos; and activity &apos;{2}&apos;..
        /// </summary>
        internal static string DuplicateOriginActivityActivity {
            get {
                return ResourceManager.GetString("DuplicateOriginActivityActivity", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The same origin object &apos;{0}&apos; is used by activity &apos;{1}&apos; and variable &apos;{2}&apos;..
        /// </summary>
        internal static string DuplicateOriginActivityVariable {
            get {
                return ResourceManager.GetString("DuplicateOriginActivityVariable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The same origin object &apos;{0}&apos; is used by variable &apos;{1}&apos; and variable &apos;{2}&apos;..
        /// </summary>
        internal static string DuplicateOriginVariableVariable {
            get {
                return ResourceManager.GetString("DuplicateOriginVariableVariable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The value for the Duration argument in Delay activity &apos;{0}&apos; is negative..
        /// </summary>
        internal static string DurationIsNegative {
            get {
                return ResourceManager.GetString("DurationIsNegative", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to StateMachine does not support Dynamic Update if the state is transitioning, and the current transition has been modified..
        /// </summary>
        internal static string DUTriggerOrConditionChangedDuringTransitioning {
            get {
                return ResourceManager.GetString("DUTriggerOrConditionChangedDuringTransitioning", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A property named &apos;{0}&apos; already exists in the DynamicActivity.Properties collection..
        /// </summary>
        internal static string DynamicActivityDuplicatePropertyDetected {
            get {
                return ResourceManager.GetString("DynamicActivityDuplicatePropertyDetected", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified Activity definition contains multiple languages of expression activities that require compilation (languages discovered: &apos;{0}&apos;).  Only one language requiring compilation is allowed per definition.  Please convert all expression activities that require compilation to a single language..
        /// </summary>
        internal static string DynamicActivityMultipleExpressionLanguages {
            get {
                return ResourceManager.GetString("DynamicActivityMultipleExpressionLanguages", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A correlation query yielded an empty result set. Please ensure correlation queries for the endpoint are correctly configured..
        /// </summary>
        internal static string EmptyCorrelationQueryResults {
            get {
                return ResourceManager.GetString("EmptyCorrelationQueryResults", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The instance ID of a deserialized instance is all zeroes (Guid.Empty). Instances which are serialized must have a non-zero instance ID..
        /// </summary>
        internal static string EmptyGuidOnDeserializedInstance {
            get {
                return ResourceManager.GetString("EmptyGuidOnDeserializedInstance", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The implementation of the &apos;Id&apos; property on workflow host type &apos;{0}&apos; returned an instance ID of all zeroes. Implementations of WorkflowInstance must return an instance ID other than Guid.Empty..
        /// </summary>
        internal static string EmptyIdReturnedFromHost {
            get {
                return ResourceManager.GetString("EmptyIdReturnedFromHost", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Failed to retrieve the EndpointAddress from the endpoint, config file or the callback context. This could be because neither endpoint nor endpoint configuration was set on the activity with OperationName=&apos;{0}&apos;..
        /// </summary>
        internal static string EndpointAddressNotSetInEndpoint {
            get {
                return ResourceManager.GetString("EndpointAddressNotSetInEndpoint", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Both the Endpoint and the EndpointConfigurationName properties are set in activity &apos;{0}&apos; with OperationName=&apos;{1}&apos;. However, only one can be set at a time..
        /// </summary>
        internal static string EndpointIncorrectlySet {
            get {
                return ResourceManager.GetString("EndpointIncorrectlySet", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The activity &apos;{0}&apos; with OperationName=&apos;{1}&apos; must specify either the Endpoint or EndpointConfigurationName property..
        /// </summary>
        internal static string EndpointNotSet {
            get {
                return ResourceManager.GetString("EndpointNotSet", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to End SQL command execution: {0}.
        /// </summary>
        internal static string EndSqlCommandExecute {
            get {
                return ResourceManager.GetString("EndSqlCommandExecute", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A TransactionProperty with enlistWorkflowState set to true must be added within an isolation block..
        /// </summary>
        internal static string EnlistedTransactionPropertiesRequireIsolationBlocks {
            get {
                return ResourceManager.GetString("EnlistedTransactionPropertiesRequireIsolationBlocks", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Entering a no persist block..
        /// </summary>
        internal static string EnterNoPersistBlock {
            get {
                return ResourceManager.GetString("EnterNoPersistBlock", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Enumeration has not started. Call MoveNext..
        /// </summary>
        internal static string EnumeratorNotStarted {
            get {
                return ResourceManager.GetString("EnumeratorNotStarted", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to LocationEnvironment can only be accessed within the scope of the condition it was passed into..
        /// </summary>
        internal static string EnvironmentDisposed {
            get {
                return ResourceManager.GetString("EnvironmentDisposed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An error occurred while attempting to extract the target object of type &apos;{0}&apos; from the method call expression &apos;{1}&apos;.  Note that the expression determining the object of type &apos;{0}&apos; must not require the runtime context.  Error: {2}.
        /// </summary>
        internal static string ErrorExtractingValuesForLambdaRewrite {
            get {
                return ResourceManager.GetString("ErrorExtractingValuesForLambdaRewrite", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The following errors were encountered while processing the workflow tree:.
        /// </summary>
        internal static string ErrorsEncounteredWhileProcessingTree {
            get {
                return ResourceManager.GetString("ErrorsEncounteredWhileProcessingTree", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The TimeToPersist value must be greater than or equal to TimeSpan.Zero. To disable, specify value equal to TimeSpan.MaxValue..
        /// </summary>
        internal static string ErrorTimeToPersistLessThanZero {
            get {
                return ResourceManager.GetString("ErrorTimeToPersistLessThanZero", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The TimeToUnload value must be greater than or equal to TimeSpan.Zero. To disable, specify value equal to TimeSpan.MaxValue..
        /// </summary>
        internal static string ErrorTimeToUnloadLessThanZero {
            get {
                return ResourceManager.GetString("ErrorTimeToUnloadLessThanZero", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Number of string arguments passed to Etw WriteEvent has exceeded the max allowed limit of {0}..
        /// </summary>
        internal static string EtwAPIMaxStringCountExceeded {
            get {
                return ResourceManager.GetString("EtwAPIMaxStringCountExceeded", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Number of arguments passed to Etw WriteEvent has exceeded the max allowed limit of {0}..
        /// </summary>
        internal static string EtwMaxNumberArgumentsExceeded {
            get {
                return ResourceManager.GetString("EtwMaxNumberArgumentsExceeded", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Etw registration failed with error code {0}..
        /// </summary>
        internal static string EtwRegistrationFailed {
            get {
                return ResourceManager.GetString("EtwRegistrationFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unhandled exception. Exception details: {0}.
        /// </summary>
        internal static string EtwUnhandledException {
            get {
                return ResourceManager.GetString("EtwUnhandledException", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to RegisterBookmarkScope can only be called when there are no existing bookmarks in the scope of the corresponding ExclusiveHandle..
        /// </summary>
        internal static string ExclusiveHandleRegisterBookmarkScopeFailed {
            get {
                return ResourceManager.GetString("ExclusiveHandleRegisterBookmarkScopeFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Reinitialize can only be called when there are no existing bookmarks registered with this ExclusiveHandle..
        /// </summary>
        internal static string ExclusiveHandleReinitializeFailed {
            get {
                return ResourceManager.GetString("ExclusiveHandleReinitializeFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The persistence provider implementation of InstanceStore is invalid. It attempted to execute multiple nested commands concurrently. Only one call to InstancePersistenceContext.Execute (or BeginExecute) may be issued at a time for each call to InstanceStore.TryCommand (or BeginTryCommand). This error indicates an invalid persistence provider implementation..
        /// </summary>
        internal static string ExecuteMustBeNested {
            get {
                return ResourceManager.GetString("ExecuteMustBeNested", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Execute work item start.
        /// </summary>
        internal static string ExecuteWorkItemStart {
            get {
                return ResourceManager.GetString("ExecuteWorkItemStart", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Execute work item stop.
        /// </summary>
        internal static string ExecuteWorkItemStop {
            get {
                return ResourceManager.GetString("ExecuteWorkItemStop", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A property with the name &apos;{0}&apos; has already been defined at this scope. To replace the current property, first remove it and then add the new property..
        /// </summary>
        internal static string ExecutionPropertyAlreadyDefined {
            get {
                return ResourceManager.GetString("ExecutionPropertyAlreadyDefined", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Exiting a no persist block..
        /// </summary>
        internal static string ExitNoPersistBlock {
            get {
                return ResourceManager.GetString("ExitNoPersistBlock", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The expression is required for conversion..
        /// </summary>
        internal static string ExpressionRequiredForConversion {
            get {
                return ResourceManager.GetString("ExpressionRequiredForConversion", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to GetExpressionTree failed to get an expression tree because the expression text or the LocationReferenceEnvironment visible to it has been altered since it was cached.  The compile error message is : {0}..
        /// </summary>
        internal static string ExpressionTamperedSinceLastCompiled {
            get {
                return ResourceManager.GetString("ExpressionTamperedSinceLastCompiled", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to WorkflowInstanceExtensionsManager cannot be modified once it has been associated with a WorkflowInstance..
        /// </summary>
        internal static string ExtensionsCannotBeModified {
            get {
                return ResourceManager.GetString("ExtensionsCannotBeModified", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The extension collection does not support setting extensions by index. Please use the Add or Remove methods..
        /// </summary>
        internal static string ExtensionsCannotBeSetByIndex {
            get {
                return ResourceManager.GetString("ExtensionsCannotBeSetByIndex", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Adding an extension of type &apos;{0}&apos; is not supported by WorkflowServiceHost..
        /// </summary>
        internal static string ExtensionTypeNotSupported {
            get {
                return ResourceManager.GetString("ExtensionTypeNotSupported", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The location you are attempting to set comes from a SymbolResolver.  SymbolResolver locations are read only..
        /// </summary>
        internal static string ExternalLocationsGetOnly {
            get {
                return ResourceManager.GetString("ExternalLocationsGetOnly", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Overload group &apos;{0}&apos; is already configured. It is an error to have property &apos;{1}&apos; in overload group &apos;{2}&apos; also configured..
        /// </summary>
        internal static string ExtraOverloadGroupPropertiesConfigured {
            get {
                return ResourceManager.GetString("ExtraOverloadGroupPropertiesConfigured", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Parameter &apos;{0}&apos; is not declared in operation &apos;{1}&apos; in contract &apos;{2}&apos;..
        /// </summary>
        internal static string ExtraParameter {
            get {
                return ResourceManager.GetString("ExtraParameter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Activity contains a return message while the contract contains no return value..
        /// </summary>
        internal static string ExtraReturnValue {
            get {
                return ResourceManager.GetString("ExtraReturnValue", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Failed to create security token &apos;{0}&apos;..
        /// </summary>
        internal static string FailedToCreateSecurityToken {
            get {
                return ResourceManager.GetString("FailedToCreateSecurityToken", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Failed to get instance ID from the message for this control operation. This may be caused by contract mismatch. Please make sure that client contract matches the service endpoint contract..
        /// </summary>
        internal static string FailedToGetInstanceIdForControlOperation {
            get {
                return ResourceManager.GetString("FailedToGetInstanceIdForControlOperation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Failed to get WorkflowIdentity from the message for this control operation. This may be caused by contract mismatch. Please make sure that client contract matches the service endpoint contract..
        /// </summary>
        internal static string FailedToGetWorkflowIdentityForControlOperation {
            get {
                return ResourceManager.GetString("FailedToGetWorkflowIdentityForControlOperation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Receive activity configured with request/reply operation &apos;{0}&apos; failed to initialize a RequestReplyCorrelation handle. There must be an InstanceKey with RequestReplyCorrelation in the received message&apos;s CorrelationMessageProperty..
        /// </summary>
        internal static string FailedToInitializeRequestReplyCorrelationHandle {
            get {
                return ResourceManager.GetString("FailedToInitializeRequestReplyCorrelationHandle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Failed to load binding &apos;{0}&apos; with binding configuration &apos;{1}&apos; for the standard control endpoint &apos;{2}&apos;..
        /// </summary>
        internal static string FailedToLoadBindingInControlEndpoint {
            get {
                return ResourceManager.GetString("FailedToLoadBindingInControlEndpoint", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An unrecoverable error occurred. For diagnostic purposes, this English message is associated with the failure: &apos;{0}&apos;..
        /// </summary>
        internal static string FailFastMessage {
            get {
                return ResourceManager.GetString("FailFastMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Rethrow activity &apos;{0}&apos; cannot find the FaultContext set by the TryCatch activity. To resolve the issue, do not modify or remove the FaultContext from the execution properties collection..
        /// </summary>
        internal static string FaultContextNotFound {
            get {
                return ResourceManager.GetString("FaultContextNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specified fault type &apos;{0}&apos; does not exist for operation &apos;{1}&apos; in contract &apos;{2}&apos;..
        /// </summary>
        internal static string FaultTypeMismatch {
            get {
                return ResourceManager.GetString("FaultTypeMismatch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 4.6.1038.0 built by: NETFXREL2.
        /// </summary>
        internal static string FileVersion {
            get {
                return ResourceManager.GetString("FileVersion", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Final state &apos;{0}&apos; must not have an {1} action..
        /// </summary>
        internal static string FinalStateCannotHaveProperty {
            get {
                return ResourceManager.GetString("FinalStateCannotHaveProperty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Final state &apos;{0}&apos; must not have any outgoing transitions..
        /// </summary>
        internal static string FinalStateCannotHaveTransition {
            get {
                return ResourceManager.GetString("FinalStateCannotHaveTransition", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The first parameter of type &apos;{0}&apos; specified in the content does not match the type &apos;{1}&apos; specified as the return value for operation &apos;{2}&apos; in contract &apos;{3}&apos;..
        /// </summary>
        internal static string FirstParameterDoesnotMatchTheReturnValue {
            get {
                return ResourceManager.GetString("FirstParameterDoesnotMatchTheReturnValue", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Flowchart does not support Dynamic Update when it has references to imported children..
        /// </summary>
        internal static string FlowchartContainsReferences {
            get {
                return ResourceManager.GetString("FlowchartContainsReferences", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to All nodes must be connected when ValidateUnconnectedNodes is set to True before the Flowchart &apos;{0}&apos; can be used..
        /// </summary>
        internal static string FlowchartContainsUnconnectedNodes {
            get {
                return ResourceManager.GetString("FlowchartContainsUnconnectedNodes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Flowchart &apos;{0}&apos; - was executed with no Nodes..
        /// </summary>
        internal static string FlowchartEmpty {
            get {
                return ResourceManager.GetString("FlowchartEmpty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Flowchart &apos;{0}&apos; does not have a StartNode..
        /// </summary>
        internal static string FlowchartMissingStartNode {
            get {
                return ResourceManager.GetString("FlowchartMissingStartNode", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Flowchart &apos;{0}&apos;/FlowStep - Next node is null. Flowchart execution will end..
        /// </summary>
        internal static string FlowchartNextNull {
            get {
                return ResourceManager.GetString("FlowchartNextNull", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Flowchart &apos;{0}&apos; - Start has been scheduled..
        /// </summary>
        internal static string FlowchartStart {
            get {
                return ResourceManager.GetString("FlowchartStart", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Flowchart &apos;{0}&apos;/FlowSwitch - Case &apos;{1}&apos; was selected..
        /// </summary>
        internal static string FlowchartSwitchCase {
            get {
                return ResourceManager.GetString("FlowchartSwitchCase", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Flowchart &apos;{0}&apos;/FlowSwitch - could find neither a Case activity nor a Default Case matching the Expression result. Flowchart execution will end..
        /// </summary>
        internal static string FlowchartSwitchCaseNotFound {
            get {
                return ResourceManager.GetString("FlowchartSwitchCaseNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Flowchart &apos;{0}&apos;/FlowSwitch - Default Case was selected..
        /// </summary>
        internal static string FlowchartSwitchDefault {
            get {
                return ResourceManager.GetString("FlowchartSwitchDefault", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Condition must be set before the FlowDecision in Flowchart &apos;{0}&apos; can be used..
        /// </summary>
        internal static string FlowDecisionRequiresCondition {
            get {
                return ResourceManager.GetString("FlowDecisionRequiresCondition", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The flowed in transaction was different from the ambient transaction..
        /// </summary>
        internal static string FlowedTransactionDifferentFromAmbient {
            get {
                return ResourceManager.GetString("FlowedTransactionDifferentFromAmbient", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to FlowNode cannot be shared across different Flowcharts. It is already in Flowchart &apos;{0}&apos; and cannot be used in Flowchart &apos;{1}&apos;..
        /// </summary>
        internal static string FlowNodeCannotBeShared {
            get {
                return ResourceManager.GetString("FlowNodeCannotBeShared", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to FlowNode in Flowchart &apos;{0}&apos; has already been opened and cannot be modified. A FlowNode can only be modified at design time..
        /// </summary>
        internal static string FlowNodeLockedForRuntime {
            get {
                return ResourceManager.GetString("FlowNodeLockedForRuntime", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Expression must be set before the FlowSwitch in Flowchart &apos;{0}&apos; can be used..
        /// </summary>
        internal static string FlowSwitchRequiresExpression {
            get {
                return ResourceManager.GetString("FlowSwitchRequiresExpression", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Values must be bound to a non-null expression before ForEach activity &apos;{0}&apos; can be used..
        /// </summary>
        internal static string ForEachRequiresNonNullValues {
            get {
                return ResourceManager.GetString("ForEachRequiresNonNullValues", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Command failed: {0}.
        /// </summary>
        internal static string FoundProcessingError {
            get {
                return ResourceManager.GetString("FoundProcessingError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There are conflicting changes to this activity from its provided implementation map and the current update. The activity attempted to save original values in both maps..
        /// </summary>
        internal static string GeneratedAndProvidedMapConflict {
            get {
                return ResourceManager.GetString("GeneratedAndProvidedMapConflict", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There are conflicting changes to this activity from an implementation update and a larger workflow update. The activity attempted to save original values in both updates..
        /// </summary>
        internal static string GeneratedAndProvidedMapConflictRuntime {
            get {
                return ResourceManager.GetString("GeneratedAndProvidedMapConflictRuntime", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The execution of the InstancePersistenceCommand named {0} was interrupted by an error..
        /// </summary>
        internal static string GenericInstanceCommand {
            get {
                return ResourceManager.GetString("GenericInstanceCommand", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The execution of an InstancePersistenceCommand was interrupted by an error..
        /// </summary>
        internal static string GenericInstanceCommandNull {
            get {
                return ResourceManager.GetString("GenericInstanceCommandNull", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Activity &apos;{0}&apos; cannot call GetLocation on this public location reference because it was created CodeActivityPublicEnvironmentAccessor.TryGetAccessToPublicLocation. To read or write the value, use ActivityContext.GetValue or SetValue. To get direct access to the location, declare it using CodeActivityPublicEnvironmentAccessor.TryGetReferenceToPublicLocation..
        /// </summary>
        internal static string GetLocationOnPublicAccessReference {
            get {
                return ResourceManager.GetString("GetLocationOnPublicAccessReference", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The parameter at index {0} requested from the InstancePersistenceAction named {1} was requested using an incorrect generic type argument. When calling GetParameter&lt;T&gt;, the type specified for T must match the documented type for the parameter..
        /// </summary>
        internal static string GetParameterTypeMismatch {
            get {
                return ResourceManager.GetString("GetParameterTypeMismatch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Before calling this method, specify the supported definition identities for this workflow host by calling WorkflowApplication.CreateDefaultInstanceOwner..
        /// </summary>
        internal static string GetRunnableRequiresOwner {
            get {
                return ResourceManager.GetString("GetRunnableRequiresOwner", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The argument must be a non-zero Guid..
        /// </summary>
        internal static string GuidCannotBeEmpty {
            get {
                return ResourceManager.GetString("GuidCannotBeEmpty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Handling an exception.  Exception details: {0}.
        /// </summary>
        internal static string HandledException {
            get {
                return ResourceManager.GetString("HandledException", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Handling an exception. Exception details: {0}.
        /// </summary>
        internal static string HandledExceptionError {
            get {
                return ResourceManager.GetString("HandledExceptionError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Handling an exception  Exception details: {0}.
        /// </summary>
        internal static string HandledExceptionVerbose {
            get {
                return ResourceManager.GetString("HandledExceptionVerbose", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Handling an exception. Exception details: {0}.
        /// </summary>
        internal static string HandledExceptionWarning {
            get {
                return ResourceManager.GetString("HandledExceptionWarning", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The execution of InstancePersistenceCommands has been canceled because the InstanceHandle was freed..
        /// </summary>
        internal static string HandleFreed {
            get {
                return ResourceManager.GetString("HandleFreed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Free method on InstanceHandle may not be called while OnNewInstanceHandle is executing for that handle..
        /// </summary>
        internal static string HandleFreedBeforeInitialized {
            get {
                return ResourceManager.GetString("HandleFreedBeforeInitialized", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The execution of InstancePersistenceCommands has been canceled because the InstanceHandle was freed..
        /// </summary>
        internal static string HandleFreedInDirectory {
            get {
                return ResourceManager.GetString("HandleFreedInDirectory", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A HandleInitializationContext can only be accessed within the scope of the function it was passed into..
        /// </summary>
        internal static string HandleInitializationContextDisposed {
            get {
                return ResourceManager.GetString("HandleInitializationContextDisposed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The handle is not initialized.  Handles must be created and initialized by the runtime and are only valid inside the scope in which they are declared..
        /// </summary>
        internal static string HandleNotInitialized {
            get {
                return ResourceManager.GetString("HandleNotInitialized", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No persistence blocks can only be setup when there are no executing children..
        /// </summary>
        internal static string HasExecutingChildrenNoPersist {
            get {
                return ResourceManager.GetString("HasExecutingChildrenNoPersist", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The instance ID provided by the workflow host, {0}, doesn&apos;t match the ID stored in the serialized instance, {1}. A host may not deserialize an instance using a different ID than when the instance was serialized..
        /// </summary>
        internal static string HostIdDoesNotMatchInstance {
            get {
                return ResourceManager.GetString("HostIdDoesNotMatchInstance", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The SqlWorkflowInstanceStore lock has expired. This could have occurred because the SQL Server is busy or because the connection was temporarily lost..
        /// </summary>
        internal static string HostLockExpired {
            get {
                return ResourceManager.GetString("HostLockExpired", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The SqlWorkflowInstanceStore lock does not exist in the database. This could have occurred because the SQL Server is busy or because the connection was temporarily lost..
        /// </summary>
        internal static string HostLockNotFound {
            get {
                return ResourceManager.GetString("HostLockNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to WorkflowIdentity.Name and Package cannot contain control characters (Unicode character category Cc)..
        /// </summary>
        internal static string IdentityControlCharacter {
            get {
                return ResourceManager.GetString("IdentityControlCharacter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to WorkflowIdentity.Name cannot contain the semi-colon &apos;;&apos; character..
        /// </summary>
        internal static string IdentityNameSemicolon {
            get {
                return ResourceManager.GetString("IdentityNameSemicolon", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SqlWorkflowInstanceStore does not support activation on InstanceOwners that specify DefinitionIdentities..
        /// </summary>
        internal static string IdentityNotSupportedWithActivation {
            get {
                return ResourceManager.GetString("IdentityNotSupportedWithActivation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to WorkflowIdentity.Name and Package cannot contain leading or trailing white space (Unicode character categories Zl, Zp, or Zs)..
        /// </summary>
        internal static string IdentityWhitespace {
            get {
                return ResourceManager.GetString("IdentityWhitespace", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The provided ID &apos;{0}&apos; could not be found in the workflow.  Check the workflow for validation errors which could be generating subtrees which cannot be traversed..
        /// </summary>
        internal static string IdNotFoundInWorkflow {
            get {
                return ResourceManager.GetString("IdNotFoundInWorkflow", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The ImplementationVersion (&apos;{0}&apos;) of the loaded activity instance does not match the ImplementationVersion (&apos;{1}&apos;) of the provided activity (&apos;{2}&apos;). The instance can be updated by applying an implementation map..
        /// </summary>
        internal static string ImplementationVersionMismatch {
            get {
                return ResourceManager.GetString("ImplementationVersionMismatch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to In argument &apos;{0}&apos; on Activity &apos;{1}&apos;, DisplayName: &apos;{2}&apos;, InstanceId: &apos;{3}&apos; has been bound with value: {4}..
        /// </summary>
        internal static string InArgumentBound {
            get {
                return ResourceManager.GetString("InArgumentBound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An argument of the wrong type was passed to this method. This method expected an argument of type {0}, but it was passed an argument of type {1}..
        /// </summary>
        internal static string IncompatibleArgumentType {
            get {
                return ResourceManager.GetString("IncompatibleArgumentType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The generic type &apos;{0}&apos; is not compatible with the real item type &apos;{1}&apos; of Array operand in MultidimensionalArrayItemReference..
        /// </summary>
        internal static string IncompatibleTypeForMultidimensionalArrayItemReference {
            get {
                return ResourceManager.GetString("IncompatibleTypeForMultidimensionalArrayItemReference", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The index for the return argument is incorrect in the &apos;{0}&apos; collection. The position specified is &apos;{1}&apos; whereas the expected position is &apos;{2}&apos;..
        /// </summary>
        internal static string IncorrectIndexForArgument {
            get {
                return ResourceManager.GetString("IncorrectIndexForArgument", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A value of the wrong type was retrieved from the instance store.  A value of type {0} was expected, but a value of type {1} was encountered instead..
        /// </summary>
        internal static string IncorrectValueType {
            get {
                return ResourceManager.GetString("IncorrectValueType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Index value {0} is equal to or greater than {1}, length of the array..
        /// </summary>
        internal static string IndexOutOfBounds {
            get {
                return ResourceManager.GetString("IndexOutOfBounds", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to At least one index value must be supplied for {0} activity &apos;{1}&apos;..
        /// </summary>
        internal static string IndicesAreNeeded {
            get {
                return ResourceManager.GetString("IndicesAreNeeded", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ContractDescription with Name=&apos;{0}&apos; and Namespace=&apos;{1}&apos; has been inferred from WorkflowService..
        /// </summary>
        internal static string InferredContractDescription {
            get {
                return ResourceManager.GetString("InferredContractDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to OperationDescription with Name=&apos;{0}&apos; in contract &apos;{1}&apos; has been inferred from WorkflowService. IsOneWay={2}..
        /// </summary>
        internal static string InferredOperationDescription {
            get {
                return ResourceManager.GetString("InferredOperationDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The activity instance&apos;s initialization was incomplete.  This error occurs when a variable default or argument expression faults and the exception handler allows execution to continue..
        /// </summary>
        internal static string InitializationIncomplete {
            get {
                return ResourceManager.GetString("InitializationIncomplete", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Activity &apos;{0}&apos; must be used in a WorkflowServiceHost..
        /// </summary>
        internal static string InitializeCorrelationRequiresWorkflowServiceHost {
            get {
                return ResourceManager.GetString("InitializeCorrelationRequiresWorkflowServiceHost", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The persistence value named {0} is being provided as an initial metadata value, so it must have a valid InstanceValue other than InstanceValue.DeletedValue..
        /// </summary>
        internal static string InitialMetadataCannotBeDeleted {
            get {
                return ResourceManager.GetString("InitialMetadataCannotBeDeleted", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Initial state &apos;{0}&apos; must not also be a final state..
        /// </summary>
        internal static string InitialStateCannotBeFinalState {
            get {
                return ResourceManager.GetString("InitialStateCannotBeFinalState", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Initial state &apos;{0}&apos; must be added to &apos;States&apos; collection of a state machine..
        /// </summary>
        internal static string InitialStateNotInStatesCollection {
            get {
                return ResourceManager.GetString("InitialStateNotInStatesCollection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Activity &apos;{0}&apos; cannot access this public location reference because it is only valid for activity &apos;{1}&apos;.  Only the activity which obtained the public location reference is allowed to use it..
        /// </summary>
        internal static string InlinedLocationReferenceOnlyAccessibleByOwner {
            get {
                return ResourceManager.GetString("InlinedLocationReferenceOnlyAccessibleByOwner", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The supplied input parameter count {0} does not match the expected count of {1}..
        /// </summary>
        internal static string InputParametersCountMismatch {
            get {
                return ResourceManager.GetString("InputParametersCountMismatch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Expected input parameter named &apos;{0}&apos; was not found..
        /// </summary>
        internal static string InputParametersMissing {
            get {
                return ResourceManager.GetString("InputParametersMissing", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Expected an input parameter value of type &apos;{0}&apos; for parameter named &apos;{1}&apos;..
        /// </summary>
        internal static string InputParametersTypeMismatch {
            get {
                return ResourceManager.GetString("InputParametersTypeMismatch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The execution of an InstancePersistenceCommand was interrupted because the instance has already been persisted to the instance store..
        /// </summary>
        internal static string InstanceCollisionDefault {
            get {
                return ResourceManager.GetString("InstanceCollisionDefault", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The execution of an InstancePersistenceCommand was interrupted because the instance &apos;{0}&apos; has already been persisted to the instance store..
        /// </summary>
        internal static string InstanceCollisionSpecific {
            get {
                return ResourceManager.GetString("InstanceCollisionSpecific", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The execution of an InstancePersistenceCommand was interrupted because the instance is already complete..
        /// </summary>
        internal static string InstanceCompleteDefault {
            get {
                return ResourceManager.GetString("InstanceCompleteDefault", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The execution of an InstancePersistenceCommand was interrupted because the instance &apos;{0}&apos; is already complete..
        /// </summary>
        internal static string InstanceCompleteSpecific {
            get {
                return ResourceManager.GetString("InstanceCompleteSpecific", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The execution of an InstancePersistenceCommand was interrupted because another valid InstanceHandle holds a lock on the instance, indicating that a non-stale copy of the instance is already loaded. The loaded copy of the instance and its associated InstanceHandle should be used or unloaded..
        /// </summary>
        internal static string InstanceHandleConflictDefault {
            get {
                return ResourceManager.GetString("InstanceHandleConflictDefault", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The execution of an InstancePersistenceCommand was interrupted because another valid InstanceHandle holds a lock on instance &apos;{0}&apos;, indicating that a non-stale copy of the instance is already loaded. The loaded copy of the instance and its associated InstanceHandle should be used or unloaded..
        /// </summary>
        internal static string InstanceHandleConflictSpecific {
            get {
                return ResourceManager.GetString("InstanceHandleConflictSpecific", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SqlWorkflowInstanceStore does not support altering key metadata for already existing keys..
        /// </summary>
        internal static string InstanceKeyMetadataChangesNotSupported {
            get {
                return ResourceManager.GetString("InstanceKeyMetadataChangesNotSupported", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An InstanceKey cannot be created with an all-zero value, such as Guid.Empty. Use InstanceKey.InvalidKey to obtain an InstanceKey with an all-zero value..
        /// </summary>
        internal static string InstanceKeyRequiresValidGuid {
            get {
                return ResourceManager.GetString("InstanceKeyRequiresValidGuid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Attempt to perform the control operation &apos;{0}&apos; on service instance with the identifier &apos;{1}&apos; failed. There is an active transacted control operation in progress..
        /// </summary>
        internal static string InstanceLockedUnderTransaction {
            get {
                return ResourceManager.GetString("InstanceLockedUnderTransaction", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The execution of an InstancePersistenceCommand was interrupted because the instance has become unlocked. This error indicates that the in-memory copy of the instance has become stale and should be discarded, along with the InstanceHandle..
        /// </summary>
        internal static string InstanceLockLostDefault {
            get {
                return ResourceManager.GetString("InstanceLockLostDefault", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The execution of an InstancePersistenceCommand was interrupted because the instance &apos;{0}&apos; has become unlocked. This error indicates that the in-memory copy of the instance has become stale and should be discarded, along with the InstanceHandle..
        /// </summary>
        internal static string InstanceLockLostSpecific {
            get {
                return ResourceManager.GetString("InstanceLockLostSpecific", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Recovering instance locks failed due to the following exception.
        /// </summary>
        internal static string InstanceLocksRecoveryError {
            get {
                return ResourceManager.GetString("InstanceLocksRecoveryError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The instance method call requires a target object..
        /// </summary>
        internal static string InstanceMethodCallRequiresTargetObject {
            get {
                return ResourceManager.GetString("InstanceMethodCallRequiresTargetObject", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The instance must be paused to perform this operation..
        /// </summary>
        internal static string InstanceMustBePaused {
            get {
                return ResourceManager.GetString("InstanceMustBePaused", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The instance must not be paused to perform this operation..
        /// </summary>
        internal static string InstanceMustNotBePaused {
            get {
                return ResourceManager.GetString("InstanceMustNotBePaused", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The operation could not be performed because the instance is in suspended state..
        /// </summary>
        internal static string InstanceMustNotBeSuspended {
            get {
                return ResourceManager.GetString("InstanceMustNotBeSuspended", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The execution of an InstancePersistenceCommand was interrupted because the instance has not yet been persisted to the instance store..
        /// </summary>
        internal static string InstanceNotReadyDefault {
            get {
                return ResourceManager.GetString("InstanceNotReadyDefault", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The execution of an InstancePersistenceCommand was interrupted because the instance &apos;{0}&apos; has not yet been persisted to the instance store..
        /// </summary>
        internal static string InstanceNotReadySpecific {
            get {
                return ResourceManager.GetString("InstanceNotReadySpecific", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The persistence provider implementation of InstanceStore in use is invalid. It reported performing an operation which requires an instance, but no instance is bound to the operation..
        /// </summary>
        internal static string InstanceOperationRequiresInstance {
            get {
                return ResourceManager.GetString("InstanceOperationRequiresInstance", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The persistence provider implementation of InstanceStore in use is invalid. It reported performing an operation which requires the lock on an instance to be held, but the lock is not held..
        /// </summary>
        internal static string InstanceOperationRequiresLock {
            get {
                return ResourceManager.GetString("InstanceOperationRequiresLock", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The persistence provider implementation of InstanceStore in use is invalid. It reported performing an operation which requires the instance to be in a state other than InstanceState.Completed, but the instance is in that state..
        /// </summary>
        internal static string InstanceOperationRequiresNotCompleted {
            get {
                return ResourceManager.GetString("InstanceOperationRequiresNotCompleted", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The persistence provider implementation of InstanceStore in use is invalid. It reported performing an operation which requires the instance to be in a state other than InstanceState.Uninitialized, but the instance is in that state..
        /// </summary>
        internal static string InstanceOperationRequiresNotUninitialized {
            get {
                return ResourceManager.GetString("InstanceOperationRequiresNotUninitialized", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The persistence provider implementation of InstanceStore in use is invalid. It reported performing an operation which requires an instance owner, but no owner is bound to the operation..
        /// </summary>
        internal static string InstanceOperationRequiresOwner {
            get {
                return ResourceManager.GetString("InstanceOperationRequiresOwner", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The execution of an InstancePersistenceCommand was interrupted because the instance owner registration has become invalid. This error indicates that the in-memory copy of all instances locked by this owner have become stale and should be discarded, along with the InstanceHandles. Typically, this error is best handled by restarting the host..
        /// </summary>
        internal static string InstanceOwnerDefault {
            get {
                return ResourceManager.GetString("InstanceOwnerDefault", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The execution of an InstancePersistenceCommand was interrupted because the instance owner registration for owner ID &apos;{0}&apos; has become invalid. This error indicates that the in-memory copy of all instances locked by this owner have become stale and should be discarded, along with the InstanceHandles. Typically, this error is best handled by restarting the host..
        /// </summary>
        internal static string InstanceOwnerSpecific {
            get {
                return ResourceManager.GetString("InstanceOwnerSpecific", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The instance persistence system is unable to process an invalid InstancePersistenceCommand. The command requires an instance, but no instance was bound to the InstanceHandle..
        /// </summary>
        internal static string InstanceRequired {
            get {
                return ResourceManager.GetString("InstanceRequired", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The persistence provider implementation of InstanceStore in use is invalid. It reported acquiring and committing the same version of a lock on the same instance twice. Each time a lock is acquired on an instance, the lock version must be incremented; or else zero should always be reported as the lock version. When a provider detects an attempt by an instance owner to lock an instance already locked by itself, the provider should call BindReclaimedLock, BeginBindReclaimedLock, or CreateBeginBindReclaimedLock [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string InstanceStoreBoundSameVersionTwice {
            get {
                return ResourceManager.GetString("InstanceStoreBoundSameVersionTwice", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The instance is configured with a different InstanceStore than this WorkflowApplication..
        /// </summary>
        internal static string InstanceStoreDoesntMatchWorkflowApplication {
            get {
                return ResourceManager.GetString("InstanceStoreDoesntMatchWorkflowApplication", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The implementation of InstanceStore threw an InstancePersistenceException.  The InstancePersistenceException is the inner exception..
        /// </summary>
        internal static string InstanceStoreFailed {
            get {
                return ResourceManager.GetString("InstanceStoreFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This InstanceStore already has a DefaultInstanceOwner..
        /// </summary>
        internal static string InstanceStoreHasDefaultOwner {
            get {
                return ResourceManager.GetString("InstanceStoreHasDefaultOwner", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The SqlWorkflowInstanceStore is read only can cannot be configured further. All configuration of SqlWorkflowInstanceStore must happen before the first InstanceHandle is created..
        /// </summary>
        internal static string InstanceStoreReadOnly {
            get {
                return ResourceManager.GetString("InstanceStoreReadOnly", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only WorkflowApplications which have been configured with an InstanceStore can be persisted or unloaded..
        /// </summary>
        internal static string InstanceStoreRequiredToPersist {
            get {
                return ResourceManager.GetString("InstanceStoreRequiredToPersist", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Service instance with the identifier &apos;{1}&apos; is currently in &apos;Suspended&apos; state. Attempt to perform control operation &apos;{0}&apos; failed..
        /// </summary>
        internal static string InstanceSuspended {
            get {
                return ResourceManager.GetString("InstanceSuspended", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Array size is {0} and is insufficient to hold results of the operation..
        /// </summary>
        internal static string InsufficientArraySize {
            get {
                return ResourceManager.GetString("InsufficientArraySize", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to InternalCacheMetadata started on activity &apos;{0}&apos;..
        /// </summary>
        internal static string InternalCacheMetadataStart {
            get {
                return ResourceManager.GetString("InternalCacheMetadataStart", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to InternalCacheMetadata stopped on activity &apos;{0}&apos;..
        /// </summary>
        internal static string InternalCacheMetadataStop {
            get {
                return ResourceManager.GetString("InternalCacheMetadataStop", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Internal constraint exception while running constraint with name &apos;{0}&apos; against activity of type {1} with name &apos;{2}&apos;.  Exception was: {3}.
        /// </summary>
        internal static string InternalConstraintException {
            get {
                return ResourceManager.GetString("InternalConstraintException", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to System.ServiceModel.Internals.dll.
        /// </summary>
        internal static string InternalName {
            get {
                return ResourceManager.GetString("InternalName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The server was unable to process the request due to an internal error. For more information about the error, either turn on IncludeExceptionDetailInFaults (either from ServiceBehaviorAttribute or from the &lt;serviceDebug&gt; configuration behavior) on the server in order to send the exception information back to the client, or turn on tracing as per the Microsoft .NET Framework 4.0 SDK documentation and inspect the server trace logs..
        /// </summary>
        internal static string InternalServerError {
            get {
                return ResourceManager.GetString("InternalServerError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The provided activity ID was in an invalid format.  It must be a dot separated list of integer values such as &apos;1.12.3&apos; with no leading or trailing dots..
        /// </summary>
        internal static string InvalidActivityIdFormat {
            get {
                return ResourceManager.GetString("InvalidActivityIdFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Activity &apos;{0}&apos; in DynamicUpdateMapBuilder.DisallowUpdateInside is not a public member of DynamicUpdateMapBuilder.UpdatedWorkflowDefinition. Please make sure this activity is part of the updated workflow definition. If this activity has been removed as part of the update, you do not need to block update explicitly; update is automatically blocked if a removed activity is running..
        /// </summary>
        internal static string InvalidActivityToBlockUpdate {
            get {
                return ResourceManager.GetString("InvalidActivityToBlockUpdate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Activity &apos;{0}&apos; is not a public member of updatedWorkflowDefinition. Please make sure this activity is part of the updated workflow definition. If this activity has been removed as part of the update, you do not need to block update explicitly; update is automatically blocked if a removed activity is running..
        /// </summary>
        internal static string InvalidActivityToBlockUpdateServices {
            get {
                return ResourceManager.GetString("InvalidActivityToBlockUpdateServices", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The number {0} argument expression of type &apos;{1}&apos; is not valid..
        /// </summary>
        internal static string InvalidArgumentExpression {
            get {
                return ResourceManager.GetString("InvalidArgumentExpression", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid async Begin method signature for method {0} in type {1}. Your begin method must take an AsyncCallback and an object as the last two arguments and return an IAsyncResult..
        /// </summary>
        internal static string InvalidAsyncBeginMethodSignature {
            get {
                return ResourceManager.GetString("InvalidAsyncBeginMethodSignature", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid async Cancel method signature for method {0} in type {1}. Your cancel method must take no arguments and return void..
        /// </summary>
        internal static string InvalidAsyncCancelMethodSignature {
            get {
                return ResourceManager.GetString("InvalidAsyncCancelMethodSignature", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid async End method signature for method {0} in type {1}. Your end method must take an IAsyncResult as the last argument. .
        /// </summary>
        internal static string InvalidAsyncEndMethodSignature {
            get {
                return ResourceManager.GetString("InvalidAsyncEndMethodSignature", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An incorrect IAsyncResult was provided to an &apos;End&apos; method. The IAsyncResult object passed to &apos;End&apos; must be the one returned from the matching &apos;Begin&apos; or passed to the callback provided to &apos;Begin&apos;..
        /// </summary>
        internal static string InvalidAsyncResult {
            get {
                return ResourceManager.GetString("InvalidAsyncResult", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An incorrect implementation of the IAsyncResult interface may be returning incorrect values from the CompletedSynchronously property or calling the AsyncCallback more than once. The type {0} could be the incorrect implementation..
        /// </summary>
        internal static string InvalidAsyncResultImplementation {
            get {
                return ResourceManager.GetString("InvalidAsyncResultImplementation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An incorrect implementation of the IAsyncResult interface may be returning incorrect values from the CompletedSynchronously property or calling the AsyncCallback more than once..
        /// </summary>
        internal static string InvalidAsyncResultImplementationGeneric {
            get {
                return ResourceManager.GetString("InvalidAsyncResultImplementationGeneric", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A valid {0} data must be passed for the callback state object..
        /// </summary>
        internal static string InvalidCallbackState {
            get {
                return ResourceManager.GetString("InvalidCallbackState", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Compensate activity &apos;{0}&apos; with an unset &apos;Target&apos; InArgument can only be used within the context of a Compensation/Confirmation/Cancellation handler..
        /// </summary>
        internal static string InvalidCompensateActivityUsage {
            get {
                return ResourceManager.GetString("InvalidCompensateActivityUsage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Variable bound to the &apos;Target&apos; InArgument has a null value. The &apos;Target&apos; InArgument should be set using a valid CompensationToken obtained from a CompensableActivity. Otherwise, if default Compensation/Confirmation usage is desired, do not set the &apos;Target&apos; InArgument and use the &apos;{0}&apos; activity within the context of a Compensation/Confirmation/Cancellation handler..
        /// </summary>
        internal static string InvalidCompensationToken {
            get {
                return ResourceManager.GetString("InvalidCompensationToken", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Confirm activity &apos;{0}&apos; with an unset &apos;Target&apos; InArgument can only be used within the context of a Compensation/Confirmation/Cancellation handler..
        /// </summary>
        internal static string InvalidConfirmActivityUsage {
            get {
                return ResourceManager.GetString("InvalidConfirmActivityUsage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A valid MessageContext could not be obtained when the bookmark for receive operation &apos;{0}&apos; was resumed..
        /// </summary>
        internal static string InvalidDataFromReceiveBookmarkState {
            get {
                return ResourceManager.GetString("InvalidDataFromReceiveBookmarkState", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A valid CorrelationMessageProperty or Fault could not be obtained when the bookmark for send operation &apos;{0}&apos; was resumed..
        /// </summary>
        internal static string InvalidDataFromSendBookmarkState {
            get {
                return ResourceManager.GetString("InvalidDataFromSendBookmarkState", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The argument direction for the argument in collection &apos;{0}&apos; at position {1} is incorrect. The direction specified is &apos;{2}&apos; whereas the expected direction is &apos;{3}&apos;..
        /// </summary>
        internal static string InvalidDirectionForArgument {
            get {
                return ResourceManager.GetString("InvalidDirectionForArgument", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This property descriptor is invalid. The provided component does not contain a property corresponding to this descriptor ({0})..
        /// </summary>
        internal static string InvalidDynamicActivityProperty {
            get {
                return ResourceManager.GetString("InvalidDynamicActivityProperty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to EvaluationOrder value is invalid. Evaluation order values must be zero based, increasing in order and unique. Use -1 to indicate that evaluation order is not set..
        /// </summary>
        internal static string InvalidEvaluationOrderValue {
            get {
                return ResourceManager.GetString("InvalidEvaluationOrderValue", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; is not a valid activity execution callback. The execution callback used by &apos;{1}&apos; must be an instance method on &apos;{1}&apos;..
        /// </summary>
        internal static string InvalidExecutionCallback {
            get {
                return ResourceManager.GetString("InvalidExecutionCallback", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A Location cannot be generated from an Expression of type &apos;{0}&apos;..
        /// </summary>
        internal static string InvalidExpressionForLocation {
            get {
                return ResourceManager.GetString("InvalidExpressionForLocation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &apos;Expression&apos; property of type &apos;{0}&apos; is invalid..
        /// </summary>
        internal static string InvalidExpressionProperty {
            get {
                return ResourceManager.GetString("InvalidExpressionProperty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An invalid fileName was specified for activity {0}.
        /// </summary>
        internal static string InvalidFileName {
            get {
                return ResourceManager.GetString("InvalidFileName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The type &apos;{0}&apos; contains some invalid generic type information..
        /// </summary>
        internal static string InvalidGenericTypeInfo {
            get {
                return ResourceManager.GetString("InvalidGenericTypeInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The PersistableIdleAction returned was out of range.  It must be either None, Unload, or Persist..
        /// </summary>
        internal static string InvalidIdleAction {
            get {
                return ResourceManager.GetString("InvalidIdleAction", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to In order for an implementation map to be directly applied to a workflow instance, the root of the definition must not have any public/imported children or public/imported delegates..
        /// </summary>
        internal static string InvalidImplementationAsWorkflowRoot {
            get {
                return ResourceManager.GetString("InvalidImplementationAsWorkflowRoot", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to In order for an implementation map to be directly applied to a workflow instance, the root of the definition must not have any public children. The instance currently has one or more public children running..
        /// </summary>
        internal static string InvalidImplementationAsWorkflowRootForRuntimeState {
            get {
                return ResourceManager.GetString("InvalidImplementationAsWorkflowRootForRuntimeState", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to In order for an implementation map to be directly applied to a workflow instance, the implementation map must indicate that there is no change to arguments. The implementation map indicates that arguments of the activity definition have changed..
        /// </summary>
        internal static string InvalidImplementationAsWorkflowRootForRuntimeStateBecauseArgumentsChanged {
            get {
                return ResourceManager.GetString("InvalidImplementationAsWorkflowRootForRuntimeStateBecauseArgumentsChanged", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The provided implementation map does not match the activity&apos;s definition. Please ensure that the version of the activity referenced by the updated workflow is the same version targeted by the provided map.]D;]A;    ]D;]A;Troubleshooting details: Member count in map: &apos;{0}&apos;; member count in definition: &apos;{1}&apos;..
        /// </summary>
        internal static string InvalidImplementationMap {
            get {
                return ResourceManager.GetString("InvalidImplementationMap", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The implementation map provided for activity &apos;{0}&apos; via DynamicUpdateMapBuilder.LookupImplementationMap cannot be used because the activity does not have any implementation children. Please verify that SetImplementationMap was called on the right activity..
        /// </summary>
        internal static string InvalidImplementationMapAssociation {
            get {
                return ResourceManager.GetString("InvalidImplementationMapAssociation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The implementation map provided for activity &apos;{0}&apos; via DynamicUpdateServices.SetImplementationMap cannot be used because the activity does not have any implementation children. Please verify that SetImplementationMap was called on the right activity..
        /// </summary>
        internal static string InvalidImplementationMapAssociationServices {
            get {
                return ResourceManager.GetString("InvalidImplementationMapAssociationServices", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to When building the update map, the wrong implementation map was provided for this activity..
        /// </summary>
        internal static string InvalidImplementationMapRuntime {
            get {
                return ResourceManager.GetString("InvalidImplementationMapRuntime", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An invalid instance ID of all zeroes (Guid.Empty) was used to load an instance..
        /// </summary>
        internal static string InvalidInstanceId {
            get {
                return ResourceManager.GetString("InvalidInstanceId", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The persistence provider implementation of InstanceStore in use is invalid. It reported loading an instance with an invalid InstanceState value..
        /// </summary>
        internal static string InvalidInstanceState {
            get {
                return ResourceManager.GetString("InvalidInstanceState", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An invalid key was used to load or create an instance..
        /// </summary>
        internal static string InvalidKey {
            get {
                return ResourceManager.GetString("InvalidKey", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An invalid key of all zeroes, such as Guid.Empty, was passed as an argument..
        /// </summary>
        internal static string InvalidKeyArgument {
            get {
                return ResourceManager.GetString("InvalidKeyArgument", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid location expression: expected &quot;[...]5D;&quot;..
        /// </summary>
        internal static string InvalidLocationExpression {
            get {
                return ResourceManager.GetString("InvalidLocationExpression", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The supplied lock renewal period {0} is less than the minimum lock renewal period {1}..
        /// </summary>
        internal static string InvalidLockRenewalPeriod {
            get {
                return ResourceManager.GetString("InvalidLockRenewalPeriod", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The instanceVersion passed to InstancePersistenceContext.BindAcquiredLock must be zero if the persistence provider doesn&apos;t implement lock versioning, or greater than zero if it does..
        /// </summary>
        internal static string InvalidLockToken {
            get {
                return ResourceManager.GetString("InvalidLockToken", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid L-value expression..
        /// </summary>
        internal static string InvalidLValueExpression {
            get {
                return ResourceManager.GetString("InvalidLValueExpression", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The map at position &apos;{0}&apos; (zero-based) for Activity ID &apos;{1}&apos; does not match the map(s) that preceded it. Please ensure that all maps represent successive updates to the same workflow definition.]D;]A;    ]D;]A;Troubleshooting details: {2}.
        /// </summary>
        internal static string InvalidMergeMap {
            get {
                return ResourceManager.GetString("InvalidMergeMap", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Expected Original Argument Count = &apos;{0}&apos;, Actual = &apos;{1}&apos;..
        /// </summary>
        internal static string InvalidMergeMapArgumentCount {
            get {
                return ResourceManager.GetString("InvalidMergeMapArgumentCount", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unexpected change in arguments (name, direction, type, or order)..
        /// </summary>
        internal static string InvalidMergeMapArgumentsChanged {
            get {
                return ResourceManager.GetString("InvalidMergeMapArgumentsChanged", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Expected Original Argument Count = &apos;{0}&apos;, Public Variable Count = &apos;{1}&apos;, Private Variable Count = &apos;{2}&apos;. Actual Original Argument Count = &apos;{3}&apos;, Public Variable Count = &apos;{4}&apos;, Private Variable Count = &apos;{5}&apos;..
        /// </summary>
        internal static string InvalidMergeMapEnvironmentCount {
            get {
                return ResourceManager.GetString("InvalidMergeMapEnvironmentCount", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Expected ForImplementation = &apos;{0}&apos;, Actual = &apos;{1}&apos;..
        /// </summary>
        internal static string InvalidMergeMapForImplementation {
            get {
                return ResourceManager.GetString("InvalidMergeMapForImplementation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Expected Original Member Count = &apos;{0}&apos;, Actual = &apos;{1}&apos;..
        /// </summary>
        internal static string InvalidMergeMapMemberCount {
            get {
                return ResourceManager.GetString("InvalidMergeMapMemberCount", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specified value for metadata property &apos;{0}&apos; must be of type {1}..
        /// </summary>
        internal static string InvalidMetadataValue {
            get {
                return ResourceManager.GetString("InvalidMetadataValue", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A null value was returned from an async &apos;Begin&apos; method or passed to an AsyncCallback. Async &apos;Begin&apos; implementations must return a non-null IAsyncResult and pass the same IAsyncResult object as the parameter to the AsyncCallback..
        /// </summary>
        internal static string InvalidNullAsyncResult {
            get {
                return ResourceManager.GetString("InvalidNullAsyncResult", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The OriginalWorkflowDefinition provided to the map builder is invalid for implementation map creation because it does not have any implementation children..
        /// </summary>
        internal static string InvalidOriginalWorkflowDefinitionForImplementationMapCreation {
            get {
                return ResourceManager.GetString("InvalidOriginalWorkflowDefinitionForImplementationMapCreation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The number {0} parameter information is invalid in type of &apos;{1}&apos;..
        /// </summary>
        internal static string InvalidParameterInfo {
            get {
                return ResourceManager.GetString("InvalidParameterInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A workflow cannot be prepared for runtime if any of SingleLevel, SkipValidatingRootConfiguration or OnlyUseAdditionalConstraints is set on ValidationSettings..
        /// </summary>
        internal static string InvalidPrepareForRuntimeValidationSettings {
            get {
                return ResourceManager.GetString("InvalidPrepareForRuntimeValidationSettings", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The property ({0}) is either invalid or not defined..
        /// </summary>
        internal static string InvalidProperty {
            get {
                return ResourceManager.GetString("InvalidProperty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The type ‘{0}’ of property ‘{1}’ could not be resolved..
        /// </summary>
        internal static string InvalidPropertyType {
            get {
                return ResourceManager.GetString("InvalidPropertyType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Receive is in a state in which instance update is not supported.  Update can be made only when the Receive is waiting for a request message on the server side..
        /// </summary>
        internal static string InvalidReceiveStateForDU {
            get {
                return ResourceManager.GetString("InvalidReceiveStateForDU", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The root map at position &apos;{0}&apos; (zero-based) does not match the map(s) that preceded it. Please ensure that all maps represent successive updates to the same workflow definition.]D;]A;    ]D;]A;Troubleshooting details: {1}.
        /// </summary>
        internal static string InvalidRootMergeMap {
            get {
                return ResourceManager.GetString("InvalidRootMergeMap", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The supplied runnable instances detection period {0} is less than the minimum period allowed {1}..
        /// </summary>
        internal static string InvalidRunnableInstancesDetectionPeriod {
            get {
                return ResourceManager.GetString("InvalidRunnableInstancesDetectionPeriod", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The value supplied was not valid runtime state..
        /// </summary>
        internal static string InvalidRuntimeState {
            get {
                return ResourceManager.GetString("InvalidRuntimeState", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Object synchronization method was called from an unsynchronized block of code..
        /// </summary>
        internal static string InvalidSemaphoreExit {
            get {
                return ResourceManager.GetString("InvalidSemaphoreExit", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to WorkflowServiceHost requires that the serviceImplementation provided is an Activity or a WorkflowService..
        /// </summary>
        internal static string InvalidServiceImplementation {
            get {
                return ResourceManager.GetString("InvalidServiceImplementation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Column number should be greater than 0 (1-based).  {0} = {1} is invalid..
        /// </summary>
        internal static string InvalidSourceLocationColumn {
            get {
                return ResourceManager.GetString("InvalidSourceLocationColumn", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Line number should be greater than 0 (1-based). {0} = {1} is invalid..
        /// </summary>
        internal static string InvalidSourceLocationLineNumber {
            get {
                return ResourceManager.GetString("InvalidSourceLocationLineNumber", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The IAsyncResult passed into the async callback does not have a valid AsyncState..
        /// </summary>
        internal static string InvalidStateForAsyncCallback {
            get {
                return ResourceManager.GetString("InvalidStateForAsyncCallback", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The async result state context, which was provided, in invalid..
        /// </summary>
        internal static string InvalidStateInAsyncResult {
            get {
                return ResourceManager.GetString("InvalidStateInAsyncResult", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid TypeConverter usage..
        /// </summary>
        internal static string InvalidTypeConverterUsage {
            get {
                return ResourceManager.GetString("InvalidTypeConverterUsage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The type specified for the argument in collection &apos;{0}&apos; at position {1} does not match the expected type. The type specified is &apos;{2}&apos; and the expected type is &apos;{3}&apos;..
        /// </summary>
        internal static string InvalidTypeForArgument {
            get {
                return ResourceManager.GetString("InvalidTypeForArgument", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The UnhandledExceptionAction returned was out of range.  It must be either Abort, Cancel, or Terminate..
        /// </summary>
        internal static string InvalidUnhandledExceptionAction {
            get {
                return ResourceManager.GetString("InvalidUnhandledExceptionAction", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The UpdatedWorkflowDefinition provided to the map builder is invalid for implementation map creation because it does not have any implementation children..
        /// </summary>
        internal static string InvalidUpdatedWorkflowDefinitionForImplementationMapCreation {
            get {
                return ResourceManager.GetString("InvalidUpdatedWorkflowDefinitionForImplementationMapCreation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The update map does not match the workflow definition. Please make sure that this is the correct map for this definition, and that the serialized map has not been manually altered.]D;]A;    ]D;]A;Troubleshooting details: {0}.
        /// </summary>
        internal static string InvalidUpdateMap {
            get {
                return ResourceManager.GetString("InvalidUpdateMap", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Settings property has invalid value. Set the Settings property to either an empty string or &quot;Assembly references and imported namespaces serialized as XML namespaces&quot; string..
        /// </summary>
        internal static string InvalidVisualBasicSettingsValue {
            get {
                return ResourceManager.GetString("InvalidVisualBasicSettingsValue", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; is not a valid identifier in XAML..
        /// </summary>
        internal static string InvalidXamlMember {
            get {
                return ResourceManager.GetString("InvalidXamlMember", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An exception was thrown in the method called by the activity &apos;{0}&apos;. {1}.
        /// </summary>
        internal static string InvokedMethodThrewException {
            get {
                return ResourceManager.GetString("InvokedMethodThrewException", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to InvokeMethod &apos;{0}&apos; - method does not use asynchronous pattern..
        /// </summary>
        internal static string InvokeMethodDoesNotUseAsyncPattern {
            get {
                return ResourceManager.GetString("InvokeMethodDoesNotUseAsyncPattern", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to InvokeMethod &apos;{0}&apos; - method is not Static..
        /// </summary>
        internal static string InvokeMethodIsNotStatic {
            get {
                return ResourceManager.GetString("InvokeMethodIsNotStatic", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to InvokeMethod &apos;{0}&apos; - method is Static..
        /// </summary>
        internal static string InvokeMethodIsStatic {
            get {
                return ResourceManager.GetString("InvokeMethodIsStatic", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to InvokeMethod &apos;{0}&apos; - method uses asynchronous pattern of &apos;{1}&apos; and &apos;{2}&apos;..
        /// </summary>
        internal static string InvokeMethodUseAsyncPattern {
            get {
                return ResourceManager.GetString("InvokeMethodUseAsyncPattern", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The IsolationLevel of a nested TransactionScope activity must be equal to that of its parent..
        /// </summary>
        internal static string IsolationLevelValidation {
            get {
                return ResourceManager.GetString("IsolationLevelValidation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;expression&apos; parameter must be of type Activity..
        /// </summary>
        internal static string ITextExpressionParameterMustBeActivity {
            get {
                return ResourceManager.GetString("ITextExpressionParameterMustBeActivity", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The persistence provider implementation of InstanceStore in use is invalid. It reported associating a key to an instance which already had the key associated to it..
        /// </summary>
        internal static string KeyAlreadyAssociated {
            get {
                return ResourceManager.GetString("KeyAlreadyAssociated", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The persistence provider implementation of InstanceStore in use is invalid. It reported completing a key which was already completed..
        /// </summary>
        internal static string KeyAlreadyCompleted {
            get {
                return ResourceManager.GetString("KeyAlreadyCompleted", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The persistence provider implementation of InstanceStore in use is invalid. It reported disassociating a key which was associated to the present instance nor completed..
        /// </summary>
        internal static string KeyAlreadyUnassociated {
            get {
                return ResourceManager.GetString("KeyAlreadyUnassociated", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Mutating a key collection derived from a dictionary is not allowed..
        /// </summary>
        internal static string KeyCollectionUpdatesNotAllowed {
            get {
                return ResourceManager.GetString("KeyCollectionUpdatesNotAllowed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The execution of an InstancePersistenceCommand was interrupted by a key collision..
        /// </summary>
        internal static string KeyCollisionDefault {
            get {
                return ResourceManager.GetString("KeyCollisionDefault", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The execution of an InstancePersistenceCommand was interrupted by a key collision. The instance key with value &apos;{1}&apos; could not be associated to instance &apos;{0}&apos; because it is already associated to a different instance, &apos;{2}&apos;..
        /// </summary>
        internal static string KeyCollisionSpecific {
            get {
                return ResourceManager.GetString("KeyCollisionSpecific", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The execution of an InstancePersistenceCommand was interrupted by a key collision. The instance key with value &apos;{0}&apos; could not be associated to the instance because it is already associated to a different instance..
        /// </summary>
        internal static string KeyCollisionSpecificKeyOnly {
            get {
                return ResourceManager.GetString("KeyCollisionSpecificKeyOnly", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The execution of an InstancePersistenceCommand was interrupted because the instance key has already been completed..
        /// </summary>
        internal static string KeyCompleteDefault {
            get {
                return ResourceManager.GetString("KeyCompleteDefault", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The execution of an InstancePersistenceCommand was interrupted because the instance key &apos;{0}&apos; has already been completed..
        /// </summary>
        internal static string KeyCompleteSpecific {
            get {
                return ResourceManager.GetString("KeyCompleteSpecific", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The persistence provider implementation of InstanceStore in use is invalid. It reported completing or modifying a key which is not associated to the present instance..
        /// </summary>
        internal static string KeyNotAssociated {
            get {
                return ResourceManager.GetString("KeyNotAssociated", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The persistence provider implementation of InstanceStore in use is invalid. It reported disassociating a key which was not yet completed..
        /// </summary>
        internal static string KeyNotCompleted {
            get {
                return ResourceManager.GetString("KeyNotCompleted", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The given key was not present in the dictionary..
        /// </summary>
        internal static string KeyNotFoundInDictionary {
            get {
                return ResourceManager.GetString("KeyNotFoundInDictionary", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The execution of an InstancePersistenceCommand was interrupted because the instance key was not associated to an instance. This can occur because the instance or key has been cleaned up, or because the key is invalid. The key may be invalid if the message it was generated from was sent at the wrong time or contained incorrect correlation data..
        /// </summary>
        internal static string KeyNotReadyDefault {
            get {
                return ResourceManager.GetString("KeyNotReadyDefault", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The execution of an InstancePersistenceCommand was interrupted because the instance key &apos;{0}&apos; was not associated to an instance. This can occur because the instance or key has been cleaned up, or because the key is invalid. The key may be invalid if the message it was generated from was sent at the wrong time or contained incorrect correlation data..
        /// </summary>
        internal static string KeyNotReadySpecific {
            get {
                return ResourceManager.GetString("KeyNotReadySpecific", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The return type of the provided Lambda Expression should not be null or void..
        /// </summary>
        internal static string LambdaExpressionReturnTypeInvalid {
            get {
                return ResourceManager.GetString("LambdaExpressionReturnTypeInvalid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The provided expression must be a LambdaExpression. .
        /// </summary>
        internal static string LambdaExpressionTypeRequired {
            get {
                return ResourceManager.GetString("LambdaExpressionTypeRequired", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This workflow contains lambda expressions specified in code. These expressions are not XAML serializable. In order to make your workflow XAML-serializable, either use VisualBasicValue/VisualBasicReference or ExpressionServices.Convert(lambda). This will convert your lambda expressions into expression activities..
        /// </summary>
        internal static string LambdaNotXamlSerializable {
            get {
                return ResourceManager.GetString("LambdaNotXamlSerializable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to © .NET Foundation and Contributors.
        /// </summary>
        internal static string LegalCopyright {
            get {
                return ResourceManager.GetString("LegalCopyright", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified line number for activity {0} is too large to be supported in Partial Trust.
        /// </summary>
        internal static string LineNumberTooLarge {
            get {
                return ResourceManager.GetString("LineNumberTooLarge", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Literal only supports value types and the immutable type {0}.  The type {1} cannot be used as a literal..
        /// </summary>
        internal static string LiteralsMustBeValueTypesOrImmutableTypes {
            get {
                return ResourceManager.GetString("LiteralsMustBeValueTypesOrImmutableTypes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The persistence provider implementation of InstanceStore in use is invalid. It reported loading an InstanceValue with InstanceValueOptions.WriteOnly set. Write-only values should not be loaded..
        /// </summary>
        internal static string LoadedWriteOnlyValue {
            get {
                return ResourceManager.GetString("LoadedWriteOnlyValue", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An attempt to load an instance was aborted..
        /// </summary>
        internal static string LoadingAborted {
            get {
                return ResourceManager.GetString("LoadingAborted", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to WorkflowApplication requires a valid InstanceStore to be set before Load or LoadRunnableInstance can be called..
        /// </summary>
        internal static string LoadingWorkflowApplicationRequiresInstanceStore {
            get {
                return ResourceManager.GetString("LoadingWorkflowApplicationRequiresInstanceStore", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If LoadWorkflowByInstanceKeyCommand.AssociateLookupKeyToInstanceId is not specified, the LookupInstanceKey must already be associated to an instance, or the LoadWorkflowByInstanceKeyCommand will fail. For this reason, it is invalid to also specify the LookupInstanceKey in the InstanceKeysToAssociate collection if AssociateLookupKeyToInstanceId isn&apos;t set..
        /// </summary>
        internal static string LoadOpAssociateKeysCannotContainLookupKey {
            get {
                return ResourceManager.GetString("LoadOpAssociateKeysCannotContainLookupKey", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If LoadByKeyOperation.InstanceIdForFreeKey is specified, AcceptUninitializedInstance must be set to true. If the key is free, it will be associated to an uninitialized instance with the instance ID provided..
        /// </summary>
        internal static string LoadOpFreeKeyRequiresAcceptUninitialized {
            get {
                return ResourceManager.GetString("LoadOpFreeKeyRequiresAcceptUninitialized", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The key used to look up an instance, LoadByKeyOperation.LookupKey, must not be all-zeros, such as Guid.Empty..
        /// </summary>
        internal static string LoadOpKeyMustBeValid {
            get {
                return ResourceManager.GetString("LoadOpKeyMustBeValid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Location expression &apos;{0}&apos; could not be resolved to a variable or property.  Ensure location expression resolves to a Variable or Property defined in the scope hierarchy..
        /// </summary>
        internal static string LocationExpressionCouldNotBeResolved {
            get {
                return ResourceManager.GetString("LocationExpressionCouldNotBeResolved", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The location with name &apos;{0}&apos; cannot be retrieved as a Location of type &apos;{1}&apos; because it is a Location of type &apos;{2}&apos;.  The types must match exactly because a location provides both read and write access..
        /// </summary>
        internal static string LocationTypeMismatch {
            get {
                return ResourceManager.GetString("LocationTypeMismatch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Timeout trying to acquire the instance lock.  The operation did not complete within the allotted timeout of {0}. The time allotted to this operation may have been a portion of a longer timeout..
        /// </summary>
        internal static string LockRetryTimeout {
            get {
                return ResourceManager.GetString("LockRetryTimeout", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot claim lock within the allotted timeout of {0}. The time allotted to this operation may have been a portion of a longer timeout..
        /// </summary>
        internal static string LockTimeoutExceptionMessage {
            get {
                return ResourceManager.GetString("LockTimeoutExceptionMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Update Map Entry not found for Activity &apos;{0}&apos;..
        /// </summary>
        internal static string MapEntryNotFound {
            get {
                return ResourceManager.GetString("MapEntryNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only activities which have been requested to cancel can call MarkCanceled.  Check ActivityInstance.HasCancelBeenRequested before calling this method..
        /// </summary>
        internal static string MarkCanceledOnlyCallableIfCancelRequested {
            get {
                return ResourceManager.GetString("MarkCanceledOnlyCallableIfCancelRequested", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Giving up retrying a SQL command as the maximum number of retries have been performed..
        /// </summary>
        internal static string MaximumRetriesExceededForSqlCommand {
            get {
                return ResourceManager.GetString("MaximumRetriesExceededForSqlCommand", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The system hit the limit set for throttle &apos;MaxConcurrentInstances&apos;. Limit for this throttle was set to {0}. Throttle value can be changed by modifying attribute &apos;maxConcurrentInstances&apos; in serviceThrottle element or by modifying &apos;MaxConcurrentInstances&apos; property on behavior ServiceThrottlingBehavior..
        /// </summary>
        internal static string MaxInstancesExceeded {
            get {
                return ResourceManager.GetString("MaxInstancesExceeded", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The throttle &apos;MaxPendingMessagesPerChannel&apos; limit of  &apos;{0}&apos; was hit. To increase this limit, adjust the MaxPendingMessagesPerChannel property on BufferedReceiveServiceBehavior..
        /// </summary>
        internal static string MaxPendingMessagesPerChannelExceeded {
            get {
                return ResourceManager.GetString("MaxPendingMessagesPerChannelExceeded", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Throttle limit must be greater than zero. To disable, set to Int32.MaxValue..
        /// </summary>
        internal static string MaxPendingMessagesPerChannelMustBeGreaterThanZero {
            get {
                return ResourceManager.GetString("MaxPendingMessagesPerChannelMustBeGreaterThanZero", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An InstancePersistenceCommand which returns true from AutomaticallyAcquiringLock must also override Validate to throw an InvalidOperationException if the command is executed using an InstanceHandle not bound to an InstanceOwner..
        /// </summary>
        internal static string MayBindLockCommandShouldValidateOwner {
            get {
                return ResourceManager.GetString("MayBindLockCommandShouldValidateOwner", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; in {1} activity &apos;{2}&apos; cannot be null..
        /// </summary>
        internal static string MemberCannotBeNull {
            get {
                return ResourceManager.GetString("MemberCannotBeNull", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The member &apos;{0}&apos; of type &apos;{1}&apos; is read only. It cannot be a LValue..
        /// </summary>
        internal static string MemberIsReadOnly {
            get {
                return ResourceManager.GetString("MemberIsReadOnly", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Member named &apos;{0}&apos; is not found on type &apos;{1}&apos;..
        /// </summary>
        internal static string MemberNotFound {
            get {
                return ResourceManager.GetString("MemberNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ActivityXamlServices encountered a member ({0}) that is not supported by DynamicActivity..
        /// </summary>
        internal static string MemberNotSupportedByActivityXamlServices {
            get {
                return ResourceManager.GetString("MemberNotSupportedByActivityXamlServices", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Message content is null, which does not match the operation &apos;{0}&apos; in contract &apos;{1}&apos;.
        /// </summary>
        internal static string MessageCannotBeEmpty {
            get {
                return ResourceManager.GetString("MessageCannotBeEmpty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Operation &apos;{0}&apos; on implemented contract &apos;{1}&apos; cannot contain more than one parameter for message contract..
        /// </summary>
        internal static string MessageContentCannotHaveMoreThanOneParameter {
            get {
                return ResourceManager.GetString("MessageContentCannotHaveMoreThanOneParameter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Custom message headers in MessageDescription is not supported. Please use a MessageContract-decorated type in operation &apos;{0}&apos;, contract &apos;{1}&apos;..
        /// </summary>
        internal static string MessageHeaderNotSupported {
            get {
                return ResourceManager.GetString("MessageHeaderNotSupported", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Custom message properties in MessageDescription is not supported. Please use a MessageContract-decorated type in operation &apos;{0}&apos;, contract &apos;{1}&apos;..
        /// </summary>
        internal static string MessagePropertyIsNotSupported {
            get {
                return ResourceManager.GetString("MessagePropertyIsNotSupported", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Receive specified a System.ServiceModel.Channels.Message type in ReceiveMessageContent which is different from  the message type &apos;{0}&apos; specified in operation &apos;{1}&apos; of the implemented contract &apos;{2}&apos;..
        /// </summary>
        internal static string MessageTypeMismatch {
            get {
                return ResourceManager.GetString("MessageTypeMismatch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Response message version information could not be found..
        /// </summary>
        internal static string MessageVersionInformationNotFound {
            get {
                return ResourceManager.GetString("MessageVersionInformationNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A null name was provided in a named collection (dictionary) of InstanceValues. Null is not a valid name for an InstanceValue..
        /// </summary>
        internal static string MetadataCannotContainNullKey {
            get {
                return ResourceManager.GetString("MetadataCannotContainNullKey", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A null value was provided in a named collection (dictionary) of InstanceValues. The name provided for the null value was {0}. Null is not a valid InstanceValue. To specify a null value, use an instance of InstanceValue with null data by passing null to the InstanceValue constructor. To indicate that a named value should be deleted, use InstanceValue.DeletedValue..
        /// </summary>
        internal static string MetadataCannotContainNullValue {
            get {
                return ResourceManager.GetString("MetadataCannotContainNullValue", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Method property of type &apos;{0}&apos; is required..
        /// </summary>
        internal static string MethodInfoRequired {
            get {
                return ResourceManager.GetString("MethodInfoRequired", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name property of type &apos;{0}&apos; is required..
        /// </summary>
        internal static string MethodNameRequired {
            get {
                return ResourceManager.GetString("MethodNameRequired", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Argument associated with the name &apos;{0}&apos; is null in the &apos;{1}&apos; collection..
        /// </summary>
        internal static string MissingArgument {
            get {
                return ResourceManager.GetString("MissingArgument", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Endpoint with Name=&apos;{0}&apos; and ServiceContract &apos;{1}&apos; has no Binding. Please provide a Binding to this Endpoint..
        /// </summary>
        internal static string MissingBindingInEndpoint {
            get {
                return ResourceManager.GetString("MissingBindingInEndpoint", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Body property of the current WorkflowService is null. Please provide a Body to this WorkflowService..
        /// </summary>
        internal static string MissingBodyInWorkflowService {
            get {
                return ResourceManager.GetString("MissingBodyInWorkflowService", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Root activity has empty DisplayName. Please do not set root activity&apos;s DisplayName to null or empty string, or provide a Name for the WorkflowService..
        /// </summary>
        internal static string MissingDisplayNameInRootActivity {
            get {
                return ResourceManager.GetString("MissingDisplayNameInRootActivity", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Missing known type &apos;{0}&apos; for operation &apos;{1}&apos; in contract &apos;{2}&apos;..
        /// </summary>
        internal static string MissingKnownTypes {
            get {
                return ResourceManager.GetString("MissingKnownTypes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Argument of type &apos;{0}&apos; does not have a name. Name property should be specified for items in this collection..
        /// </summary>
        internal static string MissingNameProperty {
            get {
                return ResourceManager.GetString("MissingNameProperty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The OperationName property must be set in activity &apos;{0}&apos;..
        /// </summary>
        internal static string MissingOperationName {
            get {
                return ResourceManager.GetString("MissingOperationName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Parameters collection does not contain parameter &apos;{0}&apos; which is specified on operation &apos;{1}&apos; in contract &apos;{2}&apos;..
        /// </summary>
        internal static string MissingParameter {
            get {
                return ResourceManager.GetString("MissingParameter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The ServiceContractName property must be set in activity &apos;{0}&apos; with OperationName=&apos;{1}&apos;..
        /// </summary>
        internal static string MissingServiceContractName {
            get {
                return ResourceManager.GetString("MissingServiceContractName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Indexer property {0} for type {1} does not expose a setter accessor..
        /// </summary>
        internal static string MissingSetAccessorForIndexer {
            get {
                return ResourceManager.GetString("MissingSetAccessorForIndexer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Endpoint with Name=&apos;{0}&apos; and ServiceContract &apos;{1}&apos; has a null or empty Uri property. A Uri for this Endpoint must be provided..
        /// </summary>
        internal static string MissingUriInEndpoint {
            get {
                return ResourceManager.GetString("MissingUriInEndpoint", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Data Contract is specified for operation &apos;{0}&apos; in contract &apos;{1}&apos;, please use ReceiveParameterContent for Receive activity, and SendParameterContent for SendReply activity to match the contract definition..
        /// </summary>
        internal static string MisuseOfMessageContent {
            get {
                return ResourceManager.GetString("MisuseOfMessageContent", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Message contract type is specified for operation &apos;{0}&apos; in contract &apos;{1}&apos;, please use ReceiveMessageContent for Receive activity, and SendMessageContent for SendReply activity to match the contract definition. .
        /// </summary>
        internal static string MisuseOfParameterContent {
            get {
                return ResourceManager.GetString("MisuseOfParameterContent", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to StateMachine does not support Dynamic Update if the activity property in the original definition is reassigned to another property within the State or its Transition..
        /// </summary>
        internal static string MovingActivitiesInStateBlockDU {
            get {
                return ResourceManager.GetString("MovingActivitiesInStateBlockDU", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Multidimensional arrays are not supported..
        /// </summary>
        internal static string MultiDimensionalArraysNotSupported {
            get {
                return ResourceManager.GetString("MultiDimensionalArraysNotSupported", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Flowchart does not support Dynamic Update when more than one FlowNode shares the same child activity..
        /// </summary>
        internal static string MultipleFlowNodesSharingSameChildBlockDU {
            get {
                return ResourceManager.GetString("MultipleFlowNodesSharingSameChildBlockDU", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SqlWorkflowInstanceStore does not support creating more than one lock owner concurrently. Consider setting InstanceStore.DefaultInstanceOwner to share the store among many applications..
        /// </summary>
        internal static string MultipleLockOwnersNotSupported {
            get {
                return ResourceManager.GetString("MultipleLockOwnersNotSupported", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The following overload groups are configured: {0}. Only one overload group should have its arguments configured..
        /// </summary>
        internal static string MultipleOverloadGroupsConfigured {
            get {
                return ResourceManager.GetString("MultipleOverloadGroupsConfigured", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The workflow definition does not have an attached copy of its original definition. Before making updates to the workflow, call DynamicUpdateServices.PrepareForUpdate to save a copy of the original definition..
        /// </summary>
        internal static string MustCallPrepareBeforeFinalize {
            get {
                return ResourceManager.GetString("MustCallPrepareBeforeFinalize", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You must cancel the previous timer before setting a new one..
        /// </summary>
        internal static string MustCancelOldTimer {
            get {
                return ResourceManager.GetString("MustCancelOldTimer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Reference expressions cannot end with Conversion. The provided expression&apos;s type must exactly match the type T of VisualBasicReference&lt;T&gt; or LambdaReference&lt;T&gt;..
        /// </summary>
        internal static string MustMatchReferenceExpressionReturnType {
            get {
                return ResourceManager.GetString("MustMatchReferenceExpressionReturnType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The persistence provider implementation of InstanceStore in use is invalid. An ambient transaction (System.Transactions.Transaction.Current) is set on the thread calling InstancePersistenceContext.Execute or InstancePersistenceContext.BeginExecute, but commands have already executed during this execution episode with no transaction set. An ambient transaction can only be set on the first call to Execute or BeginExecute (and only if no other transaction is already set for the episode)..
        /// </summary>
        internal static string MustSetTransactionOnFirstCall {
            get {
                return ResourceManager.GetString("MustSetTransactionOnFirstCall", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Need to specify either connectionString or connectionStringName property..
        /// </summary>
        internal static string MustSpecifyConnectionStringOrName {
            get {
                return ResourceManager.GetString("MustSpecifyConnectionStringOrName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A name collision was detected for the name &apos;{0}&apos; provided by a persistence participant of type &apos;{1}&apos;. A value provided by the participant&apos;s CollectValues implementation uses the same name as another value provided by this participant or a different persistence participant. Fix the participant to use a different name to avoid the collision, or remove the participant from the workflow&apos;s extensions collection..
        /// </summary>
        internal static string NameCollisionOnCollect {
            get {
                return ResourceManager.GetString("NameCollisionOnCollect", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A name collision was detected for the name &apos;{0}&apos; provided by a persistence participant of type &apos;{1}&apos;. A value provided by the participant&apos;s MapValues implementation uses the same name as another value provided by this participant or a different persistence participant.  ix the participant to use a different name to avoid the collision, or remove the participant from the workflow&apos;s extensions collection..
        /// </summary>
        internal static string NameCollisionOnMap {
            get {
                return ResourceManager.GetString("NameCollisionOnMap", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The activity threw an exception from its UpdateInstance method: {0}.
        /// </summary>
        internal static string NativeActivityUpdateInstanceThrewException {
            get {
                return ResourceManager.GetString("NativeActivityUpdateInstanceThrewException", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A NativeActivityUpdateContext can only be accessed within the scope of the function it was passed into..
        /// </summary>
        internal static string NAUCDisposed {
            get {
                return ResourceManager.GetString("NAUCDisposed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &apos;NewArrayBounds requires integral arguments..
        /// </summary>
        internal static string NewArrayBoundsRequiresIntegralArguments {
            get {
                return ResourceManager.GetString("NewArrayBoundsRequiresIntegralArguments", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The result type of &apos;NewArray&apos; activity must be a concrete array type..
        /// </summary>
        internal static string NewArrayRequiresArrayTypeAsResultType {
            get {
                return ResourceManager.GetString("NewArrayRequiresArrayTypeAsResultType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to When using an InstanceStore as a persistence provider, additional keys cannot be specified when loading an instance by its instance ID..
        /// </summary>
        internal static string NoAdditionalKeysOnInstanceIdLoad {
            get {
                return ResourceManager.GetString("NoAdditionalKeysOnInstanceIdLoad", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A CompensableActivity cannot be nested inside the Compensation, Confirmation or Cancellation Handler of a parent CompensableActivity..
        /// </summary>
        internal static string NoCAInSecondaryRoot {
            get {
                return ResourceManager.GetString("NoCAInSecondaryRoot", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Query on a NoChanges map is not supported..
        /// </summary>
        internal static string NoChangesMapQueryNotSupported {
            get {
                return ResourceManager.GetString("NoChangesMapQueryNotSupported", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There are conflicting changes to this activity from its provided implementation map and the current update. The activity&apos;s arguments changed in both updates..
        /// </summary>
        internal static string NoDynamicArgumentsInActivityDefinitionChange {
            get {
                return ResourceManager.GetString("NoDynamicArgumentsInActivityDefinitionChange", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There are conflicting changes to this activity from an implementation update and larger workflow update. The activity&apos;s arguments changed in both updates..
        /// </summary>
        internal static string NoDynamicArgumentsInActivityDefinitionChangeRuntime {
            get {
                return ResourceManager.GetString("NoDynamicArgumentsInActivityDefinitionChangeRuntime", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to resolve namespace &apos;{0}:&apos;..
        /// </summary>
        internal static string NoNamespace {
            get {
                return ResourceManager.GetString("NoNamespace", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SqlWorkflowInstanceStore only supports WAS activation..
        /// </summary>
        internal static string NonWASActivationNotSupported {
            get {
                return ResourceManager.GetString("NonWASActivationNotSupported", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The argument {0} couldn&apos;t be matched to a valid output location..
        /// </summary>
        internal static string NoOutputLocationWasFound {
            get {
                return ResourceManager.GetString("NoOutputLocationWasFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to None of the overload groups have all their required/optional activity arguments configured..
        /// </summary>
        internal static string NoOverloadGroupsAreConfigured {
            get {
                return ResourceManager.GetString("NoOverloadGroupsAreConfigured", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to NoPersistScope Activity &apos;{0}&apos; cannot contain Persist Activity &apos;{1}&apos;. .
        /// </summary>
        internal static string NoPersistScopeCannotContainPersist {
            get {
                return ResourceManager.GetString("NoPersistScopeCannotContainPersist", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The named promotion {0} does not define any promotions..
        /// </summary>
        internal static string NoPromotionsDefined {
            get {
                return ResourceManager.GetString("NoPromotionsDefined", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No runnable workflow instances were found in the InstanceStore to load..
        /// </summary>
        internal static string NoRunnableInstances {
            get {
                return ResourceManager.GetString("NoRunnableInstances", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to It is invalid to call CompleteTransaction when the runtime has no active transaction..
        /// </summary>
        internal static string NoRuntimeTransactionExists {
            get {
                return ResourceManager.GetString("NoRuntimeTransactionExists", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;not specified&gt;.
        /// </summary>
        internal static string NotSpecified {
            get {
                return ResourceManager.GetString("NotSpecified", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Operations cannot contain more than one parameter when using MessageContracts for operation &apos;{0}&apos; in contract &apos;{1}&apos;. Please provide a valid contract definition. .
        /// </summary>
        internal static string NotSupportMoreThanOneParametersInMessageContract {
            get {
                return ResourceManager.GetString("NotSupportMoreThanOneParametersInMessageContract", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A value of the wrong type was retrieved from the instance store.  A value of type {0} was expected, but null was encountered instead..
        /// </summary>
        internal static string NullAssignedToValueType {
            get {
                return ResourceManager.GetString("NullAssignedToValueType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to CorrelationHandle cannot be null in &apos;{0}&apos;..
        /// </summary>
        internal static string NullCorrelationHandleInInitializeCorrelation {
            get {
                return ResourceManager.GetString("NullCorrelationHandleInInitializeCorrelation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to At least one QueryCorrelationInitializer does not have correlation handle set. CorrelationHandle needs to be specified when there is more than one QueryCorrelationInitializer in the CorrelationInitializers collection..
        /// </summary>
        internal static string NullCorrelationHandleInMultipleQueryCorrelation {
            get {
                return ResourceManager.GetString("NullCorrelationHandleInMultipleQueryCorrelation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An item with a null key has already been added..
        /// </summary>
        internal static string NullKeyAlreadyPresent {
            get {
                return ResourceManager.GetString("NullKeyAlreadyPresent", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot dereference null object of type {0} by member {1}..
        /// </summary>
        internal static string NullReferencedMemberAccess {
            get {
                return ResourceManager.GetString("NullReferencedMemberAccess", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Received a null reply message from the server. This could be due to a Contract mismatch between the client and the server sides. Please verify that the server side workflow is configured for two way operation..
        /// </summary>
        internal static string NullReplyMessageContractMismatch {
            get {
                return ResourceManager.GetString("NullReplyMessageContractMismatch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The persistence provider implementation of InstanceStore in use is invalid. Its handler for cancel threw an exception. The handler was specified through the InstancePersistenceContext.SetCancellationHandler method..
        /// </summary>
        internal static string OnCancelRequestedThrew {
            get {
                return ResourceManager.GetString("OnCancelRequestedThrew", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Either &apos;{0}&apos; property or &apos;{1}&apos; property is required for &apos;{2}&apos; in activity &apos;{3}&apos; ..
        /// </summary>
        internal static string OneOfTwoPropertiesMustBeSet {
            get {
                return ResourceManager.GetString("OneOfTwoPropertiesMustBeSet", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to One way operation &apos;{0}&apos; in contract &apos;{1}&apos; should not have a SendReply activity. .
        /// </summary>
        internal static string OnewayContractIsImplementedAsTwoWay {
            get {
                return ResourceManager.GetString("OnewayContractIsImplementedAsTwoWay", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The persistence provider implementation of InstanceStore in use is invalid. Its implementation of OnFreeInstanceHandle threw an exception..
        /// </summary>
        internal static string OnFreeInstanceHandleThrew {
            get {
                return ResourceManager.GetString("OnFreeInstanceHandleThrew", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Bookmarks can only be removed by the activity instance that created them..
        /// </summary>
        internal static string OnlyBookmarkOwnerCanRemove {
            get {
                return ResourceManager.GetString("OnlyBookmarkOwnerCanRemove", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only one operation can be active for an activity at a given time.  There is already another operation in progress..
        /// </summary>
        internal static string OnlyOneOperationPerActivity {
            get {
                return ResourceManager.GetString("OnlyOneOperationPerActivity", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The runtime already is attempting to service a call to RequireTransactionContext..
        /// </summary>
        internal static string OnlyOneRequireTransactionContextAllowed {
            get {
                return ResourceManager.GetString("OnlyOneRequireTransactionContextAllowed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only non-multicast delegates are allowed for WorkflowApplication events.  The provided delegate has an invocation list with a length greater than one..
        /// </summary>
        internal static string OnlySingleCastDelegatesAllowed {
            get {
                return ResourceManager.GetString("OnlySingleCastDelegatesAllowed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The operation has already completed..
        /// </summary>
        internal static string OperationAlreadyCompleted {
            get {
                return ResourceManager.GetString("OperationAlreadyCompleted", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Operation &apos;{0}&apos; does not exist in contract with Name=&apos;{1}&apos; and Namespace=&apos;{2}&apos;..
        /// </summary>
        internal static string OperationDoesNotExistInContract {
            get {
                return ResourceManager.GetString("OperationDoesNotExistInContract", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to OperationFormatter and FaultFormatter cannot both be set..
        /// </summary>
        internal static string OperationFormatterAndFaultFormatterIncorrectlySet {
            get {
                return ResourceManager.GetString("OperationFormatterAndFaultFormatterIncorrectlySet", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to OperationFormatter and FaultFormatter cannot both be null..
        /// </summary>
        internal static string OperationFormatterAndFaultFormatterNotSet {
            get {
                return ResourceManager.GetString("OperationFormatterAndFaultFormatterNotSet", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Operation &apos;{0}&apos; in contract &apos;{1}&apos; already has a &apos;{2}&apos; behavior, so a new one cannot be added. This usually indicates that the IOperationSerializer.ApplyToOperation method has already been called for this operation..
        /// </summary>
        internal static string OperationHasSerializerBehavior {
            get {
                return ResourceManager.GetString("OperationHasSerializerBehavior", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Operation &apos;{0}&apos; in contract &apos;{1}&apos; is not implemented in the workflow..
        /// </summary>
        internal static string OperationIsNotImplemented {
            get {
                return ResourceManager.GetString("OperationIsNotImplemented", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Operation &apos;{0}&apos; on service instance with identifier &apos;{1}&apos; cannot be performed at this time. Please ensure that the operations are performed in the correct order and that the binding in use provides ordered delivery guarantees..
        /// </summary>
        internal static string OperationNotAvailable {
            get {
                return ResourceManager.GetString("OperationNotAvailable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A Receive with Contract {0} and Operation {1} cannot be found in the default WorkflowService. Please ensure all operations in other WorkflowService versions are first added in the default WorkflowService..
        /// </summary>
        internal static string OperationNotFound {
            get {
                return ResourceManager.GetString("OperationNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Multiple extensions of type &apos;{0}&apos; were found. At most one extension of this type is allowed when running this workflow..
        /// </summary>
        internal static string OptionalExtensionTypeMatchedMultiple {
            get {
                return ResourceManager.GetString("OptionalExtensionTypeMatchedMultiple", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The activity &apos;{0}&apos; in the original definition may not be reused in the updated definition..
        /// </summary>
        internal static string OriginalActivityReusedInModifiedDefinition {
            get {
                return ResourceManager.GetString("OriginalActivityReusedInModifiedDefinition", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to System.ServiceModel.Internals.dll.
        /// </summary>
        internal static string OriginalFilename {
            get {
                return ResourceManager.GetString("OriginalFilename", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The variable &apos;{0}&apos; in the original definition may not be reused in the updated definition..
        /// </summary>
        internal static string OriginalVariableReusedInModifiedDefinition {
            get {
                return ResourceManager.GetString("OriginalVariableReusedInModifiedDefinition", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Object &apos;{0}&apos; cannot be used as an origin because it is already a workflow definition element (Activity, ActivityDelegate, Argument, or LocationReference)..
        /// </summary>
        internal static string OriginCannotBeRuntimeIntrinsic {
            get {
                return ResourceManager.GetString("OriginCannotBeRuntimeIntrinsic", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to OutArgument &apos;{0}&apos; cannot be configured with an input value.  The key &apos;{0}&apos; should be removed from the input dictionary..
        /// </summary>
        internal static string OutArgumentCannotHaveInputValue {
            get {
                return ResourceManager.GetString("OutArgumentCannotHaveInputValue", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The number of activities in this ID space has exceeded Int32.MaxValue.  Refactor some portion of the workflow into a new Activity subclass..
        /// </summary>
        internal static string OutOfIdSpaceIds {
            get {
                return ResourceManager.GetString("OutOfIdSpaceIds", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Can only execute long.MaxValue Activity instances in a workflow..
        /// </summary>
        internal static string OutOfInstanceIds {
            get {
                return ResourceManager.GetString("OutOfInstanceIds", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Can only generate long.MaxValue internal bookmarks for a workflow..
        /// </summary>
        internal static string OutOfInternalBookmarks {
            get {
                return ResourceManager.GetString("OutOfInternalBookmarks", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to For single line SourceLocation, endColumn should be &gt;= startColumn (= {0})..
        /// </summary>
        internal static string OutOfRangeSourceLocationEndColumn {
            get {
                return ResourceManager.GetString("OutOfRangeSourceLocationEndColumn", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SourceLocation&apos;s endLine should be &gt;= startLine (= {0})..
        /// </summary>
        internal static string OutOfRangeSourceLocationEndLine {
            get {
                return ResourceManager.GetString("OutOfRangeSourceLocationEndLine", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The persistence provider implementation of InstanceStore in use is invalid. The {0} method can only be called during the processing of a command. Do not attempt to preserve an instance of InstancePersistenceContext for later use. The InstancePersistenceContext provided to TryCommand and BeginTryCommand can only be used during the processing of that command..
        /// </summary>
        internal static string OutsideInstanceExecutionScope {
            get {
                return ResourceManager.GetString("OutsideInstanceExecutionScope", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The persistence provider implementation of InstanceStore in use is invalid. It called the method {0} on InstancePersistenceContext, which requires transactional consistency, as part of performing a command that should not require transactional consistency. This can result in data corruption. This error indicates an invalid persistence provider implementation..
        /// </summary>
        internal static string OutsideTransactionalCommand {
            get {
                return ResourceManager.GetString("OutsideTransactionalCommand", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The following overload groups are a subset of group &apos;{0}&apos;: {1}. It is an error to have an overload group as a subset of another..
        /// </summary>
        internal static string OverloadGroupHasSubsets {
            get {
                return ResourceManager.GetString("OverloadGroupHasSubsets", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The following overload groups are equivalent: {0}. It is sufficient to define only one overload group here..
        /// </summary>
        internal static string OverloadGroupsAreEquivalent {
            get {
                return ResourceManager.GetString("OverloadGroupsAreEquivalent", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The method to overload an operator must be static..
        /// </summary>
        internal static string OverloadingMethodMustBeStatic {
            get {
                return ResourceManager.GetString("OverloadingMethodMustBeStatic", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This method overload is only callable from a workflow thread..
        /// </summary>
        internal static string OverloadOnlyCallableFromWorkflowThread {
            get {
                return ResourceManager.GetString("OverloadOnlyCallableFromWorkflowThread", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An incorrect InstanceOwner was provided. The InstanceOwner provided to an InstanceStore method must belong to the InstanceStore. Only use an InstanceOwner object with the InstanceStore that created it..
        /// </summary>
        internal static string OwnerBelongsToWrongStore {
            get {
                return ResourceManager.GetString("OwnerBelongsToWrongStore", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The instance persistence system is unable to process an invalid InstancePersistenceCommand. The command requires an instance owner, but no owner was bound to the InstanceHandle..
        /// </summary>
        internal static string OwnerRequired {
            get {
                return ResourceManager.GetString("OwnerRequired", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Values must be bound to a non-null expression before ParallelForEach activity &apos;{0}&apos; can be used..
        /// </summary>
        internal static string ParallelForEachRequiresNonNullValues {
            get {
                return ResourceManager.GetString("ParallelForEachRequiresNonNullValues", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Parameter &apos;{0}&apos; does not exist on operation &apos;{1}&apos; in contract &apos;{2}&apos;..
        /// </summary>
        internal static string ParameterNumberMismatch {
            get {
                return ResourceManager.GetString("ParameterNumberMismatch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Parameter &apos;{0}&apos; is not in the correct order for operation &apos;{1}&apos; in contract &apos;{2}&apos;. Please move it to position &apos;{3}&apos; in the parameters collection. .
        /// </summary>
        internal static string ParameterPositionMismatch {
            get {
                return ResourceManager.GetString("ParameterPositionMismatch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The type of parameter &apos;{0}&apos; does not match the type &apos;{1}&apos; specified in operation &apos;{2}&apos; of the implemented contract &apos;{3}&apos;..
        /// </summary>
        internal static string ParameterTypeMismatch {
            get {
                return ResourceManager.GetString("ParameterTypeMismatch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Access to performance counters is denied. Application may be running in partial trust. Either disable performance counters or configure the application to run in full trust..
        /// </summary>
        internal static string PartialTrustPerformanceCounterNotEnabled {
            get {
                return ResourceManager.GetString("PartialTrustPerformanceCounterNotEnabled", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to PauseWhenPersistable can only be called when IsPersistable is false..
        /// </summary>
        internal static string PauseWhenPersistableInvalidIfPersistable {
            get {
                return ResourceManager.GetString("PauseWhenPersistableInvalidIfPersistable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Pending messages per channel ratio: {0}/{1}.
        /// </summary>
        internal static string PendingMessagesPerChannelRatio {
            get {
                return ResourceManager.GetString("PendingMessagesPerChannelRatio", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The argument is of the wrong type. Expecting &apos;{0}&apos;..
        /// </summary>
        internal static string PermissionArgumentWrongType {
            get {
                return ResourceManager.GetString("PermissionArgumentWrongType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An IPersistenceContextInitializer implementation threw an exception. A durable service instance, such as a WorkflowServiceInstance, could not be loaded or created. The InnerException property contains the original exception..
        /// </summary>
        internal static string PersistenceInitializerThrew {
            get {
                return ResourceManager.GetString("PersistenceInitializerThrew", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Abort implementation of a persistence participant of type &apos;{0}&apos; threw an exception. Exceptions should not be thrown from Abort implementations..
        /// </summary>
        internal static string PersistencePipelineAbortThrew {
            get {
                return ResourceManager.GetString("PersistencePipelineAbortThrew", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only workflow instances which have been configured with a PersistenceProvider extension can be persisted or unloaded..
        /// </summary>
        internal static string PersistenceProviderRequiredToPersist {
            get {
                return ResourceManager.GetString("PersistenceProviderRequiredToPersist", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to It is too late to enlist in the transaction. It has already started committing or aborting..
        /// </summary>
        internal static string PersistenceTooLateToEnlist {
            get {
                return ResourceManager.GetString("PersistenceTooLateToEnlist", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The persistence provider implementation of InstanceStore in use is invalid. A new instance was created when an InstanceNotReadyException should have been thrown..
        /// </summary>
        internal static string PersistenceViolationNoCreate {
            get {
                return ResourceManager.GetString("PersistenceViolationNoCreate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Trigger must be set before PickBranch &apos;{0}&apos; can be used..
        /// </summary>
        internal static string PickBranchRequiresTrigger {
            get {
                return ResourceManager.GetString("PickBranchRequiresTrigger", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Pick does not support Dynamic Update when Trigger and Action of a PickBranch are swapped..
        /// </summary>
        internal static string PickBranchTriggerActionSwapped {
            get {
                return ResourceManager.GetString("PickBranchTriggerActionSwapped", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to PrepareForSerialization can only be called when IsPersistable is true..
        /// </summary>
        internal static string PrepareForSerializationRequiresPersistability {
            get {
                return ResourceManager.GetString("PrepareForSerializationRequiresPersistability", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The private implementation of this activity has changed (by adding, removing or rearranging implementation children, delegates, variables or arguments). Dynamic Update only supports implementation changes that are specified in an implementation map, independently of the activity&apos;s public configuration..
        /// </summary>
        internal static string PrivateMembersHaveChanged {
            get {
                return ResourceManager.GetString("PrivateMembersHaveChanged", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 4.6.1038.0.
        /// </summary>
        internal static string ProductVersion {
            get {
                return ResourceManager.GetString("ProductVersion", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The promotion set {0} has already been defined..
        /// </summary>
        internal static string PromotionAlreadyDefined {
            get {
                return ResourceManager.GetString("PromotionAlreadyDefined", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The promotion set {0} has defined {1} {2} promotions, which exceeds the maximum allowed promotions of {3}..
        /// </summary>
        internal static string PromotionTooManyDefined {
            get {
                return ResourceManager.GetString("PromotionTooManyDefined", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0} property cannot be modified after the SqlTrackingParticipant has started processing records..
        /// </summary>
        internal static string PropertyCannotBeModified {
            get {
                return ResourceManager.GetString("PropertyCannotBeModified", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ActivityXamlServices encountered an x:Property member ({0}) that is not supported by DynamicActivityProperty..
        /// </summary>
        internal static string PropertyMemberNotSupportedByActivityXamlServices {
            get {
                return ResourceManager.GetString("PropertyMemberNotSupportedByActivityXamlServices", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; does not match the &apos;{1}&apos; value &apos;{2}&apos; provided on operation &apos;{3}&apos; contract &apos;{4}&apos;..
        /// </summary>
        internal static string PropertyMismatch {
            get {
                return ResourceManager.GetString("PropertyMismatch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Property &apos;{0}&apos; is read only in WorkflowDataContext..
        /// </summary>
        internal static string PropertyReadOnlyInWorkflowDataContext {
            get {
                return ResourceManager.GetString("PropertyReadOnlyInWorkflowDataContext", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to PropertyReference is unable to resolve property &apos;{0}&apos;..
        /// </summary>
        internal static string PropertyReferenceNotFound {
            get {
                return ResourceManager.GetString("PropertyReferenceNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Custom ProtectionLevel settings are only supported through MessageContract. Please specify a MessageContract type for operation &apos;{0}&apos; of implemented contract &apos;{1}&apos;..
        /// </summary>
        internal static string ProtectionLevelIsNotSupported {
            get {
                return ResourceManager.GetString("ProtectionLevelIsNotSupported", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Workflow does not support custom ProtectionLevel settings on Faults. Please do not specify ProtectionLevel on FaultContract for operation &apos;{0}&apos; on implemented contract &apos;{1}&apos;..
        /// </summary>
        internal static string ProtectionLevelNotSupported {
            get {
                return ResourceManager.GetString("ProtectionLevelNotSupported", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The runtime state has already been initialized for execution and cannot be updated.  Reload the state from persistence..
        /// </summary>
        internal static string ProvidedStateInitializedForExecution {
            get {
                return ResourceManager.GetString("ProvidedStateInitializedForExecution", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The persistence provider implementation of InstanceStore doesn&apos;t support the command named {0}. Either choose a different provider, or ensure that this persistence command isn&apos;t attempted..
        /// </summary>
        internal static string ProviderDoesNotSupportCommand {
            get {
                return ResourceManager.GetString("ProviderDoesNotSupportCommand", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This activity does not support changes to its public children (addition, removal, or rearrangement of Activities or ActivityDelegates)..
        /// </summary>
        internal static string PublicChildrenChangeBlockDU {
            get {
                return ResourceManager.GetString("PublicChildrenChangeBlockDU", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Public environment access is only available on activities that derive from CodeActivity&lt;TResult&gt;, not CodeActivity..
        /// </summary>
        internal static string PublicEnvironmentAccessToNonGenericActivity {
            get {
                return ResourceManager.GetString("PublicEnvironmentAccessToNonGenericActivity", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; does not have a public {1} method named &apos;{2}&apos; matching the parameter types, generic type arguments, and generic type constraints supplied to InvokeMethod &apos;{3}&apos;..
        /// </summary>
        internal static string PublicMethodWithMatchingParameterDoesNotExist {
            get {
                return ResourceManager.GetString("PublicMethodWithMatchingParameterDoesNotExist", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Activity &apos;{0}&apos; cannot define arguments other than the built-in Result argument and also declare access to public locations via CodeActivityPublicEnvironmentAccessor. Either pass all data into the activity via arguments, or via CodeActivityPublicEnvironmentAccessor.TryGetAccessToPublicLocation and TryGetReferenceToPublicLocation..
        /// </summary>
        internal static string PublicReferencesOnActivityRequiringArgumentResolution {
            get {
                return ResourceManager.GetString("PublicReferencesOnActivityRequiringArgumentResolution", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This activity is inside the implementation of composite activity &apos;{0}&apos;. To query its updateability, use the implementation map for the composite activity..
        /// </summary>
        internal static string QueryActivityIsInImplementation {
            get {
                return ResourceManager.GetString("QueryActivityIsInImplementation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This activity does not belong to either the original or updated workflow definitions..
        /// </summary>
        internal static string QueryActivityIsNotInDefinition {
            get {
                return ResourceManager.GetString("QueryActivityIsNotInDefinition", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This activity is part of the root workflow definition. To query its updateability, use an update map for the workflow, instead of an implementation map for composite activity &apos;{0}&apos;..
        /// </summary>
        internal static string QueryActivityIsPublic {
            get {
                return ResourceManager.GetString("QueryActivityIsPublic", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There is no correlation handle available to initialize the QueryCorrelationInitializer. This is because there is no explicit handle set on the query initializer and there is no handle available for use from the correlation scope.&quot;.
        /// </summary>
        internal static string QueryCorrelationInitializerCannotBeInitialized {
            get {
                return ResourceManager.GetString("QueryCorrelationInitializerCannotBeInitialized", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The activity with DisplayName=&apos;{0}&apos; and OperationName=&apos;{1}&apos; has QueryCorrelationInitializer with empty MessageQuerySet..
        /// </summary>
        internal static string QueryCorrelationInitializerWithEmptyMessageQuerySet {
            get {
                return ResourceManager.GetString("QueryCorrelationInitializerWithEmptyMessageQuerySet", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This variable is inside the implementation of composite activity &apos;{0}&apos;. To query its updateability, use the implementation map for the composite activity..
        /// </summary>
        internal static string QueryVariableIsInImplementation {
            get {
                return ResourceManager.GetString("QueryVariableIsInImplementation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This variable does not belong to either the original or updated workflow definitions..
        /// </summary>
        internal static string QueryVariableIsNotInDefinition {
            get {
                return ResourceManager.GetString("QueryVariableIsNotInDefinition", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This variable is not public. Only public variables can be changed via Dynamic Update..
        /// </summary>
        internal static string QueryVariableIsNotPublic {
            get {
                return ResourceManager.GetString("QueryVariableIsNotPublic", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This variable is part of the root workflow definition. To query its updateability, use an update map for the workflow, instead of an implementation map for composite activity &apos;{0}&apos;..
        /// </summary>
        internal static string QueryVariableIsPublic {
            get {
                return ResourceManager.GetString("QueryVariableIsPublic", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Queuing SQL retry with delay {0} milliseconds..
        /// </summary>
        internal static string QueuingSqlRetry {
            get {
                return ResourceManager.GetString("QueuingSqlRetry", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Activity &apos;{0}&apos; cannot read from this public location reference because it was declared with ArgumentDirection.Out. To allow both reading and writing, declare the reference with ArgumentDirection.InOut..
        /// </summary>
        internal static string ReadAccessToWriteOnlyPublicReference {
            get {
                return ResourceManager.GetString("ReadAccessToWriteOnlyPublicReference", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Read not supported on this stream..
        /// </summary>
        internal static string ReadNotSupported {
            get {
                return ResourceManager.GetString("ReadNotSupported", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Operation cannot be used because name scope implementation is read only..
        /// </summary>
        internal static string ReadonlyNameScopeCannotBeUpdated {
            get {
                return ResourceManager.GetString("ReadonlyNameScopeCannotBeUpdated", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The property or indexer &apos;{0}.{1}&apos; cannot be used in this context because the set accessor is inaccessible..
        /// </summary>
        internal static string ReadonlyPropertyCannotBeSet {
            get {
                return ResourceManager.GetString("ReadonlyPropertyCannotBeSet", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Two Receives with different ReceiveContent types have the same ServiceContractName and OperationName &apos;{0}&apos;..
        /// </summary>
        internal static string ReceiveAndReceiveParametersHaveSameName {
            get {
                return ResourceManager.GetString("ReceiveAndReceiveParametersHaveSameName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This Receive activity&apos;s Content has changed between type-less and typed content..
        /// </summary>
        internal static string ReceiveContentChanged {
            get {
                return ResourceManager.GetString("ReceiveContentChanged", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This Receive activity&apos;s CorrelationInitializers have changed..
        /// </summary>
        internal static string ReceiveCorrelationInitializiersChanged {
            get {
                return ResourceManager.GetString("ReceiveCorrelationInitializiersChanged", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Receive is in TransactedReceiveScope while the operation &apos;{0}&apos; in implemented contract &apos;{1}&apos; has TransactionFlowOption set to NotAllowed..
        /// </summary>
        internal static string ReceiveIsInTRSWhenTransactionFlowNotAllowed {
            get {
                return ResourceManager.GetString("ReceiveIsInTRSWhenTransactionFlowNotAllowed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The operation &apos;{0}&apos; in implemented contract &apos;{1}&apos; requires transaction to be flowed, but the Receive activity is NOT in TransactedReceiveScope..
        /// </summary>
        internal static string ReceiveIsNotInTRS {
            get {
                return ResourceManager.GetString("ReceiveIsNotInTRS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Receive activity is configured with a request/reply Operation &apos;{0}&apos;, however, there is no SendReply paired with it. Please pair Receive with SendReply and correlate them using a CorrelationHandle..
        /// </summary>
        internal static string ReceiveMessageNeedsToPairWithSendMessageForTwoWayContract {
            get {
                return ResourceManager.GetString("ReceiveMessageNeedsToPairWithSendMessageForTwoWayContract", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Receive activity that flowed in a transaction was not contained within a TransactedReceiveScope..
        /// </summary>
        internal static string ReceiveNotWithinATransactedReceiveScope {
            get {
                return ResourceManager.GetString("ReceiveNotWithinATransactedReceiveScope", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A SendReply with SendMessageContent and a SendReply with SendParametersContent are both paired with the same Receive with OperationName=&apos;{0}&apos;. This is not allowed..
        /// </summary>
        internal static string ReceivePairedWithSendReplyAndSendReplyParameters {
            get {
                return ResourceManager.GetString("ReceivePairedWithSendReplyAndSendReplyParameters", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Activity with DisplayName=&apos;{0}&apos; has an argument named &apos;{1}&apos; that is a Message or MessageContract. ReceiveParametersContent does not support Message or MessageContract. Content property should be specified as ReceiveMessageContent for Message or MessageContract based content..
        /// </summary>
        internal static string ReceiveParametersContentDoesNotSupportMessage {
            get {
                return ResourceManager.GetString("ReceiveParametersContentDoesNotSupportMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Request property in activity &apos;{0}&apos; cannot be null. It must be set to the Send activity that belongs to this request/reply pair..
        /// </summary>
        internal static string ReceiveReplyRequestCannotBeNull {
            get {
                return ResourceManager.GetString("ReceiveReplyRequestCannotBeNull", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This method cannot be called for activities that are references to imported children. Check NativeActivityUpdateContext.IsReferenceToImportedChild before calling this method..
        /// </summary>
        internal static string ReferencedChildInIsNewlyAdded {
            get {
                return ResourceManager.GetString("ReferencedChildInIsNewlyAdded", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only registered bookmark scopes can be used for creating scoped bookmarks..
        /// </summary>
        internal static string RegisteredBookmarkScopeRequired {
            get {
                return ResourceManager.GetString("RegisteredBookmarkScopeRequired", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Endpoint with Name=&apos;{0}&apos; and ServiceContract &apos;{1}&apos; has relative Uri &apos;{2}&apos; that cannot be converted to an absolute Uri because the Endpoint&apos;s Binding property is null. Please set the Binding property or change the relative Uri to an absolute Uri..
        /// </summary>
        internal static string RelativeUriRequiresBinding {
            get {
                return ResourceManager.GetString("RelativeUriRequiresBinding", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Endpoint with Name=&apos;{0}&apos; and ServiceContract &apos;{1}&apos; has relative Uri &apos;{2}&apos; that cannot be converted to an absolute Uri because the host argument of GetAddress method is null. Please provide the service host instance that will host the endpoint, or change the relative Uri to an absolute Uri..
        /// </summary>
        internal static string RelativeUriRequiresHost {
            get {
                return ResourceManager.GetString("RelativeUriRequiresHost", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to StateMachine does not support Dynamic Update if a transition is removed from an executing State..
        /// </summary>
        internal static string RemovingTransitionsBlockDU {
            get {
                return ResourceManager.GetString("RemovingTransitionsBlockDU", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Failed to extend lock expiration, lock expiration already passed or the lock owner was deleted. Aborting SqlWorkflowInstanceStore..
        /// </summary>
        internal static string RenewLockSystemError {
            get {
                return ResourceManager.GetString("RenewLockSystemError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The activity &apos;{0}&apos; with OperationName=&apos;{1}&apos; should not include the request/reply handle in additional correlations..
        /// </summary>
        internal static string ReplyShouldNotIncludeRequestReplyHandle {
            get {
                return ResourceManager.GetString("ReplyShouldNotIncludeRequestReplyHandle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Request argument must be specified in activity &apos;{0}&apos;..
        /// </summary>
        internal static string RequestMustBeSpecified {
            get {
                return ResourceManager.GetString("RequestMustBeSpecified", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to RequestReplyCorrelationInitializer should not be specified on a one way Send or Receive activity. When initializing RequestReply correlation, Send should be paired with a ReceiveReply activity and Receive should be paired with a SendReply activity..
        /// </summary>
        internal static string RequestReplyHandleShouldNotBePresentForOneWay {
            get {
                return ResourceManager.GetString("RequestReplyHandleShouldNotBePresentForOneWay", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Value for a required activity argument &apos;{0}&apos; was not supplied..
        /// </summary>
        internal static string RequiredArgumentValueNotSupplied {
            get {
                return ResourceManager.GetString("RequiredArgumentValueNotSupplied", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An extension of type &apos;{0}&apos; must be configured in order to run this workflow..
        /// </summary>
        internal static string RequiredExtensionTypeNotFound {
            get {
                return ResourceManager.GetString("RequiredExtensionTypeNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Required variable {0} is not available for extraction in activity: {1}..
        /// </summary>
        internal static string RequiredVariableCoundNotBeExtracted {
            get {
                return ResourceManager.GetString("RequiredVariableCoundNotBeExtracted", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; is a value type. RequireExtension only accepts reference types..
        /// </summary>
        internal static string RequireExtensionOnlyAcceptsReferenceTypes {
            get {
                return ResourceManager.GetString("RequireExtensionOnlyAcceptsReferenceTypes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ResponseContext is not null..
        /// </summary>
        internal static string ResponseContextIsNotNull {
            get {
                return ResourceManager.GetString("ResponseContextIsNotNull", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The activity author supplied RuntimeArgument named &apos;Result&apos; must have ArgumentDirection Out and type {0}.  Instead, it has ArgumentDirection {1} and type {2}..
        /// </summary>
        internal static string ResultArgumentHasRequiredTypeAndDirection {
            get {
                return ResourceManager.GetString("ResultArgumentHasRequiredTypeAndDirection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The activity author supplied RuntimeArgument named &apos;Result&apos; must be bound to the argument returned by the activity&apos;s Result property..
        /// </summary>
        internal static string ResultArgumentMustBeBoundToResultProperty {
            get {
                return ResourceManager.GetString("ResultArgumentMustBeBoundToResultProperty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Result OutArgument for this activity must be an OutArgument of {0}..
        /// </summary>
        internal static string ResultArgumentMustBeSpecificType {
            get {
                return ResourceManager.GetString("ResultArgumentMustBeSpecificType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Result OutArgument on an Activity&lt;T&gt; cannot be set when the Activity&lt;T&gt; is used as an argument&apos;s expression..
        /// </summary>
        internal static string ResultCannotBeSetOnArgumentExpressions {
            get {
                return ResourceManager.GetString("ResultCannotBeSetOnArgumentExpressions", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Result argument must be specified in activity &apos;{0}&apos;..
        /// </summary>
        internal static string ResultMustBeSpecified {
            get {
                return ResourceManager.GetString("ResultMustBeSpecified", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Rethrow activity &apos;{0}&apos; cannot be used in a private child of a TryCatch activity. Rethrow is only allowed under the public children of a TryCatch activity..
        /// </summary>
        internal static string RethrowMustBeAPublicChild {
            get {
                return ResourceManager.GetString("RethrowMustBeAPublicChild", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Rethrow activity &apos;{0}&apos; must be the child of a Catch handler of a TryCatch activity..
        /// </summary>
        internal static string RethrowNotInATryCatch {
            get {
                return ResourceManager.GetString("RethrowNotInATryCatch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Retrying a SQL command due to SQL error number {0}..
        /// </summary>
        internal static string RetryingSqlCommandDueToSqlError {
            get {
                return ResourceManager.GetString("RetryingSqlCommandDueToSqlError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Type mismatch. The return type &apos;{0}&apos; of best-match method &apos;{1}&apos; on type &apos;{2}&apos; is not compatible with the &apos;Result&apos; argument supplied to InvokeMethod &apos;{3}&apos;, which expects return values of type &apos;{4}&apos;..
        /// </summary>
        internal static string ReturnTypeIncompatible {
            get {
                return ResourceManager.GetString("ReturnTypeIncompatible", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Return value parameter of type &apos;{0}&apos; is missing for operation &apos;{1}&apos; in contract &apos;{2}&apos;. .
        /// </summary>
        internal static string ReturnValueMissing {
            get {
                return ResourceManager.GetString("ReturnValueMissing", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The activity with display name &apos;{0}&apos; has already been associated with an instance.  Once associated with an instance an activity&apos;s metadata cannot be manipulated.  This error might also indicate that you are attempting to execute a workflow whose root activity is actually part of another workflow..
        /// </summary>
        internal static string RootActivityAlreadyAssociatedWithInstance {
            get {
                return ResourceManager.GetString("RootActivityAlreadyAssociatedWithInstance", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Activity &apos;{0}&apos; is a root activity, and cannot be referenced by activity &apos;{1}&apos;..
        /// </summary>
        internal static string RootActivityCannotBeReferenced {
            get {
                return ResourceManager.GetString("RootActivityCannotBeReferenced", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The values provided for the root activity&apos;s arguments did not satisfy the root activity&apos;s requirements:.
        /// </summary>
        internal static string RootArgumentViolationsFound {
            get {
                return ResourceManager.GetString("RootArgumentViolationsFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The root activity&apos;s argument settings are incorrect.  Either fix the workflow definition or supply input values to fix these errors:.
        /// </summary>
        internal static string RootArgumentViolationsFoundNoInputs {
            get {
                return ResourceManager.GetString("RootArgumentViolationsFoundNoInputs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Detection of runnable instances failed due to the following exception.
        /// </summary>
        internal static string RunnableInstancesDetectionError {
            get {
                return ResourceManager.GetString("RunnableInstancesDetectionError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to RuntimeArgument &apos;{0}&apos; refers to an Argument which in turn is bound to RuntimeArgument named &apos;{1}&apos;. Please ensure that the Argument object is not bound to more than one RuntimeArgument object or shared by more than one public Argument property..
        /// </summary>
        internal static string RuntimeArgumentBindingInvalid {
            get {
                return ResourceManager.GetString("RuntimeArgumentBindingInvalid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Dynamic Update will not be allowed inside Activity &apos;{0}&apos; because its RuntimeArguments changed.  To enable dynamic update inside this activity, no RuntimeArguments can be added, removed and rearranged.  Also their Name, Type and Direction cannot change..
        /// </summary>
        internal static string RuntimeArgumentChangeBlockDU {
            get {
                return ResourceManager.GetString("RuntimeArgumentChangeBlockDU", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The RuntimeArgument instance is not created so far..
        /// </summary>
        internal static string RuntimeArgumentNotCreated {
            get {
                return ResourceManager.GetString("RuntimeArgumentNotCreated", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The argument &apos;{0}&apos; cannot be used.  Make sure that it is declared on an activity..
        /// </summary>
        internal static string RuntimeArgumentNotOpen {
            get {
                return ResourceManager.GetString("RuntimeArgumentNotOpen", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The direction of a RuntimeDelegateArgument must match the direction of the DelegateArgument it is binding to..
        /// </summary>
        internal static string RuntimeDelegateArgumentDirectionIncorrect {
            get {
                return ResourceManager.GetString("RuntimeDelegateArgumentDirectionIncorrect", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The type of a RuntimeDelegateArgument must match the type of the DelegateArgument it is binding to..
        /// </summary>
        internal static string RuntimeDelegateArgumentTypeIncorrect {
            get {
                return ResourceManager.GetString("RuntimeDelegateArgumentTypeIncorrect", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A runtime operation is already in progress.  Access to WorkflowInstance must be synchronized by the caller..
        /// </summary>
        internal static string RuntimeOperationInProgress {
            get {
                return ResourceManager.GetString("RuntimeOperationInProgress", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The workflow runtime is currently executing a workflow and operations can only be performed while the workflow is paused.  Access to WorkflowInstance must be synchronized by the caller..
        /// </summary>
        internal static string RuntimeRunning {
            get {
                return ResourceManager.GetString("RuntimeRunning", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The runtime has already been configured with a transaction.  Only one transaction is allowed at a time..
        /// </summary>
        internal static string RuntimeTransactionAlreadyExists {
            get {
                return ResourceManager.GetString("RuntimeTransactionAlreadyExists", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The runtime transaction has completed with the state &apos;{0}&apos;..
        /// </summary>
        internal static string RuntimeTransactionComplete {
            get {
                return ResourceManager.GetString("RuntimeTransactionComplete", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Activity &apos;{0}&apos;, DisplayName: &apos;{1}&apos;, InstanceId: &apos;{2}&apos; has scheduled completion of the runtime transaction..
        /// </summary>
        internal static string RuntimeTransactionCompletionRequested {
            get {
                return ResourceManager.GetString("RuntimeTransactionCompletionRequested", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The method &apos;{0}&apos; can be called only if the corresponding RuntimeTransactionHandle object is registered as an execution property..
        /// </summary>
        internal static string RuntimeTransactionHandleNotRegisteredAsExecutionProperty {
            get {
                return ResourceManager.GetString("RuntimeTransactionHandleNotRegisteredAsExecutionProperty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This operation is invalid when the runtime transaction is suppressed. The runtime transaction is suppressed because the SuppressTransaction property was set on the RuntimeTransactionHandle in the current environment..
        /// </summary>
        internal static string RuntimeTransactionIsSuppressed {
            get {
                return ResourceManager.GetString("RuntimeTransactionIsSuppressed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The runtime transaction has been set by Activity &apos;{0}&apos;, DisplayName: &apos;{1}&apos;, InstanceId: &apos;{2}&apos;.  Execution isolated to Activity &apos;{3}&apos;, DisplayName: &apos;{4}&apos;, InstanceId: &apos;{5}&apos;..
        /// </summary>
        internal static string RuntimeTransactionSet {
            get {
                return ResourceManager.GetString("RuntimeTransactionSet", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The same user state instance cannot be used for concurrent activity invocations..
        /// </summary>
        internal static string SameUserStateUsedForMultipleInvokes {
            get {
                return ResourceManager.GetString("SameUserStateUsedForMultipleInvokes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Saving DynamicActivity or Activity.Implementation to XAML is not supported.  If you are attempting to construct a parameterized workflow and save it to XAML, consider using the ActivityBuilder class..
        /// </summary>
        internal static string SavingActivityToXamlNotSupported {
            get {
                return ResourceManager.GetString("SavingActivityToXamlNotSupported", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Saving a general Func&lt;T&gt; to XAML is not supported. To convert an object to a serializable Func, serialize the object to XAML and then call ActivityXamlServices.CreateFactory..
        /// </summary>
        internal static string SavingFuncToXamlNotSupported {
            get {
                return ResourceManager.GetString("SavingFuncToXamlNotSupported", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A BookmarkWorkItem has been scheduled for Activity &apos;{0}&apos;, DisplayName: &apos;{1}&apos;, InstanceId: &apos;{2}&apos;.  BookmarkName: {3}, BookmarkScope: {4}..
        /// </summary>
        internal static string ScheduleBookmarkWorkItem {
            get {
                return ResourceManager.GetString("ScheduleBookmarkWorkItem", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A CancelActivityWorkItem has been scheduled for Activity &apos;{0}&apos;, DisplayName: &apos;{1}&apos;, InstanceId: &apos;{2}&apos;..
        /// </summary>
        internal static string ScheduleCancelActivityWorkItem {
            get {
                return ResourceManager.GetString("ScheduleCancelActivityWorkItem", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A CompletionWorkItem has been scheduled for parent Activity &apos;{0}&apos;, DisplayName: &apos;{1}&apos;, InstanceId: &apos;{2}&apos;.  Completed Activity &apos;{3}&apos;, DisplayName: &apos;{4}&apos;, InstanceId: &apos;{5}&apos;..
        /// </summary>
        internal static string ScheduleCompletionWorkItem {
            get {
                return ResourceManager.GetString("ScheduleCompletionWorkItem", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An ExecuteActivityWorkItem has been scheduled for Activity &apos;{0}&apos;, DisplayName: &apos;{1}&apos;, InstanceId: &apos;{2}&apos;..
        /// </summary>
        internal static string ScheduleExecuteActivityWorkItem {
            get {
                return ResourceManager.GetString("ScheduleExecuteActivityWorkItem", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A FaultWorkItem has been scheduled for Activity &apos;{0}&apos;, DisplayName: &apos;{1}&apos;, InstanceId: &apos;{2}&apos;.  The exception was propagated from Activity &apos;{3}&apos;, DisplayName: &apos;{4}&apos;, InstanceId: &apos;{5}&apos;..
        /// </summary>
        internal static string ScheduleFaultWorkItem {
            get {
                return ResourceManager.GetString("ScheduleFaultWorkItem", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A runtime work item has been scheduled for Activity &apos;{0}&apos;, DisplayName: &apos;{1}&apos;, InstanceId: &apos;{2}&apos;..
        /// </summary>
        internal static string ScheduleRuntimeWorkItem {
            get {
                return ResourceManager.GetString("ScheduleRuntimeWorkItem", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A TransactionContextWorkItem has been scheduled for Activity &apos;{0}&apos;, DisplayName: &apos;{1}&apos;, InstanceId: &apos;{2}&apos;..
        /// </summary>
        internal static string ScheduleTransactionContextWorkItem {
            get {
                return ResourceManager.GetString("ScheduleTransactionContextWorkItem", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The XAML Helper class name generated by the BeforeInitializeComponent XAML build task extension ({0}) cannot be a generic. The resource could not have been generated by the BeforeInitializeComponent XAML Build Task extension. Try rebuilding the project..
        /// </summary>
        internal static string SchemaContextFromBeforeInitializeComponentXBTExtensionCannotBeGeneric {
            get {
                return ResourceManager.GetString("SchemaContextFromBeforeInitializeComponentXBTExtensionCannotBeGeneric", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The XAML Helper class name generated by the BeforeInitializeComponent XAML build task extension ({0}) was not found. Try rebuilding the project..
        /// </summary>
        internal static string SchemaContextFromBeforeInitializeComponentXBTExtensionNotFound {
            get {
                return ResourceManager.GetString("SchemaContextFromBeforeInitializeComponentXBTExtensionNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Seek not supported on this stream..
        /// </summary>
        internal static string SeekNotSupported {
            get {
                return ResourceManager.GetString("SeekNotSupported", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to find a valid correlation handle associated with the Send activity named &apos;{0}&apos;..
        /// </summary>
        internal static string SendActivityCorrelationHandleNotFound {
            get {
                return ResourceManager.GetString("SendActivityCorrelationHandleNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SendMessageChannelCache miss.
        /// </summary>
        internal static string SendMessageChannelCacheMiss {
            get {
                return ResourceManager.GetString("SendMessageChannelCacheMiss", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Send activity is configured with a request/reply Operation &apos;{0}&apos;, however, there is no ReceiveReply activity paired with it. Please pair Send with ReceiveReply and correlate them using a CorrelationHandle..
        /// </summary>
        internal static string SendMessageNeedsToPairWithReceiveMessageForTwoWayContract {
            get {
                return ResourceManager.GetString("SendMessageNeedsToPairWithReceiveMessageForTwoWayContract", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Send is not supported..
        /// </summary>
        internal static string SendNotSupported {
            get {
                return ResourceManager.GetString("SendNotSupported", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Activity with DisplayName=&apos;{0}&apos; has an argument named &apos;{1}&apos; that is a Message or MessageContract. SendParametersContent does not support Message or MessageContract. Content property should be specified as SendMessageContent for Message or MessageContract based content..
        /// </summary>
        internal static string SendParametersContentDoesNotSupportMessage {
            get {
                return ResourceManager.GetString("SendParametersContentDoesNotSupportMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to find SendReceiveExtension, please make sure that the application hosting the workflow provides an implementation of the extension..
        /// </summary>
        internal static string SendReceiveExtensionNotFound {
            get {
                return ResourceManager.GetString("SendReceiveExtensionNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Two SendReply activities have the same fault type but different Action..
        /// </summary>
        internal static string SendRepliesHaveSameFaultTypeDifferentAction {
            get {
                return ResourceManager.GetString("SendRepliesHaveSameFaultTypeDifferentAction", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Request property in activity &apos;{0}&apos; cannot be null. It must be set to the Receive activity that belongs to this request/reply pair.
        /// </summary>
        internal static string SendReplyRequestCannotBeNull {
            get {
                return ResourceManager.GetString("SendReplyRequestCannotBeNull", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Activity with operation name &apos;{0}&apos; has a CorrelatesWith handle that is not initialized..
        /// </summary>
        internal static string SendWithUninitializedCorrelatesWith {
            get {
                return ResourceManager.GetString("SendWithUninitializedCorrelatesWith", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Sequence does not support Dynamic Update when it contains more than one reference to the same imported child..
        /// </summary>
        internal static string SequenceDuplicateReferences {
            get {
                return ResourceManager.GetString("SequenceDuplicateReferences", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A service endpoint has been added for address &apos;{0}&apos;, binding &apos;{1}&apos;, and contract &apos;{2}&apos;..
        /// </summary>
        internal static string ServiceEndpointAdded {
            get {
                return ResourceManager.GetString("ServiceEndpointAdded", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The operation could not be completed because the service host or one of its extensions has been aborted..
        /// </summary>
        internal static string ServiceHostExtensionAborted {
            get {
                return ResourceManager.GetString("ServiceHostExtensionAborted", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An operation was attempted using a service host extension which is only allowed before the service host has been opened..
        /// </summary>
        internal static string ServiceHostExtensionImmutable {
            get {
                return ResourceManager.GetString("ServiceHostExtensionImmutable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Service instance with the identifier &apos;{0}&apos; was terminated..
        /// </summary>
        internal static string ServiceInstanceTerminated {
            get {
                return ResourceManager.GetString("ServiceInstanceTerminated", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Service instance with the identifier &apos;{0}&apos; was unloaded..
        /// </summary>
        internal static string ServiceInstanceUnloaded {
            get {
                return ResourceManager.GetString("ServiceInstanceUnloaded", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The contract name &apos;IMetadataExchange&apos; could not be found in the list of contracts implemented by the service {0}.  Add a ServiceMetadataBehavior to the configuration file or to the WorkflowServiceHost directly to enable support for this contract..
        /// </summary>
        internal static string ServiceMetadataBehaviorNotFoundForServiceMetadataEndpoint {
            get {
                return ResourceManager.GetString("ServiceMetadataBehaviorNotFoundForServiceMetadataEndpoint", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An IExecutionProperty threw an exception while setting up or cleaning up the workflow thread.  See the inner exception for more details..
        /// </summary>
        internal static string SetupOrCleanupWorkflowThreadThrew {
            get {
                return ResourceManager.GetString("SetupOrCleanupWorkflowThreadThrew", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The given Task instance has not yet been started. Task instances must be started before they are returned from operations..
        /// </summary>
        internal static string SFxTaskNotStarted {
            get {
                return ResourceManager.GetString("SFxTaskNotStarted", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An unexpected failure occurred. Applications should not attempt to handle this error. For diagnostic purposes, this English message is associated with the failure: {0}..
        /// </summary>
        internal static string ShipAssertExceptionMessage {
            get {
                return ResourceManager.GetString("ShipAssertExceptionMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to State &apos;{0}&apos; must have at least 1 transition..
        /// </summary>
        internal static string SimpleStateMustHaveOneTransition {
            get {
                return ResourceManager.GetString("SimpleStateMustHaveOneTransition", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Special method &apos;{0}&apos; of type &apos;{1}&apos; is not found..
        /// </summary>
        internal static string SpecialMethodNotFound {
            get {
                return ResourceManager.GetString("SpecialMethodNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Caught SQL Exception number {0} message {1}..
        /// </summary>
        internal static string SqlExceptionCaught {
            get {
                return ResourceManager.GetString("SqlExceptionCaught", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Starting execution of a BookmarkWorkItem for Activity &apos;{0}&apos;, DisplayName: &apos;{1}&apos;, InstanceId: &apos;{2}&apos;.  BookmarkName: {3}, BookmarkScope: {4}..
        /// </summary>
        internal static string StartBookmarkWorkItem {
            get {
                return ResourceManager.GetString("StartBookmarkWorkItem", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Starting execution of a CancelActivityWorkItem for Activity &apos;{0}&apos;, DisplayName: &apos;{1}&apos;, InstanceId: &apos;{2}&apos;..
        /// </summary>
        internal static string StartCancelActivityWorkItem {
            get {
                return ResourceManager.GetString("StartCancelActivityWorkItem", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Starting execution of a CompletionWorkItem for parent Activity &apos;{0}&apos;, DisplayName: &apos;{1}&apos;, InstanceId: &apos;{2}&apos;. Completed Activity &apos;{3}&apos;, DisplayName: &apos;{4}&apos;, InstanceId: &apos;{5}&apos;..
        /// </summary>
        internal static string StartCompletionWorkItem {
            get {
                return ResourceManager.GetString("StartCompletionWorkItem", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Starting execution of an ExecuteActivityWorkItem for Activity &apos;{0}&apos;, DisplayName: &apos;{1}&apos;, InstanceId: &apos;{2}&apos;..
        /// </summary>
        internal static string StartExecuteActivityWorkItem {
            get {
                return ResourceManager.GetString("StartExecuteActivityWorkItem", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Starting execution of a FaultWorkItem for Activity &apos;{0}&apos;, DisplayName: &apos;{1}&apos;, InstanceId: &apos;{2}&apos;.  The exception was propagated from Activity &apos;{3}&apos;, DisplayName: &apos;{4}&apos;, InstanceId: &apos;{5}&apos;..
        /// </summary>
        internal static string StartFaultWorkItem {
            get {
                return ResourceManager.GetString("StartFaultWorkItem", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Starting execution of a runtime work item for Activity &apos;{0}&apos;, DisplayName: &apos;{1}&apos;, InstanceId: &apos;{2}&apos;..
        /// </summary>
        internal static string StartRuntimeWorkItem {
            get {
                return ResourceManager.GetString("StartRuntimeWorkItem", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Activity boundary..
        /// </summary>
        internal static string StartSignpostEvent {
            get {
                return ResourceManager.GetString("StartSignpostEvent", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Starting SQL command execution: {0}.
        /// </summary>
        internal static string StartSqlCommandExecute {
            get {
                return ResourceManager.GetString("StartSqlCommandExecute", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Starting execution of a TransactionContextWorkItem for Activity &apos;{0}&apos;, DisplayName: &apos;{1}&apos;, InstanceId: &apos;{2}&apos;..
        /// </summary>
        internal static string StartTransactionContextWorkItem {
            get {
                return ResourceManager.GetString("StartTransactionContextWorkItem", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to State &apos;{0}&apos; cannot be added to a state machine twice.  All states in a state machine should be unique..
        /// </summary>
        internal static string StateCannotBeAddedTwice {
            get {
                return ResourceManager.GetString("StateCannotBeAddedTwice", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Instance &apos;{0}&apos; cannot be run or persisted because it had a failed Dynamic Update. To run the instance, reload a fresh copy from the persistence store..
        /// </summary>
        internal static string StateCannotBeSerialized {
            get {
                return ResourceManager.GetString("StateCannotBeSerialized", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to StateMachine &apos;{0}&apos; must have an initial state..
        /// </summary>
        internal static string StateMachineMustHaveInitialState {
            get {
                return ResourceManager.GetString("StateMachineMustHaveInitialState", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Target state &apos;{1}&apos; of transition &apos;{0}&apos; must belong to a state machine..
        /// </summary>
        internal static string StateNotBelongToAnyParent {
            get {
                return ResourceManager.GetString("StateNotBelongToAnyParent", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Activity boundary..
        /// </summary>
        internal static string StopSignpostEvent {
            get {
                return ResourceManager.GetString("StopSignpostEvent", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The persistence provider implementation of InstanceStore in use is invalid. It called BindInstanceOwner twice with the same instanceOwnerId value but different lockToken values. Use a persistence provider which always uses the same lockToken for a single instance owner..
        /// </summary>
        internal static string StoreReportedConflictingLockTokens {
            get {
                return ResourceManager.GetString("StoreReportedConflictingLockTokens", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The persistence provider implementation of InstanceStore in use is invalid. It failed to bind the InstanceHandle to an instance and set the InstanceState while processing a LoadWorkflowByInstanceKeyCommand, a LoadWorkflowCommand or a TryLoadRunnableWorkflowCommand..
        /// </summary>
        internal static string StoreViolationNoInstanceBound {
            get {
                return ResourceManager.GetString("StoreViolationNoInstanceBound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The sub-expression for the object of type &apos;{0}&apos; resulted in a location reference that is not visible at this scope..
        /// </summary>
        internal static string SubexpressionResultWasNotVisible {
            get {
                return ResourceManager.GetString("SubexpressionResultWasNotVisible", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The sub-expression for the object of type &apos;{0}&apos; resulted in a null value..
        /// </summary>
        internal static string SubexpressionResultWasNull {
            get {
                return ResourceManager.GetString("SubexpressionResultWasNull", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Switch &apos;{0}&apos; cases contains {1} key(s) that are not compatible with the expression type of &apos;{2}&apos;..
        /// </summary>
        internal static string SwitchCaseKeyTypesMustMatchExpressionType {
            get {
                return ResourceManager.GetString("SwitchCaseKeyTypesMustMatchExpressionType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Switch activity &apos;{0}&apos; could not find a Case activity matching the Expression result..
        /// </summary>
        internal static string SwitchCaseNotFound {
            get {
                return ResourceManager.GetString("SwitchCaseNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A null case key exists but the Switch Expression is the value type &apos;{0}&apos;.  Value types cannot be null..
        /// </summary>
        internal static string SwitchCaseNullWithValueType {
            get {
                return ResourceManager.GetString("SwitchCaseNullWithValueType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Case key &apos;{0}&apos; is not of type &apos;{1}&apos; and may not ever match any value yielded by the Switch Expression of type &apos;InArgument&lt;{1}&gt;&apos;..
        /// </summary>
        internal static string SwitchCaseTypeMismatch {
            get {
                return ResourceManager.GetString("SwitchCaseTypeMismatch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A variable, RuntimeArgument or a DelegateArgument already exists with the name &apos;{0}&apos;. Names must be unique within an environment scope..
        /// </summary>
        internal static string SymbolNamesMustBeUnique {
            get {
                return ResourceManager.GetString("SymbolNamesMustBeUnique", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A workflow instance can only be configured with a single SymbolResolver.  There is already a SymbolResolver in the WorkflowInstanceExtensionManager..
        /// </summary>
        internal static string SymbolResolverAlreadyExists {
            get {
                return ResourceManager.GetString("SymbolResolverAlreadyExists", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The symbol &apos;{0}&apos; with type &apos;{1}&apos; could not be found in the SymbolResolver extension for this instance..
        /// </summary>
        internal static string SymbolResolverDoesNotHaveSymbol {
            get {
                return ResourceManager.GetString("SymbolResolverDoesNotHaveSymbol", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SymbolResolver cannot be used as a per-instance extension. Use the singletonObject overload to add a SymbolResolver to your WorkflowInstanceExtensionManager..
        /// </summary>
        internal static string SymbolResolverMustBeSingleton {
            get {
                return ResourceManager.GetString("SymbolResolverMustBeSingleton", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid contract definition: one-way operation has TransactionFlowOption set to Mandatory in operation &apos;{0}&apos; of contract &apos;{1}&apos;..
        /// </summary>
        internal static string TargetContractCannotBeOneWayWithTransactionFlow {
            get {
                return ResourceManager.GetString("TargetContractCannotBeOneWayWithTransactionFlow", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TargetType and TargetObject are mutually exclusive for {0} &apos;{1}&apos;..
        /// </summary>
        internal static string TargetTypeAndTargetObjectAreMutuallyExclusive {
            get {
                return ResourceManager.GetString("TargetTypeAndTargetObjectAreMutuallyExclusive", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The type of operand in {0} &apos;{1}&apos; cannot be enum type..
        /// </summary>
        internal static string TargetTypeCannotBeEnum {
            get {
                return ResourceManager.GetString("TargetTypeCannotBeEnum", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The type of operand is a value type. The modification to field in &apos;{0}&apos; &apos;{1}&apos; won&apos;t take effect..
        /// </summary>
        internal static string TargetTypeIsValueType {
            get {
                return ResourceManager.GetString("TargetTypeIsValueType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The task timed out after {0}. The time allotted to this operation may have been a portion of a longer timeout..
        /// </summary>
        internal static string TaskTimedOutError {
            get {
                return ResourceManager.GetString("TaskTimedOutError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TextExpressionCompilerSettings.ActivityName must be supplied..
        /// </summary>
        internal static string TextExpressionCompilerActivityNameRequired {
            get {
                return ResourceManager.GetString("TextExpressionCompilerActivityNameRequired", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TextExpressionCompilerSettings.ActivityNamespace must be supplied..
        /// </summary>
        internal static string TextExpressionCompilerActivityNamespaceRequired {
            get {
                return ResourceManager.GetString("TextExpressionCompilerActivityNamespaceRequired", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TextExpressionCompilerSettings.Activity must be supplied..
        /// </summary>
        internal static string TextExpressionCompilerActivityRequired {
            get {
                return ResourceManager.GetString("TextExpressionCompilerActivityRequired", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TextExpressionCompilerSettings.AddGeneratedFile must be supplied..
        /// </summary>
        internal static string TextExpressionCompilerAddGeneratedFileRequired {
            get {
                return ResourceManager.GetString("TextExpressionCompilerAddGeneratedFileRequired", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TextExpressionCompilerSettings.Language must be supplied..
        /// </summary>
        internal static string TextExpressionCompilerLanguageRequired {
            get {
                return ResourceManager.GetString("TextExpressionCompilerLanguageRequired", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The assembly loaded for the name &apos;{0}&apos; does not contain a CodeBase value.  CodeBase is required for compilation..
        /// </summary>
        internal static string TextExpressionCompilerNoCodebase {
            get {
                return ResourceManager.GetString("TextExpressionCompilerNoCodebase", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TextExpressionCompilerSettings.OutputPath must be supplied..
        /// </summary>
        internal static string TextExpressionCompilerOutputPathRequired {
            get {
                return ResourceManager.GetString("TextExpressionCompilerOutputPathRequired", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to load assembly &apos;{0}&apos;..
        /// </summary>
        internal static string TextExpressionCompilerUnableToLoadAssembly {
            get {
                return ResourceManager.GetString("TextExpressionCompilerUnableToLoadAssembly", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Expression Activity type &apos;{0}&apos; requires compilation in order to run.  Please ensure that the workflow has been compiled..
        /// </summary>
        internal static string TextExpressionMetadataRequiresCompilation {
            get {
                return ResourceManager.GetString("TextExpressionMetadataRequiresCompilation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ThreadNeutralSemaphore has been aborted..
        /// </summary>
        internal static string ThreadNeutralSemaphoreAborted {
            get {
                return ResourceManager.GetString("ThreadNeutralSemaphoreAborted", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Throwing an exception. Source: {0}. Exception details: {1}.
        /// </summary>
        internal static string ThrowingEtwException {
            get {
                return ResourceManager.GetString("ThrowingEtwException", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Throwing an exception. Source: {0}. Exception details: {1}.
        /// </summary>
        internal static string ThrowingEtwExceptionVerbose {
            get {
                return ResourceManager.GetString("ThrowingEtwExceptionVerbose", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Throwing an exception. Source: {0}. Exception details: {1}.
        /// </summary>
        internal static string ThrowingException {
            get {
                return ResourceManager.GetString("ThrowingException", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Throwing an exception. Source: {0}. Exception details: {1}.
        /// </summary>
        internal static string ThrowingExceptionVerbose {
            get {
                return ResourceManager.GetString("ThrowingExceptionVerbose", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The persistence provider was unable to reclaim the lock within the timeout provided. This may indicate a deadlock in the pattern of commands simultaneously being executed on different InstanceHandles owned by the same InstanceOwner. This can be alleviated by using multiple InstanceOwners or by ensuring that InstancePersistenceCommand.AutomaticallyAcquiringLock returns false for commands which do not potentially acquire a lock the instance..
        /// </summary>
        internal static string TimedOutWaitingForLockResolution {
            get {
                return ResourceManager.GetString("TimedOutWaitingForLockResolution", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A Dequeue operation timed out after {0}. The time allotted to this operation may have been a portion of a longer timeout..
        /// </summary>
        internal static string TimeoutInputQueueDequeue {
            get {
                return ResourceManager.GetString("TimeoutInputQueueDequeue", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Argument {0} must be a non-negative timeout value. Provided value was {1}..
        /// </summary>
        internal static string TimeoutMustBeNonNegative {
            get {
                return ResourceManager.GetString("TimeoutMustBeNonNegative", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Argument {0} must be a positive timeout value. Provided value was {1}..
        /// </summary>
        internal static string TimeoutMustBePositive {
            get {
                return ResourceManager.GetString("TimeoutMustBePositive", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The operation did not complete within the allotted timeout of {0}. The time allotted to this operation may have been a portion of a longer timeout..
        /// </summary>
        internal static string TimeoutOnOperation {
            get {
                return ResourceManager.GetString("TimeoutOnOperation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The operation did not complete within the allotted timeout of {0}. The time allotted to this operation may have been a portion of a longer timeout..
        /// </summary>
        internal static string TimeoutOnSqlOperation {
            get {
                return ResourceManager.GetString("TimeoutOnSqlOperation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Timeout trying to open a SQL connection. The operation did not complete within the allotted timeout of {0}. The time allotted to this operation may have been a portion of a longer timeout..
        /// </summary>
        internal static string TimeoutOpeningSqlConnection {
            get {
                return ResourceManager.GetString("TimeoutOpeningSqlConnection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This TimerExtension has already been attached to a workflow instance..
        /// </summary>
        internal static string TimerExtensionAlreadyAttached {
            get {
                return ResourceManager.GetString("TimerExtensionAlreadyAttached", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TimerExtension can only be used while it is attached to a workflow instance..
        /// </summary>
        internal static string TimerExtensionRequiresWorkflowInstance {
            get {
                return ResourceManager.GetString("TimerExtensionRequiresWorkflowInstance", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;truncated&gt; The exception message has been truncated due to size.  Use ActivityValidationServices to see all violations..
        /// </summary>
        internal static string TooManyViolationsForExceptionMessage {
            get {
                return ResourceManager.GetString("TooManyViolationsForExceptionMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Wrote to the EventLog..
        /// </summary>
        internal static string TraceCodeEventLogCritical {
            get {
                return ResourceManager.GetString("TraceCodeEventLogCritical", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Wrote to the EventLog..
        /// </summary>
        internal static string TraceCodeEventLogError {
            get {
                return ResourceManager.GetString("TraceCodeEventLogError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Wrote to the EventLog..
        /// </summary>
        internal static string TraceCodeEventLogInfo {
            get {
                return ResourceManager.GetString("TraceCodeEventLogInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Wrote to the EventLog..
        /// </summary>
        internal static string TraceCodeEventLogVerbose {
            get {
                return ResourceManager.GetString("TraceCodeEventLogVerbose", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Wrote to the EventLog..
        /// </summary>
        internal static string TraceCodeEventLogWarning {
            get {
                return ResourceManager.GetString("TraceCodeEventLogWarning", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Calculated correlation key &apos;{0}&apos; using values &apos;{1}&apos; in parent scope &apos;{2}&apos;..
        /// </summary>
        internal static string TraceCorrelationKeys {
            get {
                return ResourceManager.GetString("TraceCorrelationKeys", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Tracking data {0} extracted in activity {1}..
        /// </summary>
        internal static string TrackingDataExtracted {
            get {
                return ResourceManager.GetString("TrackingDataExtracted", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TrackingProfile &apos;{0}&apos; for the ActivityDefinitionId &apos;{1}&apos; not found. Either the TrackingProfile is not found in the config file or the ActivityDefinitionId does not match..
        /// </summary>
        internal static string TrackingProfileNotFound {
            get {
                return ResourceManager.GetString("TrackingProfileNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Size of tracking record {0} exceeds maximum allowed by the ETW session for provider {1}.
        /// </summary>
        internal static string TrackingRecordDropped {
            get {
                return ResourceManager.GetString("TrackingRecordDropped", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Tracking Record {0} raised to {1}..
        /// </summary>
        internal static string TrackingRecordRaised {
            get {
                return ResourceManager.GetString("TrackingRecordRaised", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Truncated tracking record {0} written to ETW session with provider {1}. Variables/annotations/user data have been removed.
        /// </summary>
        internal static string TrackingRecordTruncated {
            get {
                return ResourceManager.GetString("TrackingRecordTruncated", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An error occurred while calling tracking participants causing the instance to be aborted.  See the inner exception for more details..
        /// </summary>
        internal static string TrackingRelatedWorkflowAbort {
            get {
                return ResourceManager.GetString("TrackingRelatedWorkflowAbort", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The extracted argument/variable &apos;{0}&apos; is not serializable..
        /// </summary>
        internal static string TrackingValueNotSerializable {
            get {
                return ResourceManager.GetString("TrackingValueNotSerializable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The call to EndCommit on the CommittableTransaction with id = &apos;{0}&apos; threw a TransactionException with the following message: &apos;{1}&apos;..
        /// </summary>
        internal static string TransactedReceiveScopeEndCommitFailed {
            get {
                return ResourceManager.GetString("TransactedReceiveScopeEndCommitFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Request property of the TransactedReceiveScope &apos;{0}&apos; must be set to a valid Receive activity..
        /// </summary>
        internal static string TransactedReceiveScopeMustHaveValidReceive {
            get {
                return ResourceManager.GetString("TransactedReceiveScopeMustHaveValidReceive", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ReceiveActivity property must be set before TransactedReceiveScope &apos;{0}&apos;can be used..
        /// </summary>
        internal static string TransactedReceiveScopeRequiresReceive {
            get {
                return ResourceManager.GetString("TransactedReceiveScopeRequiresReceive", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The TransactionHandle already has a transaction.  A new transaction cannot be configured..
        /// </summary>
        internal static string TransactionHandleAlreadyHasTransaction {
            get {
                return ResourceManager.GetString("TransactionHandleAlreadyHasTransaction", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Although no ambient transaction was present when InstanceStore.Execute or BeginExecute was invoked, an internal transaction was used in the processing of the command. The internal transaction entered the InDoubt state..
        /// </summary>
        internal static string TransactionInDoubtNonHost {
            get {
                return ResourceManager.GetString("TransactionInDoubtNonHost", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The request timed out because the instance was locked by other transactions..
        /// </summary>
        internal static string TransactionPersistenceTimeout {
            get {
                return ResourceManager.GetString("TransactionPersistenceTimeout", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Although no ambient transaction was present when InstanceStore.Execute or BeginExecute was invoked, an internal transaction was used in the processing of the command. The internal transaction was aborted..
        /// </summary>
        internal static string TransactionRolledBackNonHost {
            get {
                return ResourceManager.GetString("TransactionRolledBackNonHost", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Transition &apos;{0}&apos; cannot be added to state &apos;{1}&apos; because it has been added to state &apos;{2}&apos;..
        /// </summary>
        internal static string TransitionCannotBeAddedTwice {
            get {
                return ResourceManager.GetString("TransitionCannotBeAddedTwice", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;To&apos; property of transition &apos;{0}&apos; of state &apos;{1}&apos; must not be null..
        /// </summary>
        internal static string TransitionTargetCannotBeNull {
            get {
                return ResourceManager.GetString("TransitionTargetCannotBeNull", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to StateMachine does not support Dynamic Update if the Trigger or Condition activity of the executing transition has been changed..
        /// </summary>
        internal static string TriggerOrConditionChangedDuringTransitioning {
            get {
                return ResourceManager.GetString("TriggerOrConditionChangedDuringTransitioning", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to StateMachine does not support Dynamic Update when any of its Trigger or Condition is a reference to an imported child..
        /// </summary>
        internal static string TriggerOrConditionIsReferenced {
            get {
                return ResourceManager.GetString("TriggerOrConditionIsReferenced", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A child activity of the TryCatch activity &apos;{0}&apos; has thrown an exception during cancelation..
        /// </summary>
        internal static string TryCatchExceptionDuringCancelation {
            get {
                return ResourceManager.GetString("TryCatchExceptionDuringCancelation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A Catch or Finally activity that is associated with the TryCatch activity &apos;{0}&apos; has thrown an exception..
        /// </summary>
        internal static string TryCatchExceptionFromCatchOrFinally {
            get {
                return ResourceManager.GetString("TryCatchExceptionFromCatchOrFinally", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The TryCatch activity &apos;{0}&apos; has caught an exception of type &apos;{1}&apos;..
        /// </summary>
        internal static string TryCatchExceptionFromTry {
            get {
                return ResourceManager.GetString("TryCatchExceptionFromTry", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot update inside TryCatch because an exception of type &apos;{0}&apos; has been caught but the matching catch block has been removed..
        /// </summary>
        internal static string TryCatchInvalidStateForUpdate {
            get {
                return ResourceManager.GetString("TryCatchInvalidStateForUpdate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The persistence provider implementation of InstanceStore in use is invalid. It returned false from TryCommand (or EndTryCommand) after executing a nested command using InstancePersistenceContext.Execute (or BeginExecute). If a persistence provider understands and acts upon a command, it must return true..
        /// </summary>
        internal static string TryCommandCannotExecuteSubCommandsAndReduce {
            get {
                return ResourceManager.GetString("TryCommandCannotExecuteSubCommandsAndReduce", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The WorkflowApplication.LoadRunnableInstance operation requires an explicitly created InstanceOwner. To use this method, create an instance owner that has a workflow host type and set it as the DefaultInstanceOwner of the InstanceStore..
        /// </summary>
        internal static string TryLoadRequiresOwner {
            get {
                return ResourceManager.GetString("TryLoadRequiresOwner", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to In order to match and load a runnable instance in the store, the requesting InstanceOwner must have specified a workflow host type when it was created. To do so, add a key-value pair to the CreateWorkflowOwnerCommand.InstanceOwnerMetadata property bag when issuing the command. The key is the WorkflowHostType key provided in the documentation. The value must be an XName and match that of the instances being loaded..
        /// </summary>
        internal static string TryLoadRequiresWorkflowType {
            get {
                return ResourceManager.GetString("TryLoadRequiresWorkflowType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Some context on the correlation handler was not consumed properly. Make sure that the handler was initialized properly by the runtime and the workflow has a Send followed by Receive or ReceiveReply activity..
        /// </summary>
        internal static string TryRegisterRequestContextFailed {
            get {
                return ResourceManager.GetString("TryRegisterRequestContextFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Two ReceiveParametersContent objects with same ServiceContractName and OperationName &apos;{0}&apos; have different number of parameters..
        /// </summary>
        internal static string TwoReceiveParametersWithSameNameButDifferentParameterCount {
            get {
                return ResourceManager.GetString("TwoReceiveParametersWithSameNameButDifferentParameterCount", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Two ReceiveParametersContent objects with same ServiceContractName and OperationName &apos;{0}&apos; have different parameter names..
        /// </summary>
        internal static string TwoReceiveParametersWithSameNameButDifferentParameterName {
            get {
                return ResourceManager.GetString("TwoReceiveParametersWithSameNameButDifferentParameterName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Two ReceiveParametersContent objects with same ServiceContractName and OperationName &apos;{0}&apos; have different parameter types..
        /// </summary>
        internal static string TwoReceiveParametersWithSameNameButDifferentParameterType {
            get {
                return ResourceManager.GetString("TwoReceiveParametersWithSameNameButDifferentParameterType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Two Receive objects with same ServiceContractName and OperationName &apos;{0}&apos; have different Action..
        /// </summary>
        internal static string TwoReceivesWithSameNameButDifferentAction {
            get {
                return ResourceManager.GetString("TwoReceivesWithSameNameButDifferentAction", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Two Receive objects with same ServiceContractName and OperationName &apos;{0}&apos; have different IsOneWay values..
        /// </summary>
        internal static string TwoReceivesWithSameNameButDifferentIsOneWay {
            get {
                return ResourceManager.GetString("TwoReceivesWithSameNameButDifferentIsOneWay", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Two Receive objects with same ServiceContractName and OperationName &apos;{0}&apos; have different transaction properties..
        /// </summary>
        internal static string TwoReceivesWithSameNameButDifferentTxProperties {
            get {
                return ResourceManager.GetString("TwoReceivesWithSameNameButDifferentTxProperties", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Two Receive objects with same ServiceContractName and OperationName &apos;{0}&apos; have different ValueType..
        /// </summary>
        internal static string TwoReceivesWithSameNameButDifferentValueType {
            get {
                return ResourceManager.GetString("TwoReceivesWithSameNameButDifferentValueType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Two SendReply objects with same ServiceContractName and OperationName &apos;{0}&apos; have different Action..
        /// </summary>
        internal static string TwoSendRepliesWithSameNameButDifferentAction {
            get {
                return ResourceManager.GetString("TwoSendRepliesWithSameNameButDifferentAction", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Two SendReply objects with same ServiceContractName and OperationName &apos;{0}&apos; have different ValueType..
        /// </summary>
        internal static string TwoSendRepliesWithSameNameButDifferentValueType {
            get {
                return ResourceManager.GetString("TwoSendRepliesWithSameNameButDifferentValueType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Two SendParametersContent objects with same ServiceContractName and OperationName &apos;{0}&apos; have different number of parameters..
        /// </summary>
        internal static string TwoSendReplyParametersWithSameNameButDifferentParameterCount {
            get {
                return ResourceManager.GetString("TwoSendReplyParametersWithSameNameButDifferentParameterCount", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Two SendParameters objects with same ServiceContractName and OperationName &apos;{0}&apos; have different parameter names..
        /// </summary>
        internal static string TwoSendReplyParametersWithSameNameButDifferentParameterName {
            get {
                return ResourceManager.GetString("TwoSendReplyParametersWithSameNameButDifferentParameterName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Two SendParameters objects with same ServiceContractName and OperationName &apos;{0}&apos; have different parameter types..
        /// </summary>
        internal static string TwoSendReplyParametersWithSameNameButDifferentParameterType {
            get {
                return ResourceManager.GetString("TwoSendReplyParametersWithSameNameButDifferentParameterType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Operation &apos;{0}&apos; in contract &apos;{1}&apos; is specified as two-way, but is missing a SendReply. Please add a SendReply activity for the operation..
        /// </summary>
        internal static string TwoWayIsImplementedAsOneWay {
            get {
                return ResourceManager.GetString("TwoWayIsImplementedAsOneWay", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Failed adding a TypeConverterHelper for type &apos;{0}&apos; to the internal cache of helpers..
        /// </summary>
        internal static string TypeConverterHelperCacheAddFailed {
            get {
                return ResourceManager.GetString("TypeConverterHelperCacheAddFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot assign from type &apos;{0}&apos; to type &apos;{1}&apos; in Assign activity &apos;{2}&apos;..
        /// </summary>
        internal static string TypeMismatchForAssign {
            get {
                return ResourceManager.GetString("TypeMismatchForAssign", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The type &apos;{0}&apos; must be value type..
        /// </summary>
        internal static string TypeMustbeValueType {
            get {
                return ResourceManager.GetString("TypeMustbeValueType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0} is not assignable to {1}..
        /// </summary>
        internal static string TypeNotAssignableTo {
            get {
                return ResourceManager.GetString("TypeNotAssignableTo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to deserialize ResponseContent of type &apos;{0}&apos;..
        /// </summary>
        internal static string UnableToDeserializeHttpResponseContent {
            get {
                return ResourceManager.GetString("UnableToDeserializeHttpResponseContent", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to locate the ICompiledExpressionRoot for compiled location &apos;{0}&apos;.  Make sure that the definition for the activity containing this expression has been compiled..
        /// </summary>
        internal static string UnableToLocateCompiledLocationContext {
            get {
                return ResourceManager.GetString("UnableToLocateCompiledLocationContext", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The InstanceStore could not be initialized..
        /// </summary>
        internal static string UnableToOpenAndRegisterStore {
            get {
                return ResourceManager.GetString("UnableToOpenAndRegisterStore", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Trigger-less transition &apos;{0}&apos; of state &apos;{1}&apos; must contain a condition.  A state can only have one unconditional transition that has no trigger..
        /// </summary>
        internal static string UnconditionalTransitionShouldNotShareNullTriggersWithOthers {
            get {
                return ResourceManager.GetString("UnconditionalTransitionShouldNotShareNullTriggersWithOthers", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Transition &apos;{0}&apos; of state &apos;{1}&apos; is an unconditional transition. It may not share the same trigger &apos;{2}&apos; with other transition(s)..
        /// </summary>
        internal static string UnconditionalTransitionShouldNotShareTriggersWithOthers {
            get {
                return ResourceManager.GetString("UnconditionalTransitionShouldNotShareTriggersWithOthers", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The number of arguments specified in the collection &apos;{0}&apos; is &apos;{1}&apos; whereas the expected count is &apos;{2}&apos;. .
        /// </summary>
        internal static string UnexpectedArgumentCount {
            get {
                return ResourceManager.GetString("UnexpectedArgumentCount", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Expression node of type &apos;{0}&apos; is expected, but expression node of type &apos;{1}&apos; was provided..
        /// </summary>
        internal static string UnexpectedExpressionNodeType {
            get {
                return ResourceManager.GetString("UnexpectedExpressionNodeType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unhandled exception.  Exception details: {0}.
        /// </summary>
        internal static string UnhandledException {
            get {
                return ResourceManager.GetString("UnhandledException", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The persistence provider implementation of InstanceStore in use is invalid. It reported loading an instance with InstanceState.Uninitialized that contained instance data. Uninitialized instances may not contain instance data..
        /// </summary>
        internal static string UninitializedCannotHaveData {
            get {
                return ResourceManager.GetString("UninitializedCannotHaveData", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified RuntimeTransactionHandle was not properly initialized..
        /// </summary>
        internal static string UnInitializedRuntimeTransactionHandle {
            get {
                return ResourceManager.GetString("UnInitializedRuntimeTransactionHandle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The requested compression option {0} is not a valid option..
        /// </summary>
        internal static string UnknownCompressionOption {
            get {
                return ResourceManager.GetString("UnknownCompressionOption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The version of the database cannot be determined as no rows were found in System.Activities.DurableInstancing.SqlWorkflowInstanceStoreVersionTable.  This table should contain a single row that corresponds to the version of the framework that it was created with or upgraded to..
        /// </summary>
        internal static string UnknownDatabaseVersion {
            get {
                return ResourceManager.GetString("UnknownDatabaseVersion", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There was an unknown error processing the expression &quot;{0}&quot;. Processing the expression text did not cause an exception but also did not create an executable expression..
        /// </summary>
        internal static string UnknownExpressionCompilationError {
            get {
                return ResourceManager.GetString("UnknownExpressionCompilationError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to use &apos;{0}&apos; as a language for expressions..
        /// </summary>
        internal static string UnknownLanguage {
            get {
                return ResourceManager.GetString("UnknownLanguage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Stored procedure returned unknown execution result {0}..
        /// </summary>
        internal static string UnknownSprocResult {
            get {
                return ResourceManager.GetString("UnknownSprocResult", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Encountered exception {0} while attempting to unlock instance..
        /// </summary>
        internal static string UnlockInstanceException {
            get {
                return ResourceManager.GetString("UnlockInstanceException", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There was an unmatched exit on the NoPersistHandle.  Exit can only be called once per enter..
        /// </summary>
        internal static string UnmatchedNoPersistExit {
            get {
                return ResourceManager.GetString("UnmatchedNoPersistExit", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only opened activities can be executed.  Activity &apos;{0}&apos; has not been opened..
        /// </summary>
        internal static string UnopenedActivitiesCannotBeExecuted {
            get {
                return ResourceManager.GetString("UnopenedActivitiesCannotBeExecuted", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Expression of type &apos;{0}&apos; is not supported..
        /// </summary>
        internal static string UnsupportedExpressionType {
            get {
                return ResourceManager.GetString("UnsupportedExpressionType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to LocationReference value must be either a Variable, a RuntimeArgument or a DelegateArgument..
        /// </summary>
        internal static string UnsupportedLocationReferenceValue {
            get {
                return ResourceManager.GetString("UnsupportedLocationReferenceValue", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to MemberExpression retrieving a member of type &apos;{0}&apos; is not supported..
        /// </summary>
        internal static string UnsupportedMemberExpressionWithType {
            get {
                return ResourceManager.GetString("UnsupportedMemberExpressionWithType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Expression of type &apos;{0}&apos; is not supported for LValue..
        /// </summary>
        internal static string UnsupportedReferenceExpressionType {
            get {
                return ResourceManager.GetString("UnsupportedReferenceExpressionType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The following keys from the input dictionary do not map to arguments and must be removed: {0}.  Please note that argument names are case sensitive..
        /// </summary>
        internal static string UnusedInputArguments {
            get {
                return ResourceManager.GetString("UnusedInputArguments", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unwrapped messages are only supported using MessageContracts. Please use MessageContract type for operation &apos;{0}&apos; of implemented contract &apos;{1}&apos;..
        /// </summary>
        internal static string UnwrappedMessageNotSupported {
            get {
                return ResourceManager.GetString("UnwrappedMessageNotSupported", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to WorkflowIdentity &apos;{0}&apos; does not match any of the hosted WorkflowServices..
        /// </summary>
        internal static string UpdateDefinitionNotFound {
            get {
                return ResourceManager.GetString("UpdateDefinitionNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Property &apos;{0}&apos; on DynamicUpdateMapBuilder must be set..
        /// </summary>
        internal static string UpdateMapBuilderRequiredProperty {
            get {
                return ResourceManager.GetString("UpdateMapBuilderRequiredProperty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There is no DynamicUpdateMap available for updating from WorkflowIdentity &apos;{0}&apos; to &apos;{1}&apos;..
        /// </summary>
        internal static string UpdateMapNotFound {
            get {
                return ResourceManager.GetString("UpdateMapNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The original and updated workflow must have the same count, name, type and order of external symbols..
        /// </summary>
        internal static string UpdateSymbolsMustMatch {
            get {
                return ResourceManager.GetString("UpdateSymbolsMustMatch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The UriBase argument must be specified in activity &apos;{0}&apos;..
        /// </summary>
        internal static string UriBaseMustBeSpecified {
            get {
                return ResourceManager.GetString("UriBaseMustBeSpecified", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to System.ServiceModel.Activities.WorkflowServiceHost is incompatible with System.ServiceModel.Persistence.PersistenceProviderBehavior.  The PersistenceProviderBehavior or derived class, such as SqlPersistenceProviderBehavior, should be removed.  To enable persistence with WorkflowServiceHost, a behavior which installs a System.Runtime.DurableInstancing.InstanceStore should be used instead, such as SqlInstanceStoreBehavior..
        /// </summary>
        internal static string UseInstanceStoreInsteadOfPersistenceProvider {
            get {
                return ResourceManager.GetString("UseInstanceStoreInsteadOfPersistenceProvider", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The instance persistence system is unable to process an invalid InstancePersistenceCommand. The command requires the UnlockInstance property to be set to be true if CompleteInstance property is set to true..
        /// </summary>
        internal static string ValidateUnlockInstance {
            get {
                return ResourceManager.GetString("ValidateUnlockInstance", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The ToValidateContext argument of the {0} named &apos;{1}&apos; resolved to null.  A non-null validation context object must be provided..
        /// </summary>
        internal static string ValidationContextCannotBeNull {
            get {
                return ResourceManager.GetString("ValidationContextCannotBeNull", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The private implementation of activity &apos;{0}&apos; has the following validation error:   .
        /// </summary>
        internal static string ValidationErrorPrefixForHiddenActivity {
            get {
                return ResourceManager.GetString("ValidationErrorPrefixForHiddenActivity", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The private implementation of activity &apos;{0}&apos; has the following validation error in the activity &apos;{1}&apos;:   .
        /// </summary>
        internal static string ValidationErrorPrefixForPublicActivityWithHiddenParent {
            get {
                return ResourceManager.GetString("ValidationErrorPrefixForPublicActivityWithHiddenParent", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The ArgumentType of Message is not a derived type from DeclaredMessageType in activity &apos;{0}&apos; with OperationName=&apos;{1}&apos;..
        /// </summary>
        internal static string ValueArgumentTypeNotDerivedFromValueType {
            get {
                return ResourceManager.GetString("ValueArgumentTypeNotDerivedFromValueType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; should be greater than or equal to zero..
        /// </summary>
        internal static string ValueCannotBeNegative {
            get {
                return ResourceManager.GetString("ValueCannotBeNegative", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Content property must be set in activity &apos;{0}&apos; with OperationName=&apos;{1}&apos;..
        /// </summary>
        internal static string ValueCannotBeNull {
            get {
                return ResourceManager.GetString("ValueCannotBeNull", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Mutating a value collection derived from a dictionary is not allowed..
        /// </summary>
        internal static string ValueCollectionUpdatesNotAllowed {
            get {
                return ResourceManager.GetString("ValueCollectionUpdatesNotAllowed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The provided value must be assignable to the provided type..
        /// </summary>
        internal static string ValueMustBeAssignableToType {
            get {
                return ResourceManager.GetString("ValueMustBeAssignableToType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Value must be non-negative..
        /// </summary>
        internal static string ValueMustBeNonNegative {
            get {
                return ResourceManager.GetString("ValueMustBeNonNegative", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; bigger than Int32.MaxValue is not honored. To disable timeout, specify TimeSpan.MaxValue..
        /// </summary>
        internal static string ValueTooLarge {
            get {
                return ResourceManager.GetString("ValueTooLarge", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Variable &apos;{0}&apos; can not be used on Activity &apos;{1}&apos; because it is already in use by Activity &apos;{2}&apos;..
        /// </summary>
        internal static string VariableAlreadyInUseOnActivity {
            get {
                return ResourceManager.GetString("VariableAlreadyInUseOnActivity", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Variable {0} cannot be populated in the LocationEnvironment..
        /// </summary>
        internal static string VariableCannotBePopulatedInLocationEnvironment {
            get {
                return ResourceManager.GetString("VariableCannotBePopulatedInLocationEnvironment", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Variable &apos;{0}&apos; does not exist in this environment..
        /// </summary>
        internal static string VariableDoesNotExist {
            get {
                return ResourceManager.GetString("VariableDoesNotExist", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Default of Variable &apos;{0}&apos; requires type &apos;{1}&apos;, but an Activity with result type &apos;{2}&apos; is provided..
        /// </summary>
        internal static string VariableExpressionTypeMismatch {
            get {
                return ResourceManager.GetString("VariableExpressionTypeMismatch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Variable &apos;{0}&apos; is read only and cannot be modified..
        /// </summary>
        internal static string VariableIsReadOnly {
            get {
                return ResourceManager.GetString("VariableIsReadOnly", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Variable must be set before CacheMetadata is called..
        /// </summary>
        internal static string VariableMustBeSet {
            get {
                return ResourceManager.GetString("VariableMustBeSet", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Variable name &apos;{0}&apos; can not be serialized as it does not represent a valid identifier..
        /// </summary>
        internal static string VariableNameNotAnIdentifier {
            get {
                return ResourceManager.GetString("VariableNameNotAnIdentifier", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Variable &apos;{0}&apos; of type &apos;{1}&apos; cannot be used. Please make sure it is declared in an Activity or SymbolResolver..
        /// </summary>
        internal static string VariableNotOpen {
            get {
                return ResourceManager.GetString("VariableNotOpen", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The referenced Variable object (Name = &apos;{0}&apos;) is not visible at this scope.  There may be another location reference with the same name that is visible at this scope, but it does not reference the same location..
        /// </summary>
        internal static string VariableNotVisible {
            get {
                return ResourceManager.GetString("VariableNotVisible", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Activity &apos;{0}&apos; cannot access this variable because it is declared at the scope of activity &apos;{1}&apos;.  An activity can only access its own implementation variables..
        /// </summary>
        internal static string VariableOnlyAccessibleAtScopeOfDeclaration {
            get {
                return ResourceManager.GetString("VariableOnlyAccessibleAtScopeOfDeclaration", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Adding variables or arguments to an already completed activity that can be referenced by the compensation handler or the confirmation handler is not supported..
        /// </summary>
        internal static string VariableOrArgumentAdditionToReferencedEnvironmentNoDUSupported {
            get {
                return ResourceManager.GetString("VariableOrArgumentAdditionToReferencedEnvironmentNoDUSupported", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Variable or argument &apos;{0}&apos; does not exist in this environment..
        /// </summary>
        internal static string VariableOrArgumentDoesNotExist {
            get {
                return ResourceManager.GetString("VariableOrArgumentDoesNotExist", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Variable &apos;{0}&apos; must be included in an activity before it is used..
        /// </summary>
        internal static string VariableShouldBeOpen {
            get {
                return ResourceManager.GetString("VariableShouldBeOpen", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Variable &apos;{0}&apos; cannot be used in an expression of type &apos;{1}&apos;, since it is of type &apos;{2}&apos; which is not compatible..
        /// </summary>
        internal static string VariableTypeInvalid {
            get {
                return ResourceManager.GetString("VariableTypeInvalid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Variable type &apos;{0}&apos; does not match Location type &apos;{1}&apos;..
        /// </summary>
        internal static string VariableTypeNotMatchLocationType {
            get {
                return ResourceManager.GetString("VariableTypeNotMatchLocationType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An InstanceHandle can have at most one outstanding WaitForEvents or BeginWaitForEvents operation in progress at a time. A second operation was attempted. Only call WaitForEvents / BeginWaitForEvents once the previous operation has completed..
        /// </summary>
        internal static string WaitAlreadyInProgress {
            get {
                return ResourceManager.GetString("WaitAlreadyInProgress", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A WaitForEvents or BeginWaitForEvents operation timed out after {0}. The time allotted to this operation may have been a portion of a longer timeout..
        /// </summary>
        internal static string WaitForEventsTimedOut {
            get {
                return ResourceManager.GetString("WaitForEventsTimedOut", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A WorkflowDataContext can only be accessed within the scope of the activity it was obtained in..
        /// </summary>
        internal static string WDCDisposed {
            get {
                return ResourceManager.GetString("WDCDisposed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Message received by workflow.
        /// </summary>
        internal static string WfMessageReceived {
            get {
                return ResourceManager.GetString("WfMessageReceived", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Message sent from workflow.
        /// </summary>
        internal static string WfMessageSent {
            get {
                return ResourceManager.GetString("WfMessageSent", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Condition must be set before While activity &apos;{0}&apos; can be used..
        /// </summary>
        internal static string WhileRequiresCondition {
            get {
                return ResourceManager.GetString("WhileRequiresCondition", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Could not find the windows group &apos;{0}&apos;..
        /// </summary>
        internal static string WindowsGroupNotFound {
            get {
                return ResourceManager.GetString("WindowsGroupNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0} InnerException Message: {1}.
        /// </summary>
        internal static string WorkflowAbortedReason {
            get {
                return ResourceManager.GetString("WorkflowAbortedReason", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to WorkflowInstance Id: &apos;{0}&apos; E2E Activity.
        /// </summary>
        internal static string WorkflowActivityResume {
            get {
                return ResourceManager.GetString("WorkflowActivityResume", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to WorkflowInstance Id: &apos;{0}&apos; E2E Activity.
        /// </summary>
        internal static string WorkflowActivityStart {
            get {
                return ResourceManager.GetString("WorkflowActivityStart", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to WorkflowInstance Id: &apos;{0}&apos; E2E Activity.
        /// </summary>
        internal static string WorkflowActivityStop {
            get {
                return ResourceManager.GetString("WorkflowActivityStop", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to WorkflowInstance Id: &apos;{0}&apos; E2E Activity.
        /// </summary>
        internal static string WorkflowActivitySuspend {
            get {
                return ResourceManager.GetString("WorkflowActivitySuspend", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The operation could not be performed because WorkflowApplication {0} is aborted..
        /// </summary>
        internal static string WorkflowApplicationAborted {
            get {
                return ResourceManager.GetString("WorkflowApplicationAborted", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An instance ID has been generated for the WorkflowApplication because the &apos;Id&apos; property was read. WorkflowApplication cannot be used to load an instance once an ID has been generated..
        /// </summary>
        internal static string WorkflowApplicationAlreadyHasId {
            get {
                return ResourceManager.GetString("WorkflowApplicationAlreadyHasId", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to WorkflowInstance Id: &apos;{0}&apos; has completed in the Closed state..
        /// </summary>
        internal static string WorkflowApplicationCompleted {
            get {
                return ResourceManager.GetString("WorkflowApplicationCompleted", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to WorkflowApplication Id: &apos;{0}&apos; went idle..
        /// </summary>
        internal static string WorkflowApplicationIdled {
            get {
                return ResourceManager.GetString("WorkflowApplicationIdled", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This WorkflowApplicationInstance has already been abandoned, or is in the process of abandoning. No further operations may be performed on it..
        /// </summary>
        internal static string WorkflowApplicationInstanceAbandoned {
            get {
                return ResourceManager.GetString("WorkflowApplicationInstanceAbandoned", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This WorkflowApplicationInstance has already been associated with a WorkflowApplication. To control the instance, use that WorkflowApplication..
        /// </summary>
        internal static string WorkflowApplicationInstanceLoaded {
            get {
                return ResourceManager.GetString("WorkflowApplicationInstanceLoaded", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to WorkflowApplication Id: &apos;{0}&apos; is idle and persistable.  The following action will be taken: {1}..
        /// </summary>
        internal static string WorkflowApplicationPersistableIdle {
            get {
                return ResourceManager.GetString("WorkflowApplicationPersistableIdle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to WorkflowApplication Id: &apos;{0}&apos; was Persisted..
        /// </summary>
        internal static string WorkflowApplicationPersisted {
            get {
                return ResourceManager.GetString("WorkflowApplicationPersisted", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to WorkflowApplication Id: &apos;{0}&apos; was terminated. It has completed in the Faulted state with an exception..
        /// </summary>
        internal static string WorkflowApplicationTerminated {
            get {
                return ResourceManager.GetString("WorkflowApplicationTerminated", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to WorkflowInstance Id: &apos;{0}&apos; has encountered an unhandled exception.  The exception originated from Activity &apos;{1}&apos;, DisplayName: &apos;{2}&apos;.  The following action will be taken: {3}..
        /// </summary>
        internal static string WorkflowApplicationUnhandledException {
            get {
                return ResourceManager.GetString("WorkflowApplicationUnhandledException", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to WorkflowInstance Id: &apos;{0}&apos; was Unloaded..
        /// </summary>
        internal static string WorkflowApplicationUnloaded {
            get {
                return ResourceManager.GetString("WorkflowApplicationUnloaded", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &apos;{0}&apos; behavior must be applied to a WorkflowServiceHost..
        /// </summary>
        internal static string WorkflowBehaviorWithNonWorkflowHost {
            get {
                return ResourceManager.GetString("WorkflowBehaviorWithNonWorkflowHost", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The AsyncResult returned from OnBeginWorkflowCompleted cannot be null..
        /// </summary>
        internal static string WorkflowCompletionAsyncResultCannotBeNull {
            get {
                return ResourceManager.GetString("WorkflowCompletionAsyncResultCannotBeNull", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The default value for WorkflowControlEndpoint.DefaultBaseUri is not supported in Partial Trust. Use configuration or the non-default constructor to specify the binding and address for the WorkflowControlEndpoint..
        /// </summary>
        internal static string WorkflowControlEndpointDefaultBaseUriNotSupportedInPartialTrust {
            get {
                return ResourceManager.GetString("WorkflowControlEndpointDefaultBaseUriNotSupportedInPartialTrust", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An instance that persisted with a WorkflowIdentity (&apos;{0}&apos;) cannot be loaded in a host with no WorkflowIdentity specified..
        /// </summary>
        internal static string WorkflowIdentityNullHostId {
            get {
                return ResourceManager.GetString("WorkflowIdentityNullHostId", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An instance that persisted without a WorkflowIdentity cannot be loaded in a host that has WorkflowIdentity (&apos;{0}&apos;) specified. The instance can be loaded using a different definition, or updated using Dynamic Update..
        /// </summary>
        internal static string WorkflowIdentityNullStateId {
            get {
                return ResourceManager.GetString("WorkflowIdentityNullStateId", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The WorkflowIdentity (&apos;{0}&apos;) of the loaded instance does not match the WorkflowIdentity (&apos;{1}&apos;) of the provided workflow definition. The instance can be loaded using a different definition, or updated using Dynamic Update..
        /// </summary>
        internal static string WorkflowIdentityStateIdHostIdMismatch {
            get {
                return ResourceManager.GetString("WorkflowIdentityStateIdHostIdMismatch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The operation could not be performed because WorkflowInstance &apos;{0}&apos; was aborted..
        /// </summary>
        internal static string WorkflowInstanceAborted {
            get {
                return ResourceManager.GetString("WorkflowInstanceAborted", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TrackRecord = WorkflowInstanceAbortedRecord, InstanceID = {0}, RecordNumber = {1}, EventTime = {2}, ActivityDefinitionId = {3}, Reason = {4},  Annotations = {5}, ProfileName = {6}, WorkflowDefinitionIdentity = {7}.
        /// </summary>
        internal static string WorkflowInstanceAbortedRecordWithId {
            get {
                return ResourceManager.GetString("WorkflowInstanceAbortedRecordWithId", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to WorkflowInstance Id: &apos;{0}&apos; has completed in the Canceled state..
        /// </summary>
        internal static string WorkflowInstanceCanceled {
            get {
                return ResourceManager.GetString("WorkflowInstanceCanceled", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The operation could not be performed because WorkflowInstance &apos;{0}&apos; has completed..
        /// </summary>
        internal static string WorkflowInstanceCompleted {
            get {
                return ResourceManager.GetString("WorkflowInstanceCompleted", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to WorkflowInstance &apos;{0}&apos; cannot be modified after it has started running..
        /// </summary>
        internal static string WorkflowInstanceIsReadOnly {
            get {
                return ResourceManager.GetString("WorkflowInstanceIsReadOnly", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The instance &apos;{0}&apos; was found in the instance store, but the instance does not contain a workflow..
        /// </summary>
        internal static string WorkflowInstanceNotFoundInStore {
            get {
                return ResourceManager.GetString("WorkflowInstanceNotFoundInStore", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TrackRecord= WorkflowInstanceRecord, InstanceID = {0}, RecordNumber = {1}, EventTime = {2}, ActivityDefinitionId = {3}, State = {4}, Annotations = {5}, ProfileName = {6}, WorkflowDefinitionIdentity = {7}.
        /// </summary>
        internal static string WorkflowInstanceRecordWithId {
            get {
                return ResourceManager.GetString("WorkflowInstanceRecordWithId", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TrackRecord = WorkflowInstanceSuspendedRecord, InstanceID = {0}, RecordNumber = {1}, EventTime = {2}, ActivityDefinitionId = {3}, Reason = {4}, Annotations = {5}, ProfileName = {6}.
        /// </summary>
        internal static string WorkflowInstanceSuspendedRecord {
            get {
                return ResourceManager.GetString("WorkflowInstanceSuspendedRecord", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TrackRecord = WorkflowInstanceSuspendedRecord, InstanceID = {0}, RecordNumber = {1}, EventTime = {2}, ActivityDefinitionId = {3}, Reason = {4}, Annotations = {5}, ProfileName = {6}, WorkflowDefinitionIdentity = {7}.
        /// </summary>
        internal static string WorkflowInstanceSuspendedRecordWithId {
            get {
                return ResourceManager.GetString("WorkflowInstanceSuspendedRecordWithId", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The operation could not be performed because WorkflowInstance &apos;{0}&apos; has terminated..
        /// </summary>
        internal static string WorkflowInstanceTerminated {
            get {
                return ResourceManager.GetString("WorkflowInstanceTerminated", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TrackRecord = WorkflowInstanceTerminatedRecord, InstanceID = {0}, RecordNumber = {1}, EventTime = {2}, ActivityDefinitionId = {3}, Reason = {4}, Annotations = {5}, ProfileName = {6}.
        /// </summary>
        internal static string WorkflowInstanceTerminatedRecord {
            get {
                return ResourceManager.GetString("WorkflowInstanceTerminatedRecord", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TrackRecord = WorkflowInstanceTerminatedRecord, InstanceID = {0}, RecordNumber = {1}, EventTime = {2}, ActivityDefinitionId = {3}, Reason = {4},  Annotations = {5}, ProfileName = {6}, WorkflowDefinitionIdentity = {7}.
        /// </summary>
        internal static string WorkflowInstanceTerminatedRecordWithId {
            get {
                return ResourceManager.GetString("WorkflowInstanceTerminatedRecordWithId", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TrackRecord = WorkflowInstanceUnhandledExceptionRecord, InstanceID = {0}, RecordNumber = {1}, EventTime = {2}, ActivityDefinitionId = {3}, SourceName = {4}, SourceId = {5}, SourceInstanceId = {6}, SourceTypeName={7}, Exception={8},  Annotations= {9}, ProfileName = {10}, WorkflowDefinitionIdentity = {11}.
        /// </summary>
        internal static string WorkflowInstanceUnhandledExceptionRecordWithId {
            get {
                return ResourceManager.GetString("WorkflowInstanceUnhandledExceptionRecordWithId", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The operation could not be performed because WorkflowInstance &apos;{0}&apos; was unloaded..
        /// </summary>
        internal static string WorkflowInstanceUnloaded {
            get {
                return ResourceManager.GetString("WorkflowInstanceUnloaded", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The operation could not be performed because WorkflowInstance {0} is unlocked..
        /// </summary>
        internal static string WorkflowInstanceUnlocked {
            get {
                return ResourceManager.GetString("WorkflowInstanceUnlocked", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TrackRecord= WorkflowInstanceUpdatedRecord, InstanceID = {0}, RecordNumber = {1}, EventTime = {2}, ActivityDefinitionId = {3}, State = {4}, OriginalDefinitionIdentity = {5}, UpdatedDefinitionIdentity = {6}, Annotations = {7}, ProfileName = {8}.
        /// </summary>
        internal static string WorkflowInstanceUpdatedRecord {
            get {
                return ResourceManager.GetString("WorkflowInstanceUpdatedRecord", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to WorkflowInstance &apos;{0}&apos; could not be updated to identity &apos;{1}&apos;. Review the tracking output for a list of executing activities that could not be updated..
        /// </summary>
        internal static string WorkflowInstanceUpdateFailed {
            get {
                return ResourceManager.GetString("WorkflowInstanceUpdateFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Please make sure that a Receive activity is hosted within a WorkflowServiceHost..
        /// </summary>
        internal static string WorkflowMustBeHosted {
            get {
                return ResourceManager.GetString("WorkflowMustBeHosted", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The WorkflowIdentity (&apos;{0}&apos;) of the loaded instance does not match any of the hosted WorkflowServices..
        /// </summary>
        internal static string WorkflowServiceDefinitionIdentityNotMatched {
            get {
                return ResourceManager.GetString("WorkflowServiceDefinitionIdentityNotMatched", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to WorkflowService definitions cannot be added or removed after the WorkflowServiceHost has been opened, faulted, aborted or closed..
        /// </summary>
        internal static string WorkflowServiceHostCannotAddOrRemoveServiceDefinitionAfterOpen {
            get {
                return ResourceManager.GetString("WorkflowServiceHostCannotAddOrRemoveServiceDefinitionAfterOpen", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The workflow was terminated by a Terminate activity..
        /// </summary>
        internal static string WorkflowTerminatedExceptionDefaultMessage {
            get {
                return ResourceManager.GetString("WorkflowTerminatedExceptionDefaultMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An error processing the current work item has caused the workflow to abort.  See the inner exception for details..
        /// </summary>
        internal static string WorkItemAbortedInstance {
            get {
                return ResourceManager.GetString("WorkItemAbortedInstance", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Custom wrapper names and namespaces are only supported using MessageContracts. Please use a MessageContract type for operation &apos;{0}&apos; in implemented contract &apos;{1}&apos;..
        /// </summary>
        internal static string WrapperNotSupportedInMessageContract {
            get {
                return ResourceManager.GetString("WrapperNotSupportedInMessageContract", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Activity &apos;{0}&apos; cannot write to this public location reference because it was declared with ArgumentDirection.In. To allow both reading and writing, declare the reference with ArgumentDirection.InOut..
        /// </summary>
        internal static string WriteAccessToReadOnlyPublicReference {
            get {
                return ResourceManager.GetString("WriteAccessToReadOnlyPublicReference", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The property or indexer &apos;{0}.{1}&apos; cannot be used in this context because the get accessor is inaccessible..
        /// </summary>
        internal static string WriteonlyPropertyCannotBeRead {
            get {
                return ResourceManager.GetString("WriteonlyPropertyCannotBeRead", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The argument has the wrong type.  It is of type &apos;{0}&apos; but must be assignable to &apos;{1}&apos;..
        /// </summary>
        internal static string WrongArgumentType {
            get {
                return ResourceManager.GetString("WrongArgumentType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The CacheMetadata method which takes an ActivityMetadata parameter must not be called on a CodeActivity or AsyncCodeActivity.  The correct CacheMetadata for these classes takes a CodeActivityMetadata parameter..
        /// </summary>
        internal static string WrongCacheMetadataForCodeActivity {
            get {
                return ResourceManager.GetString("WrongCacheMetadataForCodeActivity", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The CacheMetadata method which takes an ActivityMetadata parameter must not be called on a NativeActivity.  The correct CacheMetadata for NativeActivity takes a NativeActivityMetadata parameter..
        /// </summary>
        internal static string WrongCacheMetadataForNativeActivity {
            get {
                return ResourceManager.GetString("WrongCacheMetadataForNativeActivity", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Expected activity &apos;{0}&apos; to have &apos;{1}&apos; argument(s), &apos;{2}&apos; public variable(s), &apos;{3}&apos; private variable(s), and &apos;{4}&apos; runtime delegate argument(s). Actual: &apos;{5}&apos; arguments, &apos;{6}&apos; public variable(s), &apos;{7}&apos; private variable(s), &apos;{8}&apos; runtime delegate argument(s)..
        /// </summary>
        internal static string WrongEnvironmentCount {
            get {
                return ResourceManager.GetString("WrongEnvironmentCount", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to IdSpace with owner &apos;{0}&apos; has &apos;{1}&apos; members; expected &apos;{2}&apos;..
        /// </summary>
        internal static string WrongMemberCount {
            get {
                return ResourceManager.GetString("WrongMemberCount", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ActivityDelegate arguments don&apos;t match. Check your activity configuration to make sure it is in sync with the declared ActivityDelegate..
        /// </summary>
        internal static string WrongNumberOfArgumentsForActivityDelegate {
            get {
                return ResourceManager.GetString("WrongNumberOfArgumentsForActivityDelegate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The OnCreateDynamicUpdateMap method which takes an UpdateMapMetadata parameter must not be called on a NativeActivity.  The correct OnCreateDynamicUpdateMap for NativeActivity takes a NativeActivityUpdateMapMetadata parameter..
        /// </summary>
        internal static string WrongOnCreateDynamicUpdateMapForNativeActivity {
            get {
                return ResourceManager.GetString("WrongOnCreateDynamicUpdateMapForNativeActivity", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Expected the original environment of activity &apos;{0}&apos; to have &apos;{1}&apos; argument(s), &apos;{2}&apos; public variable(s), &apos;{3}&apos; private variable(s), and &apos;{4}&apos; runtime delegate argument(s), for a total of &apos;{5}&apos;. Actual total of locations is &apos;{6}&apos;..
        /// </summary>
        internal static string WrongOriginalEnvironmentCount {
            get {
                return ResourceManager.GetString("WrongOriginalEnvironmentCount", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The XAML resource expected to be generated by the XAML build task ({0}) was not found. Try rebuilding the project..
        /// </summary>
        internal static string XamlBuildTaskResourceNotFound {
            get {
                return ResourceManager.GetString("XamlBuildTaskResourceNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Element representation is expected..
        /// </summary>
        internal static string XamlElementExpected {
            get {
                return ResourceManager.GetString("XamlElementExpected", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Element representation is expected at line ({0}, {1})..
        /// </summary>
        internal static string XamlElementExpectedAt {
            get {
                return ResourceManager.GetString("XamlElementExpectedAt", resourceCulture);
            }
        }
    }
}
